// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ignition/msgs/web_request.proto

#ifndef PROTOBUF_ignition_2fmsgs_2fweb_5frequest_2eproto__INCLUDED
#define PROTOBUF_ignition_2fmsgs_2fweb_5frequest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/header.pb.h"
#ifndef _MSC_VER
#pragma GCC system_header
#else
#pragma warning(push)
#pragma warning(disable: 4244 4267 4100 4244 4512 4127 4068 4275 4251)
#endif
#include <memory>
#include <ignition/msgs/Export.hh>
// @@protoc_insertion_point(includes)

namespace ignition {
namespace msgs {

// Internal implementation detail -- do not call these.
void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fweb_5frequest_2eproto();
void protobuf_AssignDesc_ignition_2fmsgs_2fweb_5frequest_2eproto();
void protobuf_ShutdownFile_ignition_2fmsgs_2fweb_5frequest_2eproto();

class WebRequest;

// ===================================================================

class IGNITION_MSGS_VISIBLE WebRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.WebRequest) */ {
 public:
  WebRequest();
  virtual ~WebRequest();

  WebRequest(const WebRequest& from);

  inline WebRequest& operator=(const WebRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WebRequest& default_instance();

  void Swap(WebRequest* other);

  // implements Message ----------------------------------------------

  inline WebRequest* New() const { return New(NULL); }

  WebRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WebRequest& from);
  void MergeFrom(const WebRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WebRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ignition.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::ignition::msgs::Header& header() const;
  ::ignition::msgs::Header* mutable_header();
  ::ignition::msgs::Header* release_header();
  void set_allocated_header(::ignition::msgs::Header* header);

  // optional string operation = 2;
  bool has_operation() const;
  void clear_operation();
  static const int kOperationFieldNumber = 2;
  const ::std::string& operation() const;
  void set_operation(const ::std::string& value);
  void set_operation(const char* value);
  void set_operation(const char* value, size_t size);
  ::std::string* mutable_operation();
  ::std::string* release_operation();
  void set_allocated_operation(::std::string* operation);

  // optional string topic = 3;
  bool has_topic() const;
  void clear_topic();
  static const int kTopicFieldNumber = 3;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // optional string msg_type = 4;
  bool has_msg_type() const;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 4;
  const ::std::string& msg_type() const;
  void set_msg_type(const ::std::string& value);
  void set_msg_type(const char* value);
  void set_msg_type(const char* value, size_t size);
  ::std::string* mutable_msg_type();
  ::std::string* release_msg_type();
  void set_allocated_msg_type(::std::string* msg_type);

  // optional string compression = 5;
  bool has_compression() const;
  void clear_compression();
  static const int kCompressionFieldNumber = 5;
  const ::std::string& compression() const;
  void set_compression(const ::std::string& value);
  void set_compression(const char* value);
  void set_compression(const char* value, size_t size);
  ::std::string* mutable_compression();
  ::std::string* release_compression();
  void set_allocated_compression(::std::string* compression);

  // optional double hz = 6;
  bool has_hz() const;
  void clear_hz();
  static const int kHzFieldNumber = 6;
  double hz() const;
  void set_hz(double value);

  // @@protoc_insertion_point(class_scope:ignition.msgs.WebRequest)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_operation();
  inline void clear_has_operation();
  inline void set_has_topic();
  inline void clear_has_topic();
  inline void set_has_msg_type();
  inline void clear_has_msg_type();
  inline void set_has_compression();
  inline void clear_has_compression();
  inline void set_has_hz();
  inline void clear_has_hz();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ignition::msgs::Header* header_;
  ::google::protobuf::internal::ArenaStringPtr operation_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::internal::ArenaStringPtr msg_type_;
  ::google::protobuf::internal::ArenaStringPtr compression_;
  double hz_;
  friend void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fweb_5frequest_2eproto();
  friend void protobuf_AssignDesc_ignition_2fmsgs_2fweb_5frequest_2eproto();
  friend void protobuf_ShutdownFile_ignition_2fmsgs_2fweb_5frequest_2eproto();

  void InitAsDefaultInstance();
  static WebRequest* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// WebRequest

// optional .ignition.msgs.Header header = 1;
inline bool WebRequest::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WebRequest::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WebRequest::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WebRequest::clear_header() {
  if (header_ != NULL) header_->::ignition::msgs::Header::Clear();
  clear_has_header();
}
inline const ::ignition::msgs::Header& WebRequest::header() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.WebRequest.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ignition::msgs::Header* WebRequest::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::ignition::msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.WebRequest.header)
  return header_;
}
inline ::ignition::msgs::Header* WebRequest::release_header() {
  // @@protoc_insertion_point(field_release:ignition.msgs.WebRequest.header)
  clear_has_header();
  ::ignition::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void WebRequest::set_allocated_header(::ignition::msgs::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.WebRequest.header)
}

// optional string operation = 2;
inline bool WebRequest::has_operation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WebRequest::set_has_operation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WebRequest::clear_has_operation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WebRequest::clear_operation() {
  operation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_operation();
}
inline const ::std::string& WebRequest::operation() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.WebRequest.operation)
  return operation_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WebRequest::set_operation(const ::std::string& value) {
  set_has_operation();
  operation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.WebRequest.operation)
}
inline void WebRequest::set_operation(const char* value) {
  set_has_operation();
  operation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.WebRequest.operation)
}
inline void WebRequest::set_operation(const char* value, size_t size) {
  set_has_operation();
  operation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.WebRequest.operation)
}
inline ::std::string* WebRequest::mutable_operation() {
  set_has_operation();
  // @@protoc_insertion_point(field_mutable:ignition.msgs.WebRequest.operation)
  return operation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WebRequest::release_operation() {
  // @@protoc_insertion_point(field_release:ignition.msgs.WebRequest.operation)
  clear_has_operation();
  return operation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WebRequest::set_allocated_operation(::std::string* operation) {
  if (operation != NULL) {
    set_has_operation();
  } else {
    clear_has_operation();
  }
  operation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operation);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.WebRequest.operation)
}

// optional string topic = 3;
inline bool WebRequest::has_topic() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WebRequest::set_has_topic() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WebRequest::clear_has_topic() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WebRequest::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_topic();
}
inline const ::std::string& WebRequest::topic() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.WebRequest.topic)
  return topic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WebRequest::set_topic(const ::std::string& value) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.WebRequest.topic)
}
inline void WebRequest::set_topic(const char* value) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.WebRequest.topic)
}
inline void WebRequest::set_topic(const char* value, size_t size) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.WebRequest.topic)
}
inline ::std::string* WebRequest::mutable_topic() {
  set_has_topic();
  // @@protoc_insertion_point(field_mutable:ignition.msgs.WebRequest.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WebRequest::release_topic() {
  // @@protoc_insertion_point(field_release:ignition.msgs.WebRequest.topic)
  clear_has_topic();
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WebRequest::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    set_has_topic();
  } else {
    clear_has_topic();
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.WebRequest.topic)
}

// optional string msg_type = 4;
inline bool WebRequest::has_msg_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WebRequest::set_has_msg_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WebRequest::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WebRequest::clear_msg_type() {
  msg_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg_type();
}
inline const ::std::string& WebRequest::msg_type() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.WebRequest.msg_type)
  return msg_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WebRequest::set_msg_type(const ::std::string& value) {
  set_has_msg_type();
  msg_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.WebRequest.msg_type)
}
inline void WebRequest::set_msg_type(const char* value) {
  set_has_msg_type();
  msg_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.WebRequest.msg_type)
}
inline void WebRequest::set_msg_type(const char* value, size_t size) {
  set_has_msg_type();
  msg_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.WebRequest.msg_type)
}
inline ::std::string* WebRequest::mutable_msg_type() {
  set_has_msg_type();
  // @@protoc_insertion_point(field_mutable:ignition.msgs.WebRequest.msg_type)
  return msg_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WebRequest::release_msg_type() {
  // @@protoc_insertion_point(field_release:ignition.msgs.WebRequest.msg_type)
  clear_has_msg_type();
  return msg_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WebRequest::set_allocated_msg_type(::std::string* msg_type) {
  if (msg_type != NULL) {
    set_has_msg_type();
  } else {
    clear_has_msg_type();
  }
  msg_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_type);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.WebRequest.msg_type)
}

// optional string compression = 5;
inline bool WebRequest::has_compression() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WebRequest::set_has_compression() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WebRequest::clear_has_compression() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WebRequest::clear_compression() {
  compression_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_compression();
}
inline const ::std::string& WebRequest::compression() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.WebRequest.compression)
  return compression_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WebRequest::set_compression(const ::std::string& value) {
  set_has_compression();
  compression_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.WebRequest.compression)
}
inline void WebRequest::set_compression(const char* value) {
  set_has_compression();
  compression_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.WebRequest.compression)
}
inline void WebRequest::set_compression(const char* value, size_t size) {
  set_has_compression();
  compression_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.WebRequest.compression)
}
inline ::std::string* WebRequest::mutable_compression() {
  set_has_compression();
  // @@protoc_insertion_point(field_mutable:ignition.msgs.WebRequest.compression)
  return compression_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WebRequest::release_compression() {
  // @@protoc_insertion_point(field_release:ignition.msgs.WebRequest.compression)
  clear_has_compression();
  return compression_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WebRequest::set_allocated_compression(::std::string* compression) {
  if (compression != NULL) {
    set_has_compression();
  } else {
    clear_has_compression();
  }
  compression_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), compression);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.WebRequest.compression)
}

// optional double hz = 6;
inline bool WebRequest::has_hz() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WebRequest::set_has_hz() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WebRequest::clear_has_hz() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WebRequest::clear_hz() {
  hz_ = 0;
  clear_has_hz();
}
inline double WebRequest::hz() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.WebRequest.hz)
  return hz_;
}
inline void WebRequest::set_hz(double value) {
  set_has_hz();
  hz_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.WebRequest.hz)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef std::unique_ptr<WebRequest> WebRequestUniquePtr;
typedef std::unique_ptr<const WebRequest> ConstWebRequestUniquePtr;
typedef std::shared_ptr<WebRequest> WebRequestSharedPtr;
typedef std::shared_ptr<const WebRequest> ConstWebRequestSharedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

#ifdef _MSC_VER
#pragma warning(pop)
#endif
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ignition_2fmsgs_2fweb_5frequest_2eproto__INCLUDED
