// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ignition/msgs/heightmapgeom.proto

#ifndef PROTOBUF_ignition_2fmsgs_2fheightmapgeom_2eproto__INCLUDED
#define PROTOBUF_ignition_2fmsgs_2fheightmapgeom_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/image.pb.h"
#include "ignition/msgs/vector3d.pb.h"
#include "ignition/msgs/header.pb.h"
#ifndef _MSC_VER
#pragma GCC system_header
#else
#pragma warning(push)
#pragma warning(disable: 4244 4267 4100 4244 4512 4127 4068 4275 4251)
#endif
#include <memory>
#include <ignition/msgs/Export.hh>
// @@protoc_insertion_point(includes)

namespace ignition {
namespace msgs {

// Internal implementation detail -- do not call these.
void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fheightmapgeom_2eproto();
void protobuf_AssignDesc_ignition_2fmsgs_2fheightmapgeom_2eproto();
void protobuf_ShutdownFile_ignition_2fmsgs_2fheightmapgeom_2eproto();

class HeightmapGeom;
class HeightmapGeom_Blend;
class HeightmapGeom_Texture;

// ===================================================================

class IGNITION_MSGS_VISIBLE HeightmapGeom_Texture : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.HeightmapGeom.Texture) */ {
 public:
  HeightmapGeom_Texture();
  virtual ~HeightmapGeom_Texture();

  HeightmapGeom_Texture(const HeightmapGeom_Texture& from);

  inline HeightmapGeom_Texture& operator=(const HeightmapGeom_Texture& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeightmapGeom_Texture& default_instance();

  void Swap(HeightmapGeom_Texture* other);

  // implements Message ----------------------------------------------

  inline HeightmapGeom_Texture* New() const { return New(NULL); }

  HeightmapGeom_Texture* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeightmapGeom_Texture& from);
  void MergeFrom(const HeightmapGeom_Texture& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeightmapGeom_Texture* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string diffuse = 1;
  bool has_diffuse() const;
  void clear_diffuse();
  static const int kDiffuseFieldNumber = 1;
  const ::std::string& diffuse() const;
  void set_diffuse(const ::std::string& value);
  void set_diffuse(const char* value);
  void set_diffuse(const char* value, size_t size);
  ::std::string* mutable_diffuse();
  ::std::string* release_diffuse();
  void set_allocated_diffuse(::std::string* diffuse);

  // optional string normal = 2;
  bool has_normal() const;
  void clear_normal();
  static const int kNormalFieldNumber = 2;
  const ::std::string& normal() const;
  void set_normal(const ::std::string& value);
  void set_normal(const char* value);
  void set_normal(const char* value, size_t size);
  ::std::string* mutable_normal();
  ::std::string* release_normal();
  void set_allocated_normal(::std::string* normal);

  // optional double size = 3;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 3;
  double size() const;
  void set_size(double value);

  // @@protoc_insertion_point(class_scope:ignition.msgs.HeightmapGeom.Texture)
 private:
  inline void set_has_diffuse();
  inline void clear_has_diffuse();
  inline void set_has_normal();
  inline void clear_has_normal();
  inline void set_has_size();
  inline void clear_has_size();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr diffuse_;
  ::google::protobuf::internal::ArenaStringPtr normal_;
  double size_;
  friend void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fheightmapgeom_2eproto();
  friend void protobuf_AssignDesc_ignition_2fmsgs_2fheightmapgeom_2eproto();
  friend void protobuf_ShutdownFile_ignition_2fmsgs_2fheightmapgeom_2eproto();

  void InitAsDefaultInstance();
  static HeightmapGeom_Texture* default_instance_;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE HeightmapGeom_Blend : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.HeightmapGeom.Blend) */ {
 public:
  HeightmapGeom_Blend();
  virtual ~HeightmapGeom_Blend();

  HeightmapGeom_Blend(const HeightmapGeom_Blend& from);

  inline HeightmapGeom_Blend& operator=(const HeightmapGeom_Blend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeightmapGeom_Blend& default_instance();

  void Swap(HeightmapGeom_Blend* other);

  // implements Message ----------------------------------------------

  inline HeightmapGeom_Blend* New() const { return New(NULL); }

  HeightmapGeom_Blend* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeightmapGeom_Blend& from);
  void MergeFrom(const HeightmapGeom_Blend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeightmapGeom_Blend* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double min_height = 1;
  bool has_min_height() const;
  void clear_min_height();
  static const int kMinHeightFieldNumber = 1;
  double min_height() const;
  void set_min_height(double value);

  // optional double fade_dist = 2;
  bool has_fade_dist() const;
  void clear_fade_dist();
  static const int kFadeDistFieldNumber = 2;
  double fade_dist() const;
  void set_fade_dist(double value);

  // @@protoc_insertion_point(class_scope:ignition.msgs.HeightmapGeom.Blend)
 private:
  inline void set_has_min_height();
  inline void clear_has_min_height();
  inline void set_has_fade_dist();
  inline void clear_has_fade_dist();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double min_height_;
  double fade_dist_;
  friend void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fheightmapgeom_2eproto();
  friend void protobuf_AssignDesc_ignition_2fmsgs_2fheightmapgeom_2eproto();
  friend void protobuf_ShutdownFile_ignition_2fmsgs_2fheightmapgeom_2eproto();

  void InitAsDefaultInstance();
  static HeightmapGeom_Blend* default_instance_;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE HeightmapGeom : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.HeightmapGeom) */ {
 public:
  HeightmapGeom();
  virtual ~HeightmapGeom();

  HeightmapGeom(const HeightmapGeom& from);

  inline HeightmapGeom& operator=(const HeightmapGeom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeightmapGeom& default_instance();

  void Swap(HeightmapGeom* other);

  // implements Message ----------------------------------------------

  inline HeightmapGeom* New() const { return New(NULL); }

  HeightmapGeom* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeightmapGeom& from);
  void MergeFrom(const HeightmapGeom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeightmapGeom* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef HeightmapGeom_Texture Texture;
  typedef HeightmapGeom_Blend Blend;

  // accessors -------------------------------------------------------

  // optional .ignition.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::ignition::msgs::Header& header() const;
  ::ignition::msgs::Header* mutable_header();
  ::ignition::msgs::Header* release_header();
  void set_allocated_header(::ignition::msgs::Header* header);

  // optional .ignition.msgs.Image image = 2;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 2;
  const ::ignition::msgs::Image& image() const;
  ::ignition::msgs::Image* mutable_image();
  ::ignition::msgs::Image* release_image();
  void set_allocated_image(::ignition::msgs::Image* image);

  // optional .ignition.msgs.Vector3d size = 3;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 3;
  const ::ignition::msgs::Vector3d& size() const;
  ::ignition::msgs::Vector3d* mutable_size();
  ::ignition::msgs::Vector3d* release_size();
  void set_allocated_size(::ignition::msgs::Vector3d* size);

  // optional .ignition.msgs.Vector3d origin = 4;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 4;
  const ::ignition::msgs::Vector3d& origin() const;
  ::ignition::msgs::Vector3d* mutable_origin();
  ::ignition::msgs::Vector3d* release_origin();
  void set_allocated_origin(::ignition::msgs::Vector3d* origin);

  // repeated float heights = 5;
  int heights_size() const;
  void clear_heights();
  static const int kHeightsFieldNumber = 5;
  float heights(int index) const;
  void set_heights(int index, float value);
  void add_heights(float value);
  const ::google::protobuf::RepeatedField< float >&
      heights() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_heights();

  // optional int32 width = 6;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 6;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 height = 7;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 7;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // repeated .ignition.msgs.HeightmapGeom.Texture texture = 8;
  int texture_size() const;
  void clear_texture();
  static const int kTextureFieldNumber = 8;
  const ::ignition::msgs::HeightmapGeom_Texture& texture(int index) const;
  ::ignition::msgs::HeightmapGeom_Texture* mutable_texture(int index);
  ::ignition::msgs::HeightmapGeom_Texture* add_texture();
  ::google::protobuf::RepeatedPtrField< ::ignition::msgs::HeightmapGeom_Texture >*
      mutable_texture();
  const ::google::protobuf::RepeatedPtrField< ::ignition::msgs::HeightmapGeom_Texture >&
      texture() const;

  // repeated .ignition.msgs.HeightmapGeom.Blend blend = 9;
  int blend_size() const;
  void clear_blend();
  static const int kBlendFieldNumber = 9;
  const ::ignition::msgs::HeightmapGeom_Blend& blend(int index) const;
  ::ignition::msgs::HeightmapGeom_Blend* mutable_blend(int index);
  ::ignition::msgs::HeightmapGeom_Blend* add_blend();
  ::google::protobuf::RepeatedPtrField< ::ignition::msgs::HeightmapGeom_Blend >*
      mutable_blend();
  const ::google::protobuf::RepeatedPtrField< ::ignition::msgs::HeightmapGeom_Blend >&
      blend() const;

  // optional bool use_terrain_paging = 10;
  bool has_use_terrain_paging() const;
  void clear_use_terrain_paging();
  static const int kUseTerrainPagingFieldNumber = 10;
  bool use_terrain_paging() const;
  void set_use_terrain_paging(bool value);

  // optional string filename = 11;
  bool has_filename() const;
  void clear_filename();
  static const int kFilenameFieldNumber = 11;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // optional uint32 sampling = 12;
  bool has_sampling() const;
  void clear_sampling();
  static const int kSamplingFieldNumber = 12;
  ::google::protobuf::uint32 sampling() const;
  void set_sampling(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ignition.msgs.HeightmapGeom)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_image();
  inline void clear_has_image();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_use_terrain_paging();
  inline void clear_has_use_terrain_paging();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_sampling();
  inline void clear_has_sampling();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ignition::msgs::Header* header_;
  ::ignition::msgs::Image* image_;
  ::ignition::msgs::Vector3d* size_;
  ::ignition::msgs::Vector3d* origin_;
  ::google::protobuf::RepeatedField< float > heights_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::RepeatedPtrField< ::ignition::msgs::HeightmapGeom_Texture > texture_;
  ::google::protobuf::RepeatedPtrField< ::ignition::msgs::HeightmapGeom_Blend > blend_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  bool use_terrain_paging_;
  ::google::protobuf::uint32 sampling_;
  friend void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fheightmapgeom_2eproto();
  friend void protobuf_AssignDesc_ignition_2fmsgs_2fheightmapgeom_2eproto();
  friend void protobuf_ShutdownFile_ignition_2fmsgs_2fheightmapgeom_2eproto();

  void InitAsDefaultInstance();
  static HeightmapGeom* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// HeightmapGeom_Texture

// optional string diffuse = 1;
inline bool HeightmapGeom_Texture::has_diffuse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeightmapGeom_Texture::set_has_diffuse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeightmapGeom_Texture::clear_has_diffuse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeightmapGeom_Texture::clear_diffuse() {
  diffuse_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_diffuse();
}
inline const ::std::string& HeightmapGeom_Texture::diffuse() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.HeightmapGeom.Texture.diffuse)
  return diffuse_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeightmapGeom_Texture::set_diffuse(const ::std::string& value) {
  set_has_diffuse();
  diffuse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.HeightmapGeom.Texture.diffuse)
}
inline void HeightmapGeom_Texture::set_diffuse(const char* value) {
  set_has_diffuse();
  diffuse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.HeightmapGeom.Texture.diffuse)
}
inline void HeightmapGeom_Texture::set_diffuse(const char* value, size_t size) {
  set_has_diffuse();
  diffuse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.HeightmapGeom.Texture.diffuse)
}
inline ::std::string* HeightmapGeom_Texture::mutable_diffuse() {
  set_has_diffuse();
  // @@protoc_insertion_point(field_mutable:ignition.msgs.HeightmapGeom.Texture.diffuse)
  return diffuse_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeightmapGeom_Texture::release_diffuse() {
  // @@protoc_insertion_point(field_release:ignition.msgs.HeightmapGeom.Texture.diffuse)
  clear_has_diffuse();
  return diffuse_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeightmapGeom_Texture::set_allocated_diffuse(::std::string* diffuse) {
  if (diffuse != NULL) {
    set_has_diffuse();
  } else {
    clear_has_diffuse();
  }
  diffuse_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diffuse);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.HeightmapGeom.Texture.diffuse)
}

// optional string normal = 2;
inline bool HeightmapGeom_Texture::has_normal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeightmapGeom_Texture::set_has_normal() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeightmapGeom_Texture::clear_has_normal() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeightmapGeom_Texture::clear_normal() {
  normal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_normal();
}
inline const ::std::string& HeightmapGeom_Texture::normal() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.HeightmapGeom.Texture.normal)
  return normal_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeightmapGeom_Texture::set_normal(const ::std::string& value) {
  set_has_normal();
  normal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.HeightmapGeom.Texture.normal)
}
inline void HeightmapGeom_Texture::set_normal(const char* value) {
  set_has_normal();
  normal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.HeightmapGeom.Texture.normal)
}
inline void HeightmapGeom_Texture::set_normal(const char* value, size_t size) {
  set_has_normal();
  normal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.HeightmapGeom.Texture.normal)
}
inline ::std::string* HeightmapGeom_Texture::mutable_normal() {
  set_has_normal();
  // @@protoc_insertion_point(field_mutable:ignition.msgs.HeightmapGeom.Texture.normal)
  return normal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeightmapGeom_Texture::release_normal() {
  // @@protoc_insertion_point(field_release:ignition.msgs.HeightmapGeom.Texture.normal)
  clear_has_normal();
  return normal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeightmapGeom_Texture::set_allocated_normal(::std::string* normal) {
  if (normal != NULL) {
    set_has_normal();
  } else {
    clear_has_normal();
  }
  normal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), normal);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.HeightmapGeom.Texture.normal)
}

// optional double size = 3;
inline bool HeightmapGeom_Texture::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeightmapGeom_Texture::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeightmapGeom_Texture::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeightmapGeom_Texture::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline double HeightmapGeom_Texture::size() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.HeightmapGeom.Texture.size)
  return size_;
}
inline void HeightmapGeom_Texture::set_size(double value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.HeightmapGeom.Texture.size)
}

// -------------------------------------------------------------------

// HeightmapGeom_Blend

// optional double min_height = 1;
inline bool HeightmapGeom_Blend::has_min_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeightmapGeom_Blend::set_has_min_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeightmapGeom_Blend::clear_has_min_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeightmapGeom_Blend::clear_min_height() {
  min_height_ = 0;
  clear_has_min_height();
}
inline double HeightmapGeom_Blend::min_height() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.HeightmapGeom.Blend.min_height)
  return min_height_;
}
inline void HeightmapGeom_Blend::set_min_height(double value) {
  set_has_min_height();
  min_height_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.HeightmapGeom.Blend.min_height)
}

// optional double fade_dist = 2;
inline bool HeightmapGeom_Blend::has_fade_dist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeightmapGeom_Blend::set_has_fade_dist() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeightmapGeom_Blend::clear_has_fade_dist() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeightmapGeom_Blend::clear_fade_dist() {
  fade_dist_ = 0;
  clear_has_fade_dist();
}
inline double HeightmapGeom_Blend::fade_dist() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.HeightmapGeom.Blend.fade_dist)
  return fade_dist_;
}
inline void HeightmapGeom_Blend::set_fade_dist(double value) {
  set_has_fade_dist();
  fade_dist_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.HeightmapGeom.Blend.fade_dist)
}

// -------------------------------------------------------------------

// HeightmapGeom

// optional .ignition.msgs.Header header = 1;
inline bool HeightmapGeom::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeightmapGeom::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeightmapGeom::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeightmapGeom::clear_header() {
  if (header_ != NULL) header_->::ignition::msgs::Header::Clear();
  clear_has_header();
}
inline const ::ignition::msgs::Header& HeightmapGeom::header() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.HeightmapGeom.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ignition::msgs::Header* HeightmapGeom::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::ignition::msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.HeightmapGeom.header)
  return header_;
}
inline ::ignition::msgs::Header* HeightmapGeom::release_header() {
  // @@protoc_insertion_point(field_release:ignition.msgs.HeightmapGeom.header)
  clear_has_header();
  ::ignition::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void HeightmapGeom::set_allocated_header(::ignition::msgs::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.HeightmapGeom.header)
}

// optional .ignition.msgs.Image image = 2;
inline bool HeightmapGeom::has_image() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeightmapGeom::set_has_image() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeightmapGeom::clear_has_image() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeightmapGeom::clear_image() {
  if (image_ != NULL) image_->::ignition::msgs::Image::Clear();
  clear_has_image();
}
inline const ::ignition::msgs::Image& HeightmapGeom::image() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.HeightmapGeom.image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
inline ::ignition::msgs::Image* HeightmapGeom::mutable_image() {
  set_has_image();
  if (image_ == NULL) {
    image_ = new ::ignition::msgs::Image;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.HeightmapGeom.image)
  return image_;
}
inline ::ignition::msgs::Image* HeightmapGeom::release_image() {
  // @@protoc_insertion_point(field_release:ignition.msgs.HeightmapGeom.image)
  clear_has_image();
  ::ignition::msgs::Image* temp = image_;
  image_ = NULL;
  return temp;
}
inline void HeightmapGeom::set_allocated_image(::ignition::msgs::Image* image) {
  delete image_;
  image_ = image;
  if (image) {
    set_has_image();
  } else {
    clear_has_image();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.HeightmapGeom.image)
}

// optional .ignition.msgs.Vector3d size = 3;
inline bool HeightmapGeom::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeightmapGeom::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeightmapGeom::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeightmapGeom::clear_size() {
  if (size_ != NULL) size_->::ignition::msgs::Vector3d::Clear();
  clear_has_size();
}
inline const ::ignition::msgs::Vector3d& HeightmapGeom::size() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.HeightmapGeom.size)
  return size_ != NULL ? *size_ : *default_instance_->size_;
}
inline ::ignition::msgs::Vector3d* HeightmapGeom::mutable_size() {
  set_has_size();
  if (size_ == NULL) {
    size_ = new ::ignition::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.HeightmapGeom.size)
  return size_;
}
inline ::ignition::msgs::Vector3d* HeightmapGeom::release_size() {
  // @@protoc_insertion_point(field_release:ignition.msgs.HeightmapGeom.size)
  clear_has_size();
  ::ignition::msgs::Vector3d* temp = size_;
  size_ = NULL;
  return temp;
}
inline void HeightmapGeom::set_allocated_size(::ignition::msgs::Vector3d* size) {
  delete size_;
  size_ = size;
  if (size) {
    set_has_size();
  } else {
    clear_has_size();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.HeightmapGeom.size)
}

// optional .ignition.msgs.Vector3d origin = 4;
inline bool HeightmapGeom::has_origin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HeightmapGeom::set_has_origin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HeightmapGeom::clear_has_origin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HeightmapGeom::clear_origin() {
  if (origin_ != NULL) origin_->::ignition::msgs::Vector3d::Clear();
  clear_has_origin();
}
inline const ::ignition::msgs::Vector3d& HeightmapGeom::origin() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.HeightmapGeom.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::ignition::msgs::Vector3d* HeightmapGeom::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::ignition::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.HeightmapGeom.origin)
  return origin_;
}
inline ::ignition::msgs::Vector3d* HeightmapGeom::release_origin() {
  // @@protoc_insertion_point(field_release:ignition.msgs.HeightmapGeom.origin)
  clear_has_origin();
  ::ignition::msgs::Vector3d* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void HeightmapGeom::set_allocated_origin(::ignition::msgs::Vector3d* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.HeightmapGeom.origin)
}

// repeated float heights = 5;
inline int HeightmapGeom::heights_size() const {
  return heights_.size();
}
inline void HeightmapGeom::clear_heights() {
  heights_.Clear();
}
inline float HeightmapGeom::heights(int index) const {
  // @@protoc_insertion_point(field_get:ignition.msgs.HeightmapGeom.heights)
  return heights_.Get(index);
}
inline void HeightmapGeom::set_heights(int index, float value) {
  heights_.Set(index, value);
  // @@protoc_insertion_point(field_set:ignition.msgs.HeightmapGeom.heights)
}
inline void HeightmapGeom::add_heights(float value) {
  heights_.Add(value);
  // @@protoc_insertion_point(field_add:ignition.msgs.HeightmapGeom.heights)
}
inline const ::google::protobuf::RepeatedField< float >&
HeightmapGeom::heights() const {
  // @@protoc_insertion_point(field_list:ignition.msgs.HeightmapGeom.heights)
  return heights_;
}
inline ::google::protobuf::RepeatedField< float >*
HeightmapGeom::mutable_heights() {
  // @@protoc_insertion_point(field_mutable_list:ignition.msgs.HeightmapGeom.heights)
  return &heights_;
}

// optional int32 width = 6;
inline bool HeightmapGeom::has_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HeightmapGeom::set_has_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HeightmapGeom::clear_has_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HeightmapGeom::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 HeightmapGeom::width() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.HeightmapGeom.width)
  return width_;
}
inline void HeightmapGeom::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.HeightmapGeom.width)
}

// optional int32 height = 7;
inline bool HeightmapGeom::has_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HeightmapGeom::set_has_height() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HeightmapGeom::clear_has_height() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HeightmapGeom::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 HeightmapGeom::height() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.HeightmapGeom.height)
  return height_;
}
inline void HeightmapGeom::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.HeightmapGeom.height)
}

// repeated .ignition.msgs.HeightmapGeom.Texture texture = 8;
inline int HeightmapGeom::texture_size() const {
  return texture_.size();
}
inline void HeightmapGeom::clear_texture() {
  texture_.Clear();
}
inline const ::ignition::msgs::HeightmapGeom_Texture& HeightmapGeom::texture(int index) const {
  // @@protoc_insertion_point(field_get:ignition.msgs.HeightmapGeom.texture)
  return texture_.Get(index);
}
inline ::ignition::msgs::HeightmapGeom_Texture* HeightmapGeom::mutable_texture(int index) {
  // @@protoc_insertion_point(field_mutable:ignition.msgs.HeightmapGeom.texture)
  return texture_.Mutable(index);
}
inline ::ignition::msgs::HeightmapGeom_Texture* HeightmapGeom::add_texture() {
  // @@protoc_insertion_point(field_add:ignition.msgs.HeightmapGeom.texture)
  return texture_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ignition::msgs::HeightmapGeom_Texture >*
HeightmapGeom::mutable_texture() {
  // @@protoc_insertion_point(field_mutable_list:ignition.msgs.HeightmapGeom.texture)
  return &texture_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ignition::msgs::HeightmapGeom_Texture >&
HeightmapGeom::texture() const {
  // @@protoc_insertion_point(field_list:ignition.msgs.HeightmapGeom.texture)
  return texture_;
}

// repeated .ignition.msgs.HeightmapGeom.Blend blend = 9;
inline int HeightmapGeom::blend_size() const {
  return blend_.size();
}
inline void HeightmapGeom::clear_blend() {
  blend_.Clear();
}
inline const ::ignition::msgs::HeightmapGeom_Blend& HeightmapGeom::blend(int index) const {
  // @@protoc_insertion_point(field_get:ignition.msgs.HeightmapGeom.blend)
  return blend_.Get(index);
}
inline ::ignition::msgs::HeightmapGeom_Blend* HeightmapGeom::mutable_blend(int index) {
  // @@protoc_insertion_point(field_mutable:ignition.msgs.HeightmapGeom.blend)
  return blend_.Mutable(index);
}
inline ::ignition::msgs::HeightmapGeom_Blend* HeightmapGeom::add_blend() {
  // @@protoc_insertion_point(field_add:ignition.msgs.HeightmapGeom.blend)
  return blend_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ignition::msgs::HeightmapGeom_Blend >*
HeightmapGeom::mutable_blend() {
  // @@protoc_insertion_point(field_mutable_list:ignition.msgs.HeightmapGeom.blend)
  return &blend_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ignition::msgs::HeightmapGeom_Blend >&
HeightmapGeom::blend() const {
  // @@protoc_insertion_point(field_list:ignition.msgs.HeightmapGeom.blend)
  return blend_;
}

// optional bool use_terrain_paging = 10;
inline bool HeightmapGeom::has_use_terrain_paging() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void HeightmapGeom::set_has_use_terrain_paging() {
  _has_bits_[0] |= 0x00000200u;
}
inline void HeightmapGeom::clear_has_use_terrain_paging() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void HeightmapGeom::clear_use_terrain_paging() {
  use_terrain_paging_ = false;
  clear_has_use_terrain_paging();
}
inline bool HeightmapGeom::use_terrain_paging() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.HeightmapGeom.use_terrain_paging)
  return use_terrain_paging_;
}
inline void HeightmapGeom::set_use_terrain_paging(bool value) {
  set_has_use_terrain_paging();
  use_terrain_paging_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.HeightmapGeom.use_terrain_paging)
}

// optional string filename = 11;
inline bool HeightmapGeom::has_filename() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void HeightmapGeom::set_has_filename() {
  _has_bits_[0] |= 0x00000400u;
}
inline void HeightmapGeom::clear_has_filename() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void HeightmapGeom::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
inline const ::std::string& HeightmapGeom::filename() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.HeightmapGeom.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeightmapGeom::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.HeightmapGeom.filename)
}
inline void HeightmapGeom::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.HeightmapGeom.filename)
}
inline void HeightmapGeom::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.HeightmapGeom.filename)
}
inline ::std::string* HeightmapGeom::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:ignition.msgs.HeightmapGeom.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeightmapGeom::release_filename() {
  // @@protoc_insertion_point(field_release:ignition.msgs.HeightmapGeom.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeightmapGeom::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.HeightmapGeom.filename)
}

// optional uint32 sampling = 12;
inline bool HeightmapGeom::has_sampling() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void HeightmapGeom::set_has_sampling() {
  _has_bits_[0] |= 0x00000800u;
}
inline void HeightmapGeom::clear_has_sampling() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void HeightmapGeom::clear_sampling() {
  sampling_ = 0u;
  clear_has_sampling();
}
inline ::google::protobuf::uint32 HeightmapGeom::sampling() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.HeightmapGeom.sampling)
  return sampling_;
}
inline void HeightmapGeom::set_sampling(::google::protobuf::uint32 value) {
  set_has_sampling();
  sampling_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.HeightmapGeom.sampling)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


typedef std::unique_ptr<HeightmapGeom> HeightmapGeomUniquePtr;
typedef std::unique_ptr<const HeightmapGeom> ConstHeightmapGeomUniquePtr;
typedef std::shared_ptr<HeightmapGeom> HeightmapGeomSharedPtr;
typedef std::shared_ptr<const HeightmapGeom> ConstHeightmapGeomSharedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

#ifdef _MSC_VER
#pragma warning(pop)
#endif
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ignition_2fmsgs_2fheightmapgeom_2eproto__INCLUDED
