// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ignition/msgs/gps_sensor.proto

#ifndef PROTOBUF_ignition_2fmsgs_2fgps_5fsensor_2eproto__INCLUDED
#define PROTOBUF_ignition_2fmsgs_2fgps_5fsensor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/sensor_noise.pb.h"
#include "ignition/msgs/header.pb.h"
#ifndef _MSC_VER
#pragma GCC system_header
#else
#pragma warning(push)
#pragma warning(disable: 4244 4267 4100 4244 4512 4127 4068 4275 4251)
#endif
#include <memory>
#include <ignition/msgs/Export.hh>
// @@protoc_insertion_point(includes)

namespace ignition {
namespace msgs {

// Internal implementation detail -- do not call these.
void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fgps_5fsensor_2eproto();
void protobuf_AssignDesc_ignition_2fmsgs_2fgps_5fsensor_2eproto();
void protobuf_ShutdownFile_ignition_2fmsgs_2fgps_5fsensor_2eproto();

class GPSSensor;
class GPSSensor_Sensing;

// ===================================================================

class IGNITION_MSGS_VISIBLE GPSSensor_Sensing : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.GPSSensor.Sensing) */ {
 public:
  GPSSensor_Sensing();
  virtual ~GPSSensor_Sensing();

  GPSSensor_Sensing(const GPSSensor_Sensing& from);

  inline GPSSensor_Sensing& operator=(const GPSSensor_Sensing& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GPSSensor_Sensing& default_instance();

  void Swap(GPSSensor_Sensing* other);

  // implements Message ----------------------------------------------

  inline GPSSensor_Sensing* New() const { return New(NULL); }

  GPSSensor_Sensing* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GPSSensor_Sensing& from);
  void MergeFrom(const GPSSensor_Sensing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GPSSensor_Sensing* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ignition.msgs.SensorNoise horizontal_noise = 1;
  bool has_horizontal_noise() const;
  void clear_horizontal_noise();
  static const int kHorizontalNoiseFieldNumber = 1;
  const ::ignition::msgs::SensorNoise& horizontal_noise() const;
  ::ignition::msgs::SensorNoise* mutable_horizontal_noise();
  ::ignition::msgs::SensorNoise* release_horizontal_noise();
  void set_allocated_horizontal_noise(::ignition::msgs::SensorNoise* horizontal_noise);

  // optional .ignition.msgs.SensorNoise vertical_noise = 2;
  bool has_vertical_noise() const;
  void clear_vertical_noise();
  static const int kVerticalNoiseFieldNumber = 2;
  const ::ignition::msgs::SensorNoise& vertical_noise() const;
  ::ignition::msgs::SensorNoise* mutable_vertical_noise();
  ::ignition::msgs::SensorNoise* release_vertical_noise();
  void set_allocated_vertical_noise(::ignition::msgs::SensorNoise* vertical_noise);

  // @@protoc_insertion_point(class_scope:ignition.msgs.GPSSensor.Sensing)
 private:
  inline void set_has_horizontal_noise();
  inline void clear_has_horizontal_noise();
  inline void set_has_vertical_noise();
  inline void clear_has_vertical_noise();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ignition::msgs::SensorNoise* horizontal_noise_;
  ::ignition::msgs::SensorNoise* vertical_noise_;
  friend void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fgps_5fsensor_2eproto();
  friend void protobuf_AssignDesc_ignition_2fmsgs_2fgps_5fsensor_2eproto();
  friend void protobuf_ShutdownFile_ignition_2fmsgs_2fgps_5fsensor_2eproto();

  void InitAsDefaultInstance();
  static GPSSensor_Sensing* default_instance_;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE GPSSensor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.GPSSensor) */ {
 public:
  GPSSensor();
  virtual ~GPSSensor();

  GPSSensor(const GPSSensor& from);

  inline GPSSensor& operator=(const GPSSensor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GPSSensor& default_instance();

  void Swap(GPSSensor* other);

  // implements Message ----------------------------------------------

  inline GPSSensor* New() const { return New(NULL); }

  GPSSensor* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GPSSensor& from);
  void MergeFrom(const GPSSensor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GPSSensor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GPSSensor_Sensing Sensing;

  // accessors -------------------------------------------------------

  // optional .ignition.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::ignition::msgs::Header& header() const;
  ::ignition::msgs::Header* mutable_header();
  ::ignition::msgs::Header* release_header();
  void set_allocated_header(::ignition::msgs::Header* header);

  // optional .ignition.msgs.GPSSensor.Sensing position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  const ::ignition::msgs::GPSSensor_Sensing& position() const;
  ::ignition::msgs::GPSSensor_Sensing* mutable_position();
  ::ignition::msgs::GPSSensor_Sensing* release_position();
  void set_allocated_position(::ignition::msgs::GPSSensor_Sensing* position);

  // optional .ignition.msgs.GPSSensor.Sensing velocity = 3;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 3;
  const ::ignition::msgs::GPSSensor_Sensing& velocity() const;
  ::ignition::msgs::GPSSensor_Sensing* mutable_velocity();
  ::ignition::msgs::GPSSensor_Sensing* release_velocity();
  void set_allocated_velocity(::ignition::msgs::GPSSensor_Sensing* velocity);

  // @@protoc_insertion_point(class_scope:ignition.msgs.GPSSensor)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_velocity();
  inline void clear_has_velocity();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ignition::msgs::Header* header_;
  ::ignition::msgs::GPSSensor_Sensing* position_;
  ::ignition::msgs::GPSSensor_Sensing* velocity_;
  friend void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fgps_5fsensor_2eproto();
  friend void protobuf_AssignDesc_ignition_2fmsgs_2fgps_5fsensor_2eproto();
  friend void protobuf_ShutdownFile_ignition_2fmsgs_2fgps_5fsensor_2eproto();

  void InitAsDefaultInstance();
  static GPSSensor* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GPSSensor_Sensing

// optional .ignition.msgs.SensorNoise horizontal_noise = 1;
inline bool GPSSensor_Sensing::has_horizontal_noise() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GPSSensor_Sensing::set_has_horizontal_noise() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GPSSensor_Sensing::clear_has_horizontal_noise() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GPSSensor_Sensing::clear_horizontal_noise() {
  if (horizontal_noise_ != NULL) horizontal_noise_->::ignition::msgs::SensorNoise::Clear();
  clear_has_horizontal_noise();
}
inline const ::ignition::msgs::SensorNoise& GPSSensor_Sensing::horizontal_noise() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.GPSSensor.Sensing.horizontal_noise)
  return horizontal_noise_ != NULL ? *horizontal_noise_ : *default_instance_->horizontal_noise_;
}
inline ::ignition::msgs::SensorNoise* GPSSensor_Sensing::mutable_horizontal_noise() {
  set_has_horizontal_noise();
  if (horizontal_noise_ == NULL) {
    horizontal_noise_ = new ::ignition::msgs::SensorNoise;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.GPSSensor.Sensing.horizontal_noise)
  return horizontal_noise_;
}
inline ::ignition::msgs::SensorNoise* GPSSensor_Sensing::release_horizontal_noise() {
  // @@protoc_insertion_point(field_release:ignition.msgs.GPSSensor.Sensing.horizontal_noise)
  clear_has_horizontal_noise();
  ::ignition::msgs::SensorNoise* temp = horizontal_noise_;
  horizontal_noise_ = NULL;
  return temp;
}
inline void GPSSensor_Sensing::set_allocated_horizontal_noise(::ignition::msgs::SensorNoise* horizontal_noise) {
  delete horizontal_noise_;
  horizontal_noise_ = horizontal_noise;
  if (horizontal_noise) {
    set_has_horizontal_noise();
  } else {
    clear_has_horizontal_noise();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.GPSSensor.Sensing.horizontal_noise)
}

// optional .ignition.msgs.SensorNoise vertical_noise = 2;
inline bool GPSSensor_Sensing::has_vertical_noise() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GPSSensor_Sensing::set_has_vertical_noise() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GPSSensor_Sensing::clear_has_vertical_noise() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GPSSensor_Sensing::clear_vertical_noise() {
  if (vertical_noise_ != NULL) vertical_noise_->::ignition::msgs::SensorNoise::Clear();
  clear_has_vertical_noise();
}
inline const ::ignition::msgs::SensorNoise& GPSSensor_Sensing::vertical_noise() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.GPSSensor.Sensing.vertical_noise)
  return vertical_noise_ != NULL ? *vertical_noise_ : *default_instance_->vertical_noise_;
}
inline ::ignition::msgs::SensorNoise* GPSSensor_Sensing::mutable_vertical_noise() {
  set_has_vertical_noise();
  if (vertical_noise_ == NULL) {
    vertical_noise_ = new ::ignition::msgs::SensorNoise;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.GPSSensor.Sensing.vertical_noise)
  return vertical_noise_;
}
inline ::ignition::msgs::SensorNoise* GPSSensor_Sensing::release_vertical_noise() {
  // @@protoc_insertion_point(field_release:ignition.msgs.GPSSensor.Sensing.vertical_noise)
  clear_has_vertical_noise();
  ::ignition::msgs::SensorNoise* temp = vertical_noise_;
  vertical_noise_ = NULL;
  return temp;
}
inline void GPSSensor_Sensing::set_allocated_vertical_noise(::ignition::msgs::SensorNoise* vertical_noise) {
  delete vertical_noise_;
  vertical_noise_ = vertical_noise;
  if (vertical_noise) {
    set_has_vertical_noise();
  } else {
    clear_has_vertical_noise();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.GPSSensor.Sensing.vertical_noise)
}

// -------------------------------------------------------------------

// GPSSensor

// optional .ignition.msgs.Header header = 1;
inline bool GPSSensor::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GPSSensor::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GPSSensor::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GPSSensor::clear_header() {
  if (header_ != NULL) header_->::ignition::msgs::Header::Clear();
  clear_has_header();
}
inline const ::ignition::msgs::Header& GPSSensor::header() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.GPSSensor.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ignition::msgs::Header* GPSSensor::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::ignition::msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.GPSSensor.header)
  return header_;
}
inline ::ignition::msgs::Header* GPSSensor::release_header() {
  // @@protoc_insertion_point(field_release:ignition.msgs.GPSSensor.header)
  clear_has_header();
  ::ignition::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void GPSSensor::set_allocated_header(::ignition::msgs::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.GPSSensor.header)
}

// optional .ignition.msgs.GPSSensor.Sensing position = 2;
inline bool GPSSensor::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GPSSensor::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GPSSensor::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GPSSensor::clear_position() {
  if (position_ != NULL) position_->::ignition::msgs::GPSSensor_Sensing::Clear();
  clear_has_position();
}
inline const ::ignition::msgs::GPSSensor_Sensing& GPSSensor::position() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.GPSSensor.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::ignition::msgs::GPSSensor_Sensing* GPSSensor::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::ignition::msgs::GPSSensor_Sensing;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.GPSSensor.position)
  return position_;
}
inline ::ignition::msgs::GPSSensor_Sensing* GPSSensor::release_position() {
  // @@protoc_insertion_point(field_release:ignition.msgs.GPSSensor.position)
  clear_has_position();
  ::ignition::msgs::GPSSensor_Sensing* temp = position_;
  position_ = NULL;
  return temp;
}
inline void GPSSensor::set_allocated_position(::ignition::msgs::GPSSensor_Sensing* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.GPSSensor.position)
}

// optional .ignition.msgs.GPSSensor.Sensing velocity = 3;
inline bool GPSSensor::has_velocity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GPSSensor::set_has_velocity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GPSSensor::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GPSSensor::clear_velocity() {
  if (velocity_ != NULL) velocity_->::ignition::msgs::GPSSensor_Sensing::Clear();
  clear_has_velocity();
}
inline const ::ignition::msgs::GPSSensor_Sensing& GPSSensor::velocity() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.GPSSensor.velocity)
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
inline ::ignition::msgs::GPSSensor_Sensing* GPSSensor::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::ignition::msgs::GPSSensor_Sensing;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.GPSSensor.velocity)
  return velocity_;
}
inline ::ignition::msgs::GPSSensor_Sensing* GPSSensor::release_velocity() {
  // @@protoc_insertion_point(field_release:ignition.msgs.GPSSensor.velocity)
  clear_has_velocity();
  ::ignition::msgs::GPSSensor_Sensing* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline void GPSSensor::set_allocated_velocity(::ignition::msgs::GPSSensor_Sensing* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.GPSSensor.velocity)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


typedef std::unique_ptr<GPSSensor> GPSSensorUniquePtr;
typedef std::unique_ptr<const GPSSensor> ConstGPSSensorUniquePtr;
typedef std::shared_ptr<GPSSensor> GPSSensorSharedPtr;
typedef std::shared_ptr<const GPSSensor> ConstGPSSensorSharedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

#ifdef _MSC_VER
#pragma warning(pop)
#endif
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ignition_2fmsgs_2fgps_5fsensor_2eproto__INCLUDED
