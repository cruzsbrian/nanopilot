// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ignition/msgs/entity_factory.proto

#ifndef PROTOBUF_ignition_2fmsgs_2fentity_5ffactory_2eproto__INCLUDED
#define PROTOBUF_ignition_2fmsgs_2fentity_5ffactory_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/pose.pb.h"
#include "ignition/msgs/light.pb.h"
#include "ignition/msgs/header.pb.h"
#ifndef _MSC_VER
#pragma GCC system_header
#else
#pragma warning(push)
#pragma warning(disable: 4244 4267 4100 4244 4512 4127 4068 4275 4251)
#endif
#include <memory>
#include <ignition/msgs/Export.hh>
// @@protoc_insertion_point(includes)

namespace ignition {
namespace msgs {

// Internal implementation detail -- do not call these.
void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fentity_5ffactory_2eproto();
void protobuf_AssignDesc_ignition_2fmsgs_2fentity_5ffactory_2eproto();
void protobuf_ShutdownFile_ignition_2fmsgs_2fentity_5ffactory_2eproto();

class EntityFactory;

// ===================================================================

class IGNITION_MSGS_VISIBLE EntityFactory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.EntityFactory) */ {
 public:
  EntityFactory();
  virtual ~EntityFactory();

  EntityFactory(const EntityFactory& from);

  inline EntityFactory& operator=(const EntityFactory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityFactory& default_instance();

  void Swap(EntityFactory* other);

  // implements Message ----------------------------------------------

  inline EntityFactory* New() const { return New(NULL); }

  EntityFactory* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EntityFactory& from);
  void MergeFrom(const EntityFactory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EntityFactory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ignition.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::ignition::msgs::Header& header() const;
  ::ignition::msgs::Header* mutable_header();
  ::ignition::msgs::Header* release_header();
  void set_allocated_header(::ignition::msgs::Header* header);

  // optional string sdf = 2;
  bool has_sdf() const;
  void clear_sdf();
  static const int kSdfFieldNumber = 2;
  const ::std::string& sdf() const;
  void set_sdf(const ::std::string& value);
  void set_sdf(const char* value);
  void set_sdf(const char* value, size_t size);
  ::std::string* mutable_sdf();
  ::std::string* release_sdf();
  void set_allocated_sdf(::std::string* sdf);

  // optional string sdf_filename = 3;
  bool has_sdf_filename() const;
  void clear_sdf_filename();
  static const int kSdfFilenameFieldNumber = 3;
  const ::std::string& sdf_filename() const;
  void set_sdf_filename(const ::std::string& value);
  void set_sdf_filename(const char* value);
  void set_sdf_filename(const char* value, size_t size);
  ::std::string* mutable_sdf_filename();
  ::std::string* release_sdf_filename();
  void set_allocated_sdf_filename(::std::string* sdf_filename);

  // optional .ignition.msgs.Pose pose = 4;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 4;
  const ::ignition::msgs::Pose& pose() const;
  ::ignition::msgs::Pose* mutable_pose();
  ::ignition::msgs::Pose* release_pose();
  void set_allocated_pose(::ignition::msgs::Pose* pose);

  // optional string edit_name = 5;
  bool has_edit_name() const;
  void clear_edit_name();
  static const int kEditNameFieldNumber = 5;
  const ::std::string& edit_name() const;
  void set_edit_name(const ::std::string& value);
  void set_edit_name(const char* value);
  void set_edit_name(const char* value, size_t size);
  ::std::string* mutable_edit_name();
  ::std::string* release_edit_name();
  void set_allocated_edit_name(::std::string* edit_name);

  // optional string clone_model_name = 6;
  bool has_clone_model_name() const;
  void clear_clone_model_name();
  static const int kCloneModelNameFieldNumber = 6;
  const ::std::string& clone_model_name() const;
  void set_clone_model_name(const ::std::string& value);
  void set_clone_model_name(const char* value);
  void set_clone_model_name(const char* value, size_t size);
  ::std::string* mutable_clone_model_name();
  ::std::string* release_clone_model_name();
  void set_allocated_clone_model_name(::std::string* clone_model_name);

  // optional bool allow_renaming = 7;
  bool has_allow_renaming() const;
  void clear_allow_renaming();
  static const int kAllowRenamingFieldNumber = 7;
  bool allow_renaming() const;
  void set_allow_renaming(bool value);

  // optional .ignition.msgs.Light light = 8;
  bool has_light() const;
  void clear_light();
  static const int kLightFieldNumber = 8;
  const ::ignition::msgs::Light& light() const;
  ::ignition::msgs::Light* mutable_light();
  ::ignition::msgs::Light* release_light();
  void set_allocated_light(::ignition::msgs::Light* light);

  // @@protoc_insertion_point(class_scope:ignition.msgs.EntityFactory)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_sdf();
  inline void clear_has_sdf();
  inline void set_has_sdf_filename();
  inline void clear_has_sdf_filename();
  inline void set_has_pose();
  inline void clear_has_pose();
  inline void set_has_edit_name();
  inline void clear_has_edit_name();
  inline void set_has_clone_model_name();
  inline void clear_has_clone_model_name();
  inline void set_has_allow_renaming();
  inline void clear_has_allow_renaming();
  inline void set_has_light();
  inline void clear_has_light();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ignition::msgs::Header* header_;
  ::google::protobuf::internal::ArenaStringPtr sdf_;
  ::google::protobuf::internal::ArenaStringPtr sdf_filename_;
  ::ignition::msgs::Pose* pose_;
  ::google::protobuf::internal::ArenaStringPtr edit_name_;
  ::google::protobuf::internal::ArenaStringPtr clone_model_name_;
  ::ignition::msgs::Light* light_;
  bool allow_renaming_;
  friend void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fentity_5ffactory_2eproto();
  friend void protobuf_AssignDesc_ignition_2fmsgs_2fentity_5ffactory_2eproto();
  friend void protobuf_ShutdownFile_ignition_2fmsgs_2fentity_5ffactory_2eproto();

  void InitAsDefaultInstance();
  static EntityFactory* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// EntityFactory

// optional .ignition.msgs.Header header = 1;
inline bool EntityFactory::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EntityFactory::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EntityFactory::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EntityFactory::clear_header() {
  if (header_ != NULL) header_->::ignition::msgs::Header::Clear();
  clear_has_header();
}
inline const ::ignition::msgs::Header& EntityFactory::header() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.EntityFactory.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ignition::msgs::Header* EntityFactory::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::ignition::msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.EntityFactory.header)
  return header_;
}
inline ::ignition::msgs::Header* EntityFactory::release_header() {
  // @@protoc_insertion_point(field_release:ignition.msgs.EntityFactory.header)
  clear_has_header();
  ::ignition::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void EntityFactory::set_allocated_header(::ignition::msgs::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.EntityFactory.header)
}

// optional string sdf = 2;
inline bool EntityFactory::has_sdf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EntityFactory::set_has_sdf() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EntityFactory::clear_has_sdf() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EntityFactory::clear_sdf() {
  sdf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sdf();
}
inline const ::std::string& EntityFactory::sdf() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.EntityFactory.sdf)
  return sdf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntityFactory::set_sdf(const ::std::string& value) {
  set_has_sdf();
  sdf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.EntityFactory.sdf)
}
inline void EntityFactory::set_sdf(const char* value) {
  set_has_sdf();
  sdf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.EntityFactory.sdf)
}
inline void EntityFactory::set_sdf(const char* value, size_t size) {
  set_has_sdf();
  sdf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.EntityFactory.sdf)
}
inline ::std::string* EntityFactory::mutable_sdf() {
  set_has_sdf();
  // @@protoc_insertion_point(field_mutable:ignition.msgs.EntityFactory.sdf)
  return sdf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntityFactory::release_sdf() {
  // @@protoc_insertion_point(field_release:ignition.msgs.EntityFactory.sdf)
  clear_has_sdf();
  return sdf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntityFactory::set_allocated_sdf(::std::string* sdf) {
  if (sdf != NULL) {
    set_has_sdf();
  } else {
    clear_has_sdf();
  }
  sdf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdf);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.EntityFactory.sdf)
}

// optional string sdf_filename = 3;
inline bool EntityFactory::has_sdf_filename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EntityFactory::set_has_sdf_filename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EntityFactory::clear_has_sdf_filename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EntityFactory::clear_sdf_filename() {
  sdf_filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sdf_filename();
}
inline const ::std::string& EntityFactory::sdf_filename() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.EntityFactory.sdf_filename)
  return sdf_filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntityFactory::set_sdf_filename(const ::std::string& value) {
  set_has_sdf_filename();
  sdf_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.EntityFactory.sdf_filename)
}
inline void EntityFactory::set_sdf_filename(const char* value) {
  set_has_sdf_filename();
  sdf_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.EntityFactory.sdf_filename)
}
inline void EntityFactory::set_sdf_filename(const char* value, size_t size) {
  set_has_sdf_filename();
  sdf_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.EntityFactory.sdf_filename)
}
inline ::std::string* EntityFactory::mutable_sdf_filename() {
  set_has_sdf_filename();
  // @@protoc_insertion_point(field_mutable:ignition.msgs.EntityFactory.sdf_filename)
  return sdf_filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntityFactory::release_sdf_filename() {
  // @@protoc_insertion_point(field_release:ignition.msgs.EntityFactory.sdf_filename)
  clear_has_sdf_filename();
  return sdf_filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntityFactory::set_allocated_sdf_filename(::std::string* sdf_filename) {
  if (sdf_filename != NULL) {
    set_has_sdf_filename();
  } else {
    clear_has_sdf_filename();
  }
  sdf_filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdf_filename);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.EntityFactory.sdf_filename)
}

// optional .ignition.msgs.Pose pose = 4;
inline bool EntityFactory::has_pose() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EntityFactory::set_has_pose() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EntityFactory::clear_has_pose() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EntityFactory::clear_pose() {
  if (pose_ != NULL) pose_->::ignition::msgs::Pose::Clear();
  clear_has_pose();
}
inline const ::ignition::msgs::Pose& EntityFactory::pose() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.EntityFactory.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::ignition::msgs::Pose* EntityFactory::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::ignition::msgs::Pose;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.EntityFactory.pose)
  return pose_;
}
inline ::ignition::msgs::Pose* EntityFactory::release_pose() {
  // @@protoc_insertion_point(field_release:ignition.msgs.EntityFactory.pose)
  clear_has_pose();
  ::ignition::msgs::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void EntityFactory::set_allocated_pose(::ignition::msgs::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.EntityFactory.pose)
}

// optional string edit_name = 5;
inline bool EntityFactory::has_edit_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EntityFactory::set_has_edit_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EntityFactory::clear_has_edit_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EntityFactory::clear_edit_name() {
  edit_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_edit_name();
}
inline const ::std::string& EntityFactory::edit_name() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.EntityFactory.edit_name)
  return edit_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntityFactory::set_edit_name(const ::std::string& value) {
  set_has_edit_name();
  edit_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.EntityFactory.edit_name)
}
inline void EntityFactory::set_edit_name(const char* value) {
  set_has_edit_name();
  edit_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.EntityFactory.edit_name)
}
inline void EntityFactory::set_edit_name(const char* value, size_t size) {
  set_has_edit_name();
  edit_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.EntityFactory.edit_name)
}
inline ::std::string* EntityFactory::mutable_edit_name() {
  set_has_edit_name();
  // @@protoc_insertion_point(field_mutable:ignition.msgs.EntityFactory.edit_name)
  return edit_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntityFactory::release_edit_name() {
  // @@protoc_insertion_point(field_release:ignition.msgs.EntityFactory.edit_name)
  clear_has_edit_name();
  return edit_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntityFactory::set_allocated_edit_name(::std::string* edit_name) {
  if (edit_name != NULL) {
    set_has_edit_name();
  } else {
    clear_has_edit_name();
  }
  edit_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), edit_name);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.EntityFactory.edit_name)
}

// optional string clone_model_name = 6;
inline bool EntityFactory::has_clone_model_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EntityFactory::set_has_clone_model_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EntityFactory::clear_has_clone_model_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EntityFactory::clear_clone_model_name() {
  clone_model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clone_model_name();
}
inline const ::std::string& EntityFactory::clone_model_name() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.EntityFactory.clone_model_name)
  return clone_model_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntityFactory::set_clone_model_name(const ::std::string& value) {
  set_has_clone_model_name();
  clone_model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.EntityFactory.clone_model_name)
}
inline void EntityFactory::set_clone_model_name(const char* value) {
  set_has_clone_model_name();
  clone_model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.EntityFactory.clone_model_name)
}
inline void EntityFactory::set_clone_model_name(const char* value, size_t size) {
  set_has_clone_model_name();
  clone_model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.EntityFactory.clone_model_name)
}
inline ::std::string* EntityFactory::mutable_clone_model_name() {
  set_has_clone_model_name();
  // @@protoc_insertion_point(field_mutable:ignition.msgs.EntityFactory.clone_model_name)
  return clone_model_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntityFactory::release_clone_model_name() {
  // @@protoc_insertion_point(field_release:ignition.msgs.EntityFactory.clone_model_name)
  clear_has_clone_model_name();
  return clone_model_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntityFactory::set_allocated_clone_model_name(::std::string* clone_model_name) {
  if (clone_model_name != NULL) {
    set_has_clone_model_name();
  } else {
    clear_has_clone_model_name();
  }
  clone_model_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clone_model_name);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.EntityFactory.clone_model_name)
}

// optional bool allow_renaming = 7;
inline bool EntityFactory::has_allow_renaming() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EntityFactory::set_has_allow_renaming() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EntityFactory::clear_has_allow_renaming() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EntityFactory::clear_allow_renaming() {
  allow_renaming_ = false;
  clear_has_allow_renaming();
}
inline bool EntityFactory::allow_renaming() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.EntityFactory.allow_renaming)
  return allow_renaming_;
}
inline void EntityFactory::set_allow_renaming(bool value) {
  set_has_allow_renaming();
  allow_renaming_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.EntityFactory.allow_renaming)
}

// optional .ignition.msgs.Light light = 8;
inline bool EntityFactory::has_light() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EntityFactory::set_has_light() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EntityFactory::clear_has_light() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EntityFactory::clear_light() {
  if (light_ != NULL) light_->::ignition::msgs::Light::Clear();
  clear_has_light();
}
inline const ::ignition::msgs::Light& EntityFactory::light() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.EntityFactory.light)
  return light_ != NULL ? *light_ : *default_instance_->light_;
}
inline ::ignition::msgs::Light* EntityFactory::mutable_light() {
  set_has_light();
  if (light_ == NULL) {
    light_ = new ::ignition::msgs::Light;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.EntityFactory.light)
  return light_;
}
inline ::ignition::msgs::Light* EntityFactory::release_light() {
  // @@protoc_insertion_point(field_release:ignition.msgs.EntityFactory.light)
  clear_has_light();
  ::ignition::msgs::Light* temp = light_;
  light_ = NULL;
  return temp;
}
inline void EntityFactory::set_allocated_light(::ignition::msgs::Light* light) {
  delete light_;
  light_ = light;
  if (light) {
    set_has_light();
  } else {
    clear_has_light();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.EntityFactory.light)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef std::unique_ptr<EntityFactory> EntityFactoryUniquePtr;
typedef std::unique_ptr<const EntityFactory> ConstEntityFactoryUniquePtr;
typedef std::shared_ptr<EntityFactory> EntityFactorySharedPtr;
typedef std::shared_ptr<const EntityFactory> ConstEntityFactorySharedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

#ifdef _MSC_VER
#pragma warning(pop)
#endif
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ignition_2fmsgs_2fentity_5ffactory_2eproto__INCLUDED
