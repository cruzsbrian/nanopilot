// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ignition/msgs/marker.proto

#ifndef PROTOBUF_ignition_2fmsgs_2fmarker_2eproto__INCLUDED
#define PROTOBUF_ignition_2fmsgs_2fmarker_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/time.pb.h"
#include "ignition/msgs/pose.pb.h"
#include "ignition/msgs/vector3d.pb.h"
#include "ignition/msgs/material.pb.h"
#include "ignition/msgs/header.pb.h"
#ifndef _MSC_VER
#pragma GCC system_header
#else
#pragma warning(push)
#pragma warning(disable: 4244 4267 4100 4244 4512 4127 4068 4275 4251)
#endif
#include <memory>
#include <ignition/msgs/Export.hh>
// @@protoc_insertion_point(includes)

namespace ignition {
namespace msgs {

// Internal implementation detail -- do not call these.
void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fmarker_2eproto();
void protobuf_AssignDesc_ignition_2fmsgs_2fmarker_2eproto();
void protobuf_ShutdownFile_ignition_2fmsgs_2fmarker_2eproto();

class Marker;

enum Marker_Type {
  Marker_Type_NONE = 0,
  Marker_Type_BOX = 1,
  Marker_Type_CYLINDER = 2,
  Marker_Type_LINE_LIST = 4,
  Marker_Type_LINE_STRIP = 3,
  Marker_Type_POINTS = 5,
  Marker_Type_SPHERE = 6,
  Marker_Type_TEXT = 7,
  Marker_Type_TRIANGLE_FAN = 8,
  Marker_Type_TRIANGLE_LIST = 9,
  Marker_Type_TRIANGLE_STRIP = 10
};
IGNITION_MSGS_VISIBLE bool Marker_Type_IsValid(int value);
const Marker_Type Marker_Type_Type_MIN = Marker_Type_NONE;
const Marker_Type Marker_Type_Type_MAX = Marker_Type_TRIANGLE_STRIP;
const int Marker_Type_Type_ARRAYSIZE = Marker_Type_Type_MAX + 1;

IGNITION_MSGS_VISIBLE const ::google::protobuf::EnumDescriptor* Marker_Type_descriptor();
inline const ::std::string& Marker_Type_Name(Marker_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Marker_Type_descriptor(), value);
}
inline bool Marker_Type_Parse(
    const ::std::string& name, Marker_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Marker_Type>(
    Marker_Type_descriptor(), name, value);
}
enum Marker_Visibility {
  Marker_Visibility_GUI = 0,
  Marker_Visibility_ALL = 1
};
IGNITION_MSGS_VISIBLE bool Marker_Visibility_IsValid(int value);
const Marker_Visibility Marker_Visibility_Visibility_MIN = Marker_Visibility_GUI;
const Marker_Visibility Marker_Visibility_Visibility_MAX = Marker_Visibility_ALL;
const int Marker_Visibility_Visibility_ARRAYSIZE = Marker_Visibility_Visibility_MAX + 1;

IGNITION_MSGS_VISIBLE const ::google::protobuf::EnumDescriptor* Marker_Visibility_descriptor();
inline const ::std::string& Marker_Visibility_Name(Marker_Visibility value) {
  return ::google::protobuf::internal::NameOfEnum(
    Marker_Visibility_descriptor(), value);
}
inline bool Marker_Visibility_Parse(
    const ::std::string& name, Marker_Visibility* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Marker_Visibility>(
    Marker_Visibility_descriptor(), name, value);
}
enum Marker_Action {
  Marker_Action_ADD_MODIFY = 0,
  Marker_Action_DELETE_MARKER = 1,
  Marker_Action_DELETE_ALL = 2
};
IGNITION_MSGS_VISIBLE bool Marker_Action_IsValid(int value);
const Marker_Action Marker_Action_Action_MIN = Marker_Action_ADD_MODIFY;
const Marker_Action Marker_Action_Action_MAX = Marker_Action_DELETE_ALL;
const int Marker_Action_Action_ARRAYSIZE = Marker_Action_Action_MAX + 1;

IGNITION_MSGS_VISIBLE const ::google::protobuf::EnumDescriptor* Marker_Action_descriptor();
inline const ::std::string& Marker_Action_Name(Marker_Action value) {
  return ::google::protobuf::internal::NameOfEnum(
    Marker_Action_descriptor(), value);
}
inline bool Marker_Action_Parse(
    const ::std::string& name, Marker_Action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Marker_Action>(
    Marker_Action_descriptor(), name, value);
}
// ===================================================================

class IGNITION_MSGS_VISIBLE Marker : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.Marker) */ {
 public:
  Marker();
  virtual ~Marker();

  Marker(const Marker& from);

  inline Marker& operator=(const Marker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Marker& default_instance();

  void Swap(Marker* other);

  // implements Message ----------------------------------------------

  inline Marker* New() const { return New(NULL); }

  Marker* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Marker& from);
  void MergeFrom(const Marker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Marker* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Marker_Type Type;
  static const Type NONE =
    Marker_Type_NONE;
  static const Type BOX =
    Marker_Type_BOX;
  static const Type CYLINDER =
    Marker_Type_CYLINDER;
  static const Type LINE_LIST =
    Marker_Type_LINE_LIST;
  static const Type LINE_STRIP =
    Marker_Type_LINE_STRIP;
  static const Type POINTS =
    Marker_Type_POINTS;
  static const Type SPHERE =
    Marker_Type_SPHERE;
  static const Type TEXT =
    Marker_Type_TEXT;
  static const Type TRIANGLE_FAN =
    Marker_Type_TRIANGLE_FAN;
  static const Type TRIANGLE_LIST =
    Marker_Type_TRIANGLE_LIST;
  static const Type TRIANGLE_STRIP =
    Marker_Type_TRIANGLE_STRIP;
  static inline bool Type_IsValid(int value) {
    return Marker_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Marker_Type_Type_MIN;
  static const Type Type_MAX =
    Marker_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Marker_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Marker_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Marker_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Marker_Type_Parse(name, value);
  }

  typedef Marker_Visibility Visibility;
  static const Visibility GUI =
    Marker_Visibility_GUI;
  static const Visibility ALL =
    Marker_Visibility_ALL;
  static inline bool Visibility_IsValid(int value) {
    return Marker_Visibility_IsValid(value);
  }
  static const Visibility Visibility_MIN =
    Marker_Visibility_Visibility_MIN;
  static const Visibility Visibility_MAX =
    Marker_Visibility_Visibility_MAX;
  static const int Visibility_ARRAYSIZE =
    Marker_Visibility_Visibility_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Visibility_descriptor() {
    return Marker_Visibility_descriptor();
  }
  static inline const ::std::string& Visibility_Name(Visibility value) {
    return Marker_Visibility_Name(value);
  }
  static inline bool Visibility_Parse(const ::std::string& name,
      Visibility* value) {
    return Marker_Visibility_Parse(name, value);
  }

  typedef Marker_Action Action;
  static const Action ADD_MODIFY =
    Marker_Action_ADD_MODIFY;
  static const Action DELETE_MARKER =
    Marker_Action_DELETE_MARKER;
  static const Action DELETE_ALL =
    Marker_Action_DELETE_ALL;
  static inline bool Action_IsValid(int value) {
    return Marker_Action_IsValid(value);
  }
  static const Action Action_MIN =
    Marker_Action_Action_MIN;
  static const Action Action_MAX =
    Marker_Action_Action_MAX;
  static const int Action_ARRAYSIZE =
    Marker_Action_Action_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Action_descriptor() {
    return Marker_Action_descriptor();
  }
  static inline const ::std::string& Action_Name(Action value) {
    return Marker_Action_Name(value);
  }
  static inline bool Action_Parse(const ::std::string& name,
      Action* value) {
    return Marker_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .ignition.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::ignition::msgs::Header& header() const;
  ::ignition::msgs::Header* mutable_header();
  ::ignition::msgs::Header* release_header();
  void set_allocated_header(::ignition::msgs::Header* header);

  // optional .ignition.msgs.Marker.Action action = 2;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 2;
  ::ignition::msgs::Marker_Action action() const;
  void set_action(::ignition::msgs::Marker_Action value);

  // optional string ns = 3;
  bool has_ns() const;
  void clear_ns();
  static const int kNsFieldNumber = 3;
  const ::std::string& ns() const;
  void set_ns(const ::std::string& value);
  void set_ns(const char* value);
  void set_ns(const char* value, size_t size);
  ::std::string* mutable_ns();
  ::std::string* release_ns();
  void set_allocated_ns(::std::string* ns);

  // optional uint64 id = 4;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 4;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional int32 layer = 5 [default = 0];
  bool has_layer() const;
  void clear_layer();
  static const int kLayerFieldNumber = 5;
  ::google::protobuf::int32 layer() const;
  void set_layer(::google::protobuf::int32 value);

  // optional .ignition.msgs.Marker.Type type = 6;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 6;
  ::ignition::msgs::Marker_Type type() const;
  void set_type(::ignition::msgs::Marker_Type value);

  // optional .ignition.msgs.Time lifetime = 7;
  bool has_lifetime() const;
  void clear_lifetime();
  static const int kLifetimeFieldNumber = 7;
  const ::ignition::msgs::Time& lifetime() const;
  ::ignition::msgs::Time* mutable_lifetime();
  ::ignition::msgs::Time* release_lifetime();
  void set_allocated_lifetime(::ignition::msgs::Time* lifetime);

  // optional .ignition.msgs.Pose pose = 8;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 8;
  const ::ignition::msgs::Pose& pose() const;
  ::ignition::msgs::Pose* mutable_pose();
  ::ignition::msgs::Pose* release_pose();
  void set_allocated_pose(::ignition::msgs::Pose* pose);

  // optional .ignition.msgs.Vector3d scale = 9;
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 9;
  const ::ignition::msgs::Vector3d& scale() const;
  ::ignition::msgs::Vector3d* mutable_scale();
  ::ignition::msgs::Vector3d* release_scale();
  void set_allocated_scale(::ignition::msgs::Vector3d* scale);

  // optional .ignition.msgs.Material material = 10;
  bool has_material() const;
  void clear_material();
  static const int kMaterialFieldNumber = 10;
  const ::ignition::msgs::Material& material() const;
  ::ignition::msgs::Material* mutable_material();
  ::ignition::msgs::Material* release_material();
  void set_allocated_material(::ignition::msgs::Material* material);

  // repeated .ignition.msgs.Vector3d point = 11;
  int point_size() const;
  void clear_point();
  static const int kPointFieldNumber = 11;
  const ::ignition::msgs::Vector3d& point(int index) const;
  ::ignition::msgs::Vector3d* mutable_point(int index);
  ::ignition::msgs::Vector3d* add_point();
  ::google::protobuf::RepeatedPtrField< ::ignition::msgs::Vector3d >*
      mutable_point();
  const ::google::protobuf::RepeatedPtrField< ::ignition::msgs::Vector3d >&
      point() const;

  // optional string text = 12;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 12;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // optional string parent = 13;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 13;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // optional .ignition.msgs.Marker.Visibility visibility = 14;
  bool has_visibility() const;
  void clear_visibility();
  static const int kVisibilityFieldNumber = 14;
  ::ignition::msgs::Marker_Visibility visibility() const;
  void set_visibility(::ignition::msgs::Marker_Visibility value);

  // @@protoc_insertion_point(class_scope:ignition.msgs.Marker)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_ns();
  inline void clear_has_ns();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_lifetime();
  inline void clear_has_lifetime();
  inline void set_has_pose();
  inline void clear_has_pose();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_material();
  inline void clear_has_material();
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_parent();
  inline void clear_has_parent();
  inline void set_has_visibility();
  inline void clear_has_visibility();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ignition::msgs::Header* header_;
  ::google::protobuf::internal::ArenaStringPtr ns_;
  int action_;
  ::google::protobuf::int32 layer_;
  ::google::protobuf::uint64 id_;
  ::ignition::msgs::Time* lifetime_;
  ::ignition::msgs::Pose* pose_;
  ::ignition::msgs::Vector3d* scale_;
  ::ignition::msgs::Material* material_;
  int type_;
  int visibility_;
  ::google::protobuf::RepeatedPtrField< ::ignition::msgs::Vector3d > point_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  friend void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fmarker_2eproto();
  friend void protobuf_AssignDesc_ignition_2fmsgs_2fmarker_2eproto();
  friend void protobuf_ShutdownFile_ignition_2fmsgs_2fmarker_2eproto();

  void InitAsDefaultInstance();
  static Marker* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Marker

// optional .ignition.msgs.Header header = 1;
inline bool Marker::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Marker::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Marker::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Marker::clear_header() {
  if (header_ != NULL) header_->::ignition::msgs::Header::Clear();
  clear_has_header();
}
inline const ::ignition::msgs::Header& Marker::header() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Marker.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ignition::msgs::Header* Marker::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::ignition::msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Marker.header)
  return header_;
}
inline ::ignition::msgs::Header* Marker::release_header() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Marker.header)
  clear_has_header();
  ::ignition::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Marker::set_allocated_header(::ignition::msgs::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Marker.header)
}

// optional .ignition.msgs.Marker.Action action = 2;
inline bool Marker::has_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Marker::set_has_action() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Marker::clear_has_action() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Marker::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::ignition::msgs::Marker_Action Marker::action() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Marker.action)
  return static_cast< ::ignition::msgs::Marker_Action >(action_);
}
inline void Marker::set_action(::ignition::msgs::Marker_Action value) {
  assert(::ignition::msgs::Marker_Action_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Marker.action)
}

// optional string ns = 3;
inline bool Marker::has_ns() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Marker::set_has_ns() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Marker::clear_has_ns() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Marker::clear_ns() {
  ns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ns();
}
inline const ::std::string& Marker::ns() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Marker.ns)
  return ns_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Marker::set_ns(const ::std::string& value) {
  set_has_ns();
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.Marker.ns)
}
inline void Marker::set_ns(const char* value) {
  set_has_ns();
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.Marker.ns)
}
inline void Marker::set_ns(const char* value, size_t size) {
  set_has_ns();
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.Marker.ns)
}
inline ::std::string* Marker::mutable_ns() {
  set_has_ns();
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Marker.ns)
  return ns_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Marker::release_ns() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Marker.ns)
  clear_has_ns();
  return ns_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Marker::set_allocated_ns(::std::string* ns) {
  if (ns != NULL) {
    set_has_ns();
  } else {
    clear_has_ns();
  }
  ns_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ns);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Marker.ns)
}

// optional uint64 id = 4;
inline bool Marker::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Marker::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Marker::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Marker::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 Marker::id() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Marker.id)
  return id_;
}
inline void Marker::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Marker.id)
}

// optional int32 layer = 5 [default = 0];
inline bool Marker::has_layer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Marker::set_has_layer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Marker::clear_has_layer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Marker::clear_layer() {
  layer_ = 0;
  clear_has_layer();
}
inline ::google::protobuf::int32 Marker::layer() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Marker.layer)
  return layer_;
}
inline void Marker::set_layer(::google::protobuf::int32 value) {
  set_has_layer();
  layer_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Marker.layer)
}

// optional .ignition.msgs.Marker.Type type = 6;
inline bool Marker::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Marker::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Marker::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Marker::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ignition::msgs::Marker_Type Marker::type() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Marker.type)
  return static_cast< ::ignition::msgs::Marker_Type >(type_);
}
inline void Marker::set_type(::ignition::msgs::Marker_Type value) {
  assert(::ignition::msgs::Marker_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Marker.type)
}

// optional .ignition.msgs.Time lifetime = 7;
inline bool Marker::has_lifetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Marker::set_has_lifetime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Marker::clear_has_lifetime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Marker::clear_lifetime() {
  if (lifetime_ != NULL) lifetime_->::ignition::msgs::Time::Clear();
  clear_has_lifetime();
}
inline const ::ignition::msgs::Time& Marker::lifetime() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Marker.lifetime)
  return lifetime_ != NULL ? *lifetime_ : *default_instance_->lifetime_;
}
inline ::ignition::msgs::Time* Marker::mutable_lifetime() {
  set_has_lifetime();
  if (lifetime_ == NULL) {
    lifetime_ = new ::ignition::msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Marker.lifetime)
  return lifetime_;
}
inline ::ignition::msgs::Time* Marker::release_lifetime() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Marker.lifetime)
  clear_has_lifetime();
  ::ignition::msgs::Time* temp = lifetime_;
  lifetime_ = NULL;
  return temp;
}
inline void Marker::set_allocated_lifetime(::ignition::msgs::Time* lifetime) {
  delete lifetime_;
  lifetime_ = lifetime;
  if (lifetime) {
    set_has_lifetime();
  } else {
    clear_has_lifetime();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Marker.lifetime)
}

// optional .ignition.msgs.Pose pose = 8;
inline bool Marker::has_pose() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Marker::set_has_pose() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Marker::clear_has_pose() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Marker::clear_pose() {
  if (pose_ != NULL) pose_->::ignition::msgs::Pose::Clear();
  clear_has_pose();
}
inline const ::ignition::msgs::Pose& Marker::pose() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Marker.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::ignition::msgs::Pose* Marker::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::ignition::msgs::Pose;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Marker.pose)
  return pose_;
}
inline ::ignition::msgs::Pose* Marker::release_pose() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Marker.pose)
  clear_has_pose();
  ::ignition::msgs::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void Marker::set_allocated_pose(::ignition::msgs::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Marker.pose)
}

// optional .ignition.msgs.Vector3d scale = 9;
inline bool Marker::has_scale() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Marker::set_has_scale() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Marker::clear_has_scale() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Marker::clear_scale() {
  if (scale_ != NULL) scale_->::ignition::msgs::Vector3d::Clear();
  clear_has_scale();
}
inline const ::ignition::msgs::Vector3d& Marker::scale() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Marker.scale)
  return scale_ != NULL ? *scale_ : *default_instance_->scale_;
}
inline ::ignition::msgs::Vector3d* Marker::mutable_scale() {
  set_has_scale();
  if (scale_ == NULL) {
    scale_ = new ::ignition::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Marker.scale)
  return scale_;
}
inline ::ignition::msgs::Vector3d* Marker::release_scale() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Marker.scale)
  clear_has_scale();
  ::ignition::msgs::Vector3d* temp = scale_;
  scale_ = NULL;
  return temp;
}
inline void Marker::set_allocated_scale(::ignition::msgs::Vector3d* scale) {
  delete scale_;
  scale_ = scale;
  if (scale) {
    set_has_scale();
  } else {
    clear_has_scale();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Marker.scale)
}

// optional .ignition.msgs.Material material = 10;
inline bool Marker::has_material() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Marker::set_has_material() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Marker::clear_has_material() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Marker::clear_material() {
  if (material_ != NULL) material_->::ignition::msgs::Material::Clear();
  clear_has_material();
}
inline const ::ignition::msgs::Material& Marker::material() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Marker.material)
  return material_ != NULL ? *material_ : *default_instance_->material_;
}
inline ::ignition::msgs::Material* Marker::mutable_material() {
  set_has_material();
  if (material_ == NULL) {
    material_ = new ::ignition::msgs::Material;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Marker.material)
  return material_;
}
inline ::ignition::msgs::Material* Marker::release_material() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Marker.material)
  clear_has_material();
  ::ignition::msgs::Material* temp = material_;
  material_ = NULL;
  return temp;
}
inline void Marker::set_allocated_material(::ignition::msgs::Material* material) {
  delete material_;
  material_ = material;
  if (material) {
    set_has_material();
  } else {
    clear_has_material();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Marker.material)
}

// repeated .ignition.msgs.Vector3d point = 11;
inline int Marker::point_size() const {
  return point_.size();
}
inline void Marker::clear_point() {
  point_.Clear();
}
inline const ::ignition::msgs::Vector3d& Marker::point(int index) const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Marker.point)
  return point_.Get(index);
}
inline ::ignition::msgs::Vector3d* Marker::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Marker.point)
  return point_.Mutable(index);
}
inline ::ignition::msgs::Vector3d* Marker::add_point() {
  // @@protoc_insertion_point(field_add:ignition.msgs.Marker.point)
  return point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ignition::msgs::Vector3d >*
Marker::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:ignition.msgs.Marker.point)
  return &point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ignition::msgs::Vector3d >&
Marker::point() const {
  // @@protoc_insertion_point(field_list:ignition.msgs.Marker.point)
  return point_;
}

// optional string text = 12;
inline bool Marker::has_text() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Marker::set_has_text() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Marker::clear_has_text() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Marker::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& Marker::text() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Marker.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Marker::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.Marker.text)
}
inline void Marker::set_text(const char* value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.Marker.text)
}
inline void Marker::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.Marker.text)
}
inline ::std::string* Marker::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Marker.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Marker::release_text() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Marker.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Marker::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Marker.text)
}

// optional string parent = 13;
inline bool Marker::has_parent() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Marker::set_has_parent() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Marker::clear_has_parent() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Marker::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parent();
}
inline const ::std::string& Marker::parent() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Marker.parent)
  return parent_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Marker::set_parent(const ::std::string& value) {
  set_has_parent();
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.Marker.parent)
}
inline void Marker::set_parent(const char* value) {
  set_has_parent();
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.Marker.parent)
}
inline void Marker::set_parent(const char* value, size_t size) {
  set_has_parent();
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.Marker.parent)
}
inline ::std::string* Marker::mutable_parent() {
  set_has_parent();
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Marker.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Marker::release_parent() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Marker.parent)
  clear_has_parent();
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Marker::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    set_has_parent();
  } else {
    clear_has_parent();
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Marker.parent)
}

// optional .ignition.msgs.Marker.Visibility visibility = 14;
inline bool Marker::has_visibility() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Marker::set_has_visibility() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Marker::clear_has_visibility() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Marker::clear_visibility() {
  visibility_ = 0;
  clear_has_visibility();
}
inline ::ignition::msgs::Marker_Visibility Marker::visibility() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Marker.visibility)
  return static_cast< ::ignition::msgs::Marker_Visibility >(visibility_);
}
inline void Marker::set_visibility(::ignition::msgs::Marker_Visibility value) {
  assert(::ignition::msgs::Marker_Visibility_IsValid(value));
  set_has_visibility();
  visibility_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Marker.visibility)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef std::unique_ptr<Marker> MarkerUniquePtr;
typedef std::unique_ptr<const Marker> ConstMarkerUniquePtr;
typedef std::shared_ptr<Marker> MarkerSharedPtr;
typedef std::shared_ptr<const Marker> ConstMarkerSharedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ignition::msgs::Marker_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ignition::msgs::Marker_Type>() {
  return ::ignition::msgs::Marker_Type_descriptor();
}
template <> struct is_proto_enum< ::ignition::msgs::Marker_Visibility> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ignition::msgs::Marker_Visibility>() {
  return ::ignition::msgs::Marker_Visibility_descriptor();
}
template <> struct is_proto_enum< ::ignition::msgs::Marker_Action> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ignition::msgs::Marker_Action>() {
  return ::ignition::msgs::Marker_Action_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

#ifdef _MSC_VER
#pragma warning(pop)
#endif
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ignition_2fmsgs_2fmarker_2eproto__INCLUDED
