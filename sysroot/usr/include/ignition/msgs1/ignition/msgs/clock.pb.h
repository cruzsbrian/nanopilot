// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ignition/msgs/clock.proto

#ifndef PROTOBUF_ignition_2fmsgs_2fclock_2eproto__INCLUDED
#define PROTOBUF_ignition_2fmsgs_2fclock_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/time.pb.h"
#include "ignition/msgs/header.pb.h"
#ifndef _MSC_VER
#pragma GCC system_header
#else
#pragma warning(push)
#pragma warning(disable: 4244 4267 4100 4244 4512 4127 4068 4275 4251)
#endif
#include <memory>
#include <ignition/msgs/Export.hh>
// @@protoc_insertion_point(includes)

namespace ignition {
namespace msgs {

// Internal implementation detail -- do not call these.
void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fclock_2eproto();
void protobuf_AssignDesc_ignition_2fmsgs_2fclock_2eproto();
void protobuf_ShutdownFile_ignition_2fmsgs_2fclock_2eproto();

class Clock;

// ===================================================================

class IGNITION_MSGS_VISIBLE Clock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.Clock) */ {
 public:
  Clock();
  virtual ~Clock();

  Clock(const Clock& from);

  inline Clock& operator=(const Clock& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Clock& default_instance();

  void Swap(Clock* other);

  // implements Message ----------------------------------------------

  inline Clock* New() const { return New(NULL); }

  Clock* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Clock& from);
  void MergeFrom(const Clock& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Clock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ignition.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::ignition::msgs::Header& header() const;
  ::ignition::msgs::Header* mutable_header();
  ::ignition::msgs::Header* release_header();
  void set_allocated_header(::ignition::msgs::Header* header);

  // optional .ignition.msgs.Time system = 2;
  bool has_system() const;
  void clear_system();
  static const int kSystemFieldNumber = 2;
  const ::ignition::msgs::Time& system() const;
  ::ignition::msgs::Time* mutable_system();
  ::ignition::msgs::Time* release_system();
  void set_allocated_system(::ignition::msgs::Time* system);

  // optional .ignition.msgs.Time real = 3;
  bool has_real() const;
  void clear_real();
  static const int kRealFieldNumber = 3;
  const ::ignition::msgs::Time& real() const;
  ::ignition::msgs::Time* mutable_real();
  ::ignition::msgs::Time* release_real();
  void set_allocated_real(::ignition::msgs::Time* real);

  // optional .ignition.msgs.Time sim = 4;
  bool has_sim() const;
  void clear_sim();
  static const int kSimFieldNumber = 4;
  const ::ignition::msgs::Time& sim() const;
  ::ignition::msgs::Time* mutable_sim();
  ::ignition::msgs::Time* release_sim();
  void set_allocated_sim(::ignition::msgs::Time* sim);

  // @@protoc_insertion_point(class_scope:ignition.msgs.Clock)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_system();
  inline void clear_has_system();
  inline void set_has_real();
  inline void clear_has_real();
  inline void set_has_sim();
  inline void clear_has_sim();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ignition::msgs::Header* header_;
  ::ignition::msgs::Time* system_;
  ::ignition::msgs::Time* real_;
  ::ignition::msgs::Time* sim_;
  friend void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fclock_2eproto();
  friend void protobuf_AssignDesc_ignition_2fmsgs_2fclock_2eproto();
  friend void protobuf_ShutdownFile_ignition_2fmsgs_2fclock_2eproto();

  void InitAsDefaultInstance();
  static Clock* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Clock

// optional .ignition.msgs.Header header = 1;
inline bool Clock::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Clock::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Clock::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Clock::clear_header() {
  if (header_ != NULL) header_->::ignition::msgs::Header::Clear();
  clear_has_header();
}
inline const ::ignition::msgs::Header& Clock::header() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Clock.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ignition::msgs::Header* Clock::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::ignition::msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Clock.header)
  return header_;
}
inline ::ignition::msgs::Header* Clock::release_header() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Clock.header)
  clear_has_header();
  ::ignition::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Clock::set_allocated_header(::ignition::msgs::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Clock.header)
}

// optional .ignition.msgs.Time system = 2;
inline bool Clock::has_system() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Clock::set_has_system() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Clock::clear_has_system() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Clock::clear_system() {
  if (system_ != NULL) system_->::ignition::msgs::Time::Clear();
  clear_has_system();
}
inline const ::ignition::msgs::Time& Clock::system() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Clock.system)
  return system_ != NULL ? *system_ : *default_instance_->system_;
}
inline ::ignition::msgs::Time* Clock::mutable_system() {
  set_has_system();
  if (system_ == NULL) {
    system_ = new ::ignition::msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Clock.system)
  return system_;
}
inline ::ignition::msgs::Time* Clock::release_system() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Clock.system)
  clear_has_system();
  ::ignition::msgs::Time* temp = system_;
  system_ = NULL;
  return temp;
}
inline void Clock::set_allocated_system(::ignition::msgs::Time* system) {
  delete system_;
  system_ = system;
  if (system) {
    set_has_system();
  } else {
    clear_has_system();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Clock.system)
}

// optional .ignition.msgs.Time real = 3;
inline bool Clock::has_real() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Clock::set_has_real() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Clock::clear_has_real() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Clock::clear_real() {
  if (real_ != NULL) real_->::ignition::msgs::Time::Clear();
  clear_has_real();
}
inline const ::ignition::msgs::Time& Clock::real() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Clock.real)
  return real_ != NULL ? *real_ : *default_instance_->real_;
}
inline ::ignition::msgs::Time* Clock::mutable_real() {
  set_has_real();
  if (real_ == NULL) {
    real_ = new ::ignition::msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Clock.real)
  return real_;
}
inline ::ignition::msgs::Time* Clock::release_real() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Clock.real)
  clear_has_real();
  ::ignition::msgs::Time* temp = real_;
  real_ = NULL;
  return temp;
}
inline void Clock::set_allocated_real(::ignition::msgs::Time* real) {
  delete real_;
  real_ = real;
  if (real) {
    set_has_real();
  } else {
    clear_has_real();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Clock.real)
}

// optional .ignition.msgs.Time sim = 4;
inline bool Clock::has_sim() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Clock::set_has_sim() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Clock::clear_has_sim() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Clock::clear_sim() {
  if (sim_ != NULL) sim_->::ignition::msgs::Time::Clear();
  clear_has_sim();
}
inline const ::ignition::msgs::Time& Clock::sim() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Clock.sim)
  return sim_ != NULL ? *sim_ : *default_instance_->sim_;
}
inline ::ignition::msgs::Time* Clock::mutable_sim() {
  set_has_sim();
  if (sim_ == NULL) {
    sim_ = new ::ignition::msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Clock.sim)
  return sim_;
}
inline ::ignition::msgs::Time* Clock::release_sim() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Clock.sim)
  clear_has_sim();
  ::ignition::msgs::Time* temp = sim_;
  sim_ = NULL;
  return temp;
}
inline void Clock::set_allocated_sim(::ignition::msgs::Time* sim) {
  delete sim_;
  sim_ = sim;
  if (sim) {
    set_has_sim();
  } else {
    clear_has_sim();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Clock.sim)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef std::unique_ptr<Clock> ClockUniquePtr;
typedef std::unique_ptr<const Clock> ConstClockUniquePtr;
typedef std::shared_ptr<Clock> ClockSharedPtr;
typedef std::shared_ptr<const Clock> ConstClockSharedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

#ifdef _MSC_VER
#pragma warning(pop)
#endif
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ignition_2fmsgs_2fclock_2eproto__INCLUDED
