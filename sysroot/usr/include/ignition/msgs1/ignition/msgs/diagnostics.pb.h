// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ignition/msgs/diagnostics.proto

#ifndef PROTOBUF_ignition_2fmsgs_2fdiagnostics_2eproto__INCLUDED
#define PROTOBUF_ignition_2fmsgs_2fdiagnostics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/time.pb.h"
#include "ignition/msgs/header.pb.h"
#ifndef _MSC_VER
#pragma GCC system_header
#else
#pragma warning(push)
#pragma warning(disable: 4244 4267 4100 4244 4512 4127 4068 4275 4251)
#endif
#include <memory>
#include <ignition/msgs/Export.hh>
// @@protoc_insertion_point(includes)

namespace ignition {
namespace msgs {

// Internal implementation detail -- do not call these.
void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fdiagnostics_2eproto();
void protobuf_AssignDesc_ignition_2fmsgs_2fdiagnostics_2eproto();
void protobuf_ShutdownFile_ignition_2fmsgs_2fdiagnostics_2eproto();

class Diagnostics;
class Diagnostics_DiagTime;

// ===================================================================

class IGNITION_MSGS_VISIBLE Diagnostics_DiagTime : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.Diagnostics.DiagTime) */ {
 public:
  Diagnostics_DiagTime();
  virtual ~Diagnostics_DiagTime();

  Diagnostics_DiagTime(const Diagnostics_DiagTime& from);

  inline Diagnostics_DiagTime& operator=(const Diagnostics_DiagTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Diagnostics_DiagTime& default_instance();

  void Swap(Diagnostics_DiagTime* other);

  // implements Message ----------------------------------------------

  inline Diagnostics_DiagTime* New() const { return New(NULL); }

  Diagnostics_DiagTime* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Diagnostics_DiagTime& from);
  void MergeFrom(const Diagnostics_DiagTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Diagnostics_DiagTime* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1 [default = ""];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .ignition.msgs.Time elapsed = 2;
  bool has_elapsed() const;
  void clear_elapsed();
  static const int kElapsedFieldNumber = 2;
  const ::ignition::msgs::Time& elapsed() const;
  ::ignition::msgs::Time* mutable_elapsed();
  ::ignition::msgs::Time* release_elapsed();
  void set_allocated_elapsed(::ignition::msgs::Time* elapsed);

  // optional .ignition.msgs.Time wall = 3;
  bool has_wall() const;
  void clear_wall();
  static const int kWallFieldNumber = 3;
  const ::ignition::msgs::Time& wall() const;
  ::ignition::msgs::Time* mutable_wall();
  ::ignition::msgs::Time* release_wall();
  void set_allocated_wall(::ignition::msgs::Time* wall);

  // @@protoc_insertion_point(class_scope:ignition.msgs.Diagnostics.DiagTime)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_elapsed();
  inline void clear_has_elapsed();
  inline void set_has_wall();
  inline void clear_has_wall();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::ignition::msgs::Time* elapsed_;
  ::ignition::msgs::Time* wall_;
  friend void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fdiagnostics_2eproto();
  friend void protobuf_AssignDesc_ignition_2fmsgs_2fdiagnostics_2eproto();
  friend void protobuf_ShutdownFile_ignition_2fmsgs_2fdiagnostics_2eproto();

  void InitAsDefaultInstance();
  static Diagnostics_DiagTime* default_instance_;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE Diagnostics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.Diagnostics) */ {
 public:
  Diagnostics();
  virtual ~Diagnostics();

  Diagnostics(const Diagnostics& from);

  inline Diagnostics& operator=(const Diagnostics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Diagnostics& default_instance();

  void Swap(Diagnostics* other);

  // implements Message ----------------------------------------------

  inline Diagnostics* New() const { return New(NULL); }

  Diagnostics* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Diagnostics& from);
  void MergeFrom(const Diagnostics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Diagnostics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Diagnostics_DiagTime DiagTime;

  // accessors -------------------------------------------------------

  // optional .ignition.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::ignition::msgs::Header& header() const;
  ::ignition::msgs::Header* mutable_header();
  ::ignition::msgs::Header* release_header();
  void set_allocated_header(::ignition::msgs::Header* header);

  // repeated .ignition.msgs.Diagnostics.DiagTime time = 2;
  int time_size() const;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  const ::ignition::msgs::Diagnostics_DiagTime& time(int index) const;
  ::ignition::msgs::Diagnostics_DiagTime* mutable_time(int index);
  ::ignition::msgs::Diagnostics_DiagTime* add_time();
  ::google::protobuf::RepeatedPtrField< ::ignition::msgs::Diagnostics_DiagTime >*
      mutable_time();
  const ::google::protobuf::RepeatedPtrField< ::ignition::msgs::Diagnostics_DiagTime >&
      time() const;

  // optional .ignition.msgs.Time real_time = 3;
  bool has_real_time() const;
  void clear_real_time();
  static const int kRealTimeFieldNumber = 3;
  const ::ignition::msgs::Time& real_time() const;
  ::ignition::msgs::Time* mutable_real_time();
  ::ignition::msgs::Time* release_real_time();
  void set_allocated_real_time(::ignition::msgs::Time* real_time);

  // optional .ignition.msgs.Time sim_time = 4;
  bool has_sim_time() const;
  void clear_sim_time();
  static const int kSimTimeFieldNumber = 4;
  const ::ignition::msgs::Time& sim_time() const;
  ::ignition::msgs::Time* mutable_sim_time();
  ::ignition::msgs::Time* release_sim_time();
  void set_allocated_sim_time(::ignition::msgs::Time* sim_time);

  // optional double real_time_factor = 5 [default = 0];
  bool has_real_time_factor() const;
  void clear_real_time_factor();
  static const int kRealTimeFactorFieldNumber = 5;
  double real_time_factor() const;
  void set_real_time_factor(double value);

  // @@protoc_insertion_point(class_scope:ignition.msgs.Diagnostics)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_real_time();
  inline void clear_has_real_time();
  inline void set_has_sim_time();
  inline void clear_has_sim_time();
  inline void set_has_real_time_factor();
  inline void clear_has_real_time_factor();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ignition::msgs::Header* header_;
  ::google::protobuf::RepeatedPtrField< ::ignition::msgs::Diagnostics_DiagTime > time_;
  ::ignition::msgs::Time* real_time_;
  ::ignition::msgs::Time* sim_time_;
  double real_time_factor_;
  friend void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fdiagnostics_2eproto();
  friend void protobuf_AssignDesc_ignition_2fmsgs_2fdiagnostics_2eproto();
  friend void protobuf_ShutdownFile_ignition_2fmsgs_2fdiagnostics_2eproto();

  void InitAsDefaultInstance();
  static Diagnostics* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Diagnostics_DiagTime

// optional string name = 1 [default = ""];
inline bool Diagnostics_DiagTime::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Diagnostics_DiagTime::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Diagnostics_DiagTime::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Diagnostics_DiagTime::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Diagnostics_DiagTime::name() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Diagnostics.DiagTime.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Diagnostics_DiagTime::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.Diagnostics.DiagTime.name)
}
inline void Diagnostics_DiagTime::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.Diagnostics.DiagTime.name)
}
inline void Diagnostics_DiagTime::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.Diagnostics.DiagTime.name)
}
inline ::std::string* Diagnostics_DiagTime::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Diagnostics.DiagTime.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Diagnostics_DiagTime::release_name() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Diagnostics.DiagTime.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Diagnostics_DiagTime::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Diagnostics.DiagTime.name)
}

// optional .ignition.msgs.Time elapsed = 2;
inline bool Diagnostics_DiagTime::has_elapsed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Diagnostics_DiagTime::set_has_elapsed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Diagnostics_DiagTime::clear_has_elapsed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Diagnostics_DiagTime::clear_elapsed() {
  if (elapsed_ != NULL) elapsed_->::ignition::msgs::Time::Clear();
  clear_has_elapsed();
}
inline const ::ignition::msgs::Time& Diagnostics_DiagTime::elapsed() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Diagnostics.DiagTime.elapsed)
  return elapsed_ != NULL ? *elapsed_ : *default_instance_->elapsed_;
}
inline ::ignition::msgs::Time* Diagnostics_DiagTime::mutable_elapsed() {
  set_has_elapsed();
  if (elapsed_ == NULL) {
    elapsed_ = new ::ignition::msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Diagnostics.DiagTime.elapsed)
  return elapsed_;
}
inline ::ignition::msgs::Time* Diagnostics_DiagTime::release_elapsed() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Diagnostics.DiagTime.elapsed)
  clear_has_elapsed();
  ::ignition::msgs::Time* temp = elapsed_;
  elapsed_ = NULL;
  return temp;
}
inline void Diagnostics_DiagTime::set_allocated_elapsed(::ignition::msgs::Time* elapsed) {
  delete elapsed_;
  elapsed_ = elapsed;
  if (elapsed) {
    set_has_elapsed();
  } else {
    clear_has_elapsed();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Diagnostics.DiagTime.elapsed)
}

// optional .ignition.msgs.Time wall = 3;
inline bool Diagnostics_DiagTime::has_wall() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Diagnostics_DiagTime::set_has_wall() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Diagnostics_DiagTime::clear_has_wall() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Diagnostics_DiagTime::clear_wall() {
  if (wall_ != NULL) wall_->::ignition::msgs::Time::Clear();
  clear_has_wall();
}
inline const ::ignition::msgs::Time& Diagnostics_DiagTime::wall() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Diagnostics.DiagTime.wall)
  return wall_ != NULL ? *wall_ : *default_instance_->wall_;
}
inline ::ignition::msgs::Time* Diagnostics_DiagTime::mutable_wall() {
  set_has_wall();
  if (wall_ == NULL) {
    wall_ = new ::ignition::msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Diagnostics.DiagTime.wall)
  return wall_;
}
inline ::ignition::msgs::Time* Diagnostics_DiagTime::release_wall() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Diagnostics.DiagTime.wall)
  clear_has_wall();
  ::ignition::msgs::Time* temp = wall_;
  wall_ = NULL;
  return temp;
}
inline void Diagnostics_DiagTime::set_allocated_wall(::ignition::msgs::Time* wall) {
  delete wall_;
  wall_ = wall;
  if (wall) {
    set_has_wall();
  } else {
    clear_has_wall();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Diagnostics.DiagTime.wall)
}

// -------------------------------------------------------------------

// Diagnostics

// optional .ignition.msgs.Header header = 1;
inline bool Diagnostics::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Diagnostics::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Diagnostics::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Diagnostics::clear_header() {
  if (header_ != NULL) header_->::ignition::msgs::Header::Clear();
  clear_has_header();
}
inline const ::ignition::msgs::Header& Diagnostics::header() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Diagnostics.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ignition::msgs::Header* Diagnostics::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::ignition::msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Diagnostics.header)
  return header_;
}
inline ::ignition::msgs::Header* Diagnostics::release_header() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Diagnostics.header)
  clear_has_header();
  ::ignition::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Diagnostics::set_allocated_header(::ignition::msgs::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Diagnostics.header)
}

// repeated .ignition.msgs.Diagnostics.DiagTime time = 2;
inline int Diagnostics::time_size() const {
  return time_.size();
}
inline void Diagnostics::clear_time() {
  time_.Clear();
}
inline const ::ignition::msgs::Diagnostics_DiagTime& Diagnostics::time(int index) const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Diagnostics.time)
  return time_.Get(index);
}
inline ::ignition::msgs::Diagnostics_DiagTime* Diagnostics::mutable_time(int index) {
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Diagnostics.time)
  return time_.Mutable(index);
}
inline ::ignition::msgs::Diagnostics_DiagTime* Diagnostics::add_time() {
  // @@protoc_insertion_point(field_add:ignition.msgs.Diagnostics.time)
  return time_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ignition::msgs::Diagnostics_DiagTime >*
Diagnostics::mutable_time() {
  // @@protoc_insertion_point(field_mutable_list:ignition.msgs.Diagnostics.time)
  return &time_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ignition::msgs::Diagnostics_DiagTime >&
Diagnostics::time() const {
  // @@protoc_insertion_point(field_list:ignition.msgs.Diagnostics.time)
  return time_;
}

// optional .ignition.msgs.Time real_time = 3;
inline bool Diagnostics::has_real_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Diagnostics::set_has_real_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Diagnostics::clear_has_real_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Diagnostics::clear_real_time() {
  if (real_time_ != NULL) real_time_->::ignition::msgs::Time::Clear();
  clear_has_real_time();
}
inline const ::ignition::msgs::Time& Diagnostics::real_time() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Diagnostics.real_time)
  return real_time_ != NULL ? *real_time_ : *default_instance_->real_time_;
}
inline ::ignition::msgs::Time* Diagnostics::mutable_real_time() {
  set_has_real_time();
  if (real_time_ == NULL) {
    real_time_ = new ::ignition::msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Diagnostics.real_time)
  return real_time_;
}
inline ::ignition::msgs::Time* Diagnostics::release_real_time() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Diagnostics.real_time)
  clear_has_real_time();
  ::ignition::msgs::Time* temp = real_time_;
  real_time_ = NULL;
  return temp;
}
inline void Diagnostics::set_allocated_real_time(::ignition::msgs::Time* real_time) {
  delete real_time_;
  real_time_ = real_time;
  if (real_time) {
    set_has_real_time();
  } else {
    clear_has_real_time();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Diagnostics.real_time)
}

// optional .ignition.msgs.Time sim_time = 4;
inline bool Diagnostics::has_sim_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Diagnostics::set_has_sim_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Diagnostics::clear_has_sim_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Diagnostics::clear_sim_time() {
  if (sim_time_ != NULL) sim_time_->::ignition::msgs::Time::Clear();
  clear_has_sim_time();
}
inline const ::ignition::msgs::Time& Diagnostics::sim_time() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Diagnostics.sim_time)
  return sim_time_ != NULL ? *sim_time_ : *default_instance_->sim_time_;
}
inline ::ignition::msgs::Time* Diagnostics::mutable_sim_time() {
  set_has_sim_time();
  if (sim_time_ == NULL) {
    sim_time_ = new ::ignition::msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Diagnostics.sim_time)
  return sim_time_;
}
inline ::ignition::msgs::Time* Diagnostics::release_sim_time() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Diagnostics.sim_time)
  clear_has_sim_time();
  ::ignition::msgs::Time* temp = sim_time_;
  sim_time_ = NULL;
  return temp;
}
inline void Diagnostics::set_allocated_sim_time(::ignition::msgs::Time* sim_time) {
  delete sim_time_;
  sim_time_ = sim_time;
  if (sim_time) {
    set_has_sim_time();
  } else {
    clear_has_sim_time();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Diagnostics.sim_time)
}

// optional double real_time_factor = 5 [default = 0];
inline bool Diagnostics::has_real_time_factor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Diagnostics::set_has_real_time_factor() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Diagnostics::clear_has_real_time_factor() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Diagnostics::clear_real_time_factor() {
  real_time_factor_ = 0;
  clear_has_real_time_factor();
}
inline double Diagnostics::real_time_factor() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Diagnostics.real_time_factor)
  return real_time_factor_;
}
inline void Diagnostics::set_real_time_factor(double value) {
  set_has_real_time_factor();
  real_time_factor_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Diagnostics.real_time_factor)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


typedef std::unique_ptr<Diagnostics> DiagnosticsUniquePtr;
typedef std::unique_ptr<const Diagnostics> ConstDiagnosticsUniquePtr;
typedef std::shared_ptr<Diagnostics> DiagnosticsSharedPtr;
typedef std::shared_ptr<const Diagnostics> ConstDiagnosticsSharedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

#ifdef _MSC_VER
#pragma warning(pop)
#endif
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ignition_2fmsgs_2fdiagnostics_2eproto__INCLUDED
