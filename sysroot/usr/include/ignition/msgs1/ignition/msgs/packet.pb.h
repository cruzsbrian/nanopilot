// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ignition/msgs/packet.proto

#ifndef PROTOBUF_ignition_2fmsgs_2fpacket_2eproto__INCLUDED
#define PROTOBUF_ignition_2fmsgs_2fpacket_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/pose.pb.h"
#include "ignition/msgs/image.pb.h"
#include "ignition/msgs/stringmsg_v.pb.h"
#include "ignition/msgs/web_request.pb.h"
#include "ignition/msgs/cmd_vel2d.pb.h"
#include "ignition/msgs/double_v.pb.h"
#ifndef _MSC_VER
#pragma GCC system_header
#else
#pragma warning(push)
#pragma warning(disable: 4244 4267 4100 4244 4512 4127 4068 4275 4251)
#endif
#include <memory>
#include <ignition/msgs/Export.hh>
// @@protoc_insertion_point(includes)

namespace ignition {
namespace msgs {

// Internal implementation detail -- do not call these.
void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fpacket_2eproto();
void protobuf_AssignDesc_ignition_2fmsgs_2fpacket_2eproto();
void protobuf_ShutdownFile_ignition_2fmsgs_2fpacket_2eproto();

class Packet;

// ===================================================================

class IGNITION_MSGS_VISIBLE Packet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.Packet) */ {
 public:
  Packet();
  virtual ~Packet();

  Packet(const Packet& from);

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Packet& default_instance();

  enum ContentCase {
    kCmdVel2D = 3,
    kImage = 4,
    kStringMsgV = 5,
    kWebRequest = 6,
    kPose = 7,
    kDoublev = 8,
    CONTENT_NOT_SET = 0,
  };

  void Swap(Packet* other);

  // implements Message ----------------------------------------------

  inline Packet* New() const { return New(NULL); }

  Packet* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Packet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string topic = 1;
  bool has_topic() const;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // optional string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional .ignition.msgs.CmdVel2D cmd_vel2d = 3;
  bool has_cmd_vel2d() const;
  void clear_cmd_vel2d();
  static const int kCmdVel2DFieldNumber = 3;
  const ::ignition::msgs::CmdVel2D& cmd_vel2d() const;
  ::ignition::msgs::CmdVel2D* mutable_cmd_vel2d();
  ::ignition::msgs::CmdVel2D* release_cmd_vel2d();
  void set_allocated_cmd_vel2d(::ignition::msgs::CmdVel2D* cmd_vel2d);

  // optional .ignition.msgs.Image image = 4;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 4;
  const ::ignition::msgs::Image& image() const;
  ::ignition::msgs::Image* mutable_image();
  ::ignition::msgs::Image* release_image();
  void set_allocated_image(::ignition::msgs::Image* image);

  // optional .ignition.msgs.StringMsg_V string_msg_v = 5;
  bool has_string_msg_v() const;
  void clear_string_msg_v();
  static const int kStringMsgVFieldNumber = 5;
  const ::ignition::msgs::StringMsg_V& string_msg_v() const;
  ::ignition::msgs::StringMsg_V* mutable_string_msg_v();
  ::ignition::msgs::StringMsg_V* release_string_msg_v();
  void set_allocated_string_msg_v(::ignition::msgs::StringMsg_V* string_msg_v);

  // optional .ignition.msgs.WebRequest web_request = 6;
  bool has_web_request() const;
  void clear_web_request();
  static const int kWebRequestFieldNumber = 6;
  const ::ignition::msgs::WebRequest& web_request() const;
  ::ignition::msgs::WebRequest* mutable_web_request();
  ::ignition::msgs::WebRequest* release_web_request();
  void set_allocated_web_request(::ignition::msgs::WebRequest* web_request);

  // optional .ignition.msgs.Pose pose = 7;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 7;
  const ::ignition::msgs::Pose& pose() const;
  ::ignition::msgs::Pose* mutable_pose();
  ::ignition::msgs::Pose* release_pose();
  void set_allocated_pose(::ignition::msgs::Pose* pose);

  // optional .ignition.msgs.Double_V doublev = 8;
  bool has_doublev() const;
  void clear_doublev();
  static const int kDoublevFieldNumber = 8;
  const ::ignition::msgs::Double_V& doublev() const;
  ::ignition::msgs::Double_V* mutable_doublev();
  ::ignition::msgs::Double_V* release_doublev();
  void set_allocated_doublev(::ignition::msgs::Double_V* doublev);

  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:ignition.msgs.Packet)
 private:
  inline void set_has_topic();
  inline void clear_has_topic();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_cmd_vel2d();
  inline void set_has_image();
  inline void set_has_string_msg_v();
  inline void set_has_web_request();
  inline void set_has_pose();
  inline void set_has_doublev();

  inline bool has_content() const;
  void clear_content();
  inline void clear_has_content();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  union ContentUnion {
    ContentUnion() {}
    ::ignition::msgs::CmdVel2D* cmd_vel2d_;
    ::ignition::msgs::Image* image_;
    ::ignition::msgs::StringMsg_V* string_msg_v_;
    ::ignition::msgs::WebRequest* web_request_;
    ::ignition::msgs::Pose* pose_;
    ::ignition::msgs::Double_V* doublev_;
  } content_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fpacket_2eproto();
  friend void protobuf_AssignDesc_ignition_2fmsgs_2fpacket_2eproto();
  friend void protobuf_ShutdownFile_ignition_2fmsgs_2fpacket_2eproto();

  void InitAsDefaultInstance();
  static Packet* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Packet

// optional string topic = 1;
inline bool Packet::has_topic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Packet::set_has_topic() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Packet::clear_has_topic() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Packet::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_topic();
}
inline const ::std::string& Packet::topic() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Packet.topic)
  return topic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Packet::set_topic(const ::std::string& value) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.Packet.topic)
}
inline void Packet::set_topic(const char* value) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.Packet.topic)
}
inline void Packet::set_topic(const char* value, size_t size) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.Packet.topic)
}
inline ::std::string* Packet::mutable_topic() {
  set_has_topic();
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Packet.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Packet::release_topic() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Packet.topic)
  clear_has_topic();
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Packet::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    set_has_topic();
  } else {
    clear_has_topic();
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Packet.topic)
}

// optional string type = 2;
inline bool Packet::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Packet::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Packet::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Packet::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& Packet::type() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Packet.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Packet::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.Packet.type)
}
inline void Packet::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.Packet.type)
}
inline void Packet::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.Packet.type)
}
inline ::std::string* Packet::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Packet.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Packet::release_type() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Packet.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Packet::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Packet.type)
}

// optional .ignition.msgs.CmdVel2D cmd_vel2d = 3;
inline bool Packet::has_cmd_vel2d() const {
  return content_case() == kCmdVel2D;
}
inline void Packet::set_has_cmd_vel2d() {
  _oneof_case_[0] = kCmdVel2D;
}
inline void Packet::clear_cmd_vel2d() {
  if (has_cmd_vel2d()) {
    delete content_.cmd_vel2d_;
    clear_has_content();
  }
}
inline  const ::ignition::msgs::CmdVel2D& Packet::cmd_vel2d() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Packet.cmd_vel2d)
  return has_cmd_vel2d()
      ? *content_.cmd_vel2d_
      : ::ignition::msgs::CmdVel2D::default_instance();
}
inline ::ignition::msgs::CmdVel2D* Packet::mutable_cmd_vel2d() {
  if (!has_cmd_vel2d()) {
    clear_content();
    set_has_cmd_vel2d();
    content_.cmd_vel2d_ = new ::ignition::msgs::CmdVel2D;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Packet.cmd_vel2d)
  return content_.cmd_vel2d_;
}
inline ::ignition::msgs::CmdVel2D* Packet::release_cmd_vel2d() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Packet.cmd_vel2d)
  if (has_cmd_vel2d()) {
    clear_has_content();
    ::ignition::msgs::CmdVel2D* temp = content_.cmd_vel2d_;
    content_.cmd_vel2d_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Packet::set_allocated_cmd_vel2d(::ignition::msgs::CmdVel2D* cmd_vel2d) {
  clear_content();
  if (cmd_vel2d) {
    set_has_cmd_vel2d();
    content_.cmd_vel2d_ = cmd_vel2d;
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Packet.cmd_vel2d)
}

// optional .ignition.msgs.Image image = 4;
inline bool Packet::has_image() const {
  return content_case() == kImage;
}
inline void Packet::set_has_image() {
  _oneof_case_[0] = kImage;
}
inline void Packet::clear_image() {
  if (has_image()) {
    delete content_.image_;
    clear_has_content();
  }
}
inline  const ::ignition::msgs::Image& Packet::image() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Packet.image)
  return has_image()
      ? *content_.image_
      : ::ignition::msgs::Image::default_instance();
}
inline ::ignition::msgs::Image* Packet::mutable_image() {
  if (!has_image()) {
    clear_content();
    set_has_image();
    content_.image_ = new ::ignition::msgs::Image;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Packet.image)
  return content_.image_;
}
inline ::ignition::msgs::Image* Packet::release_image() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Packet.image)
  if (has_image()) {
    clear_has_content();
    ::ignition::msgs::Image* temp = content_.image_;
    content_.image_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Packet::set_allocated_image(::ignition::msgs::Image* image) {
  clear_content();
  if (image) {
    set_has_image();
    content_.image_ = image;
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Packet.image)
}

// optional .ignition.msgs.StringMsg_V string_msg_v = 5;
inline bool Packet::has_string_msg_v() const {
  return content_case() == kStringMsgV;
}
inline void Packet::set_has_string_msg_v() {
  _oneof_case_[0] = kStringMsgV;
}
inline void Packet::clear_string_msg_v() {
  if (has_string_msg_v()) {
    delete content_.string_msg_v_;
    clear_has_content();
  }
}
inline  const ::ignition::msgs::StringMsg_V& Packet::string_msg_v() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Packet.string_msg_v)
  return has_string_msg_v()
      ? *content_.string_msg_v_
      : ::ignition::msgs::StringMsg_V::default_instance();
}
inline ::ignition::msgs::StringMsg_V* Packet::mutable_string_msg_v() {
  if (!has_string_msg_v()) {
    clear_content();
    set_has_string_msg_v();
    content_.string_msg_v_ = new ::ignition::msgs::StringMsg_V;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Packet.string_msg_v)
  return content_.string_msg_v_;
}
inline ::ignition::msgs::StringMsg_V* Packet::release_string_msg_v() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Packet.string_msg_v)
  if (has_string_msg_v()) {
    clear_has_content();
    ::ignition::msgs::StringMsg_V* temp = content_.string_msg_v_;
    content_.string_msg_v_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Packet::set_allocated_string_msg_v(::ignition::msgs::StringMsg_V* string_msg_v) {
  clear_content();
  if (string_msg_v) {
    set_has_string_msg_v();
    content_.string_msg_v_ = string_msg_v;
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Packet.string_msg_v)
}

// optional .ignition.msgs.WebRequest web_request = 6;
inline bool Packet::has_web_request() const {
  return content_case() == kWebRequest;
}
inline void Packet::set_has_web_request() {
  _oneof_case_[0] = kWebRequest;
}
inline void Packet::clear_web_request() {
  if (has_web_request()) {
    delete content_.web_request_;
    clear_has_content();
  }
}
inline  const ::ignition::msgs::WebRequest& Packet::web_request() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Packet.web_request)
  return has_web_request()
      ? *content_.web_request_
      : ::ignition::msgs::WebRequest::default_instance();
}
inline ::ignition::msgs::WebRequest* Packet::mutable_web_request() {
  if (!has_web_request()) {
    clear_content();
    set_has_web_request();
    content_.web_request_ = new ::ignition::msgs::WebRequest;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Packet.web_request)
  return content_.web_request_;
}
inline ::ignition::msgs::WebRequest* Packet::release_web_request() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Packet.web_request)
  if (has_web_request()) {
    clear_has_content();
    ::ignition::msgs::WebRequest* temp = content_.web_request_;
    content_.web_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Packet::set_allocated_web_request(::ignition::msgs::WebRequest* web_request) {
  clear_content();
  if (web_request) {
    set_has_web_request();
    content_.web_request_ = web_request;
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Packet.web_request)
}

// optional .ignition.msgs.Pose pose = 7;
inline bool Packet::has_pose() const {
  return content_case() == kPose;
}
inline void Packet::set_has_pose() {
  _oneof_case_[0] = kPose;
}
inline void Packet::clear_pose() {
  if (has_pose()) {
    delete content_.pose_;
    clear_has_content();
  }
}
inline  const ::ignition::msgs::Pose& Packet::pose() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Packet.pose)
  return has_pose()
      ? *content_.pose_
      : ::ignition::msgs::Pose::default_instance();
}
inline ::ignition::msgs::Pose* Packet::mutable_pose() {
  if (!has_pose()) {
    clear_content();
    set_has_pose();
    content_.pose_ = new ::ignition::msgs::Pose;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Packet.pose)
  return content_.pose_;
}
inline ::ignition::msgs::Pose* Packet::release_pose() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Packet.pose)
  if (has_pose()) {
    clear_has_content();
    ::ignition::msgs::Pose* temp = content_.pose_;
    content_.pose_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Packet::set_allocated_pose(::ignition::msgs::Pose* pose) {
  clear_content();
  if (pose) {
    set_has_pose();
    content_.pose_ = pose;
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Packet.pose)
}

// optional .ignition.msgs.Double_V doublev = 8;
inline bool Packet::has_doublev() const {
  return content_case() == kDoublev;
}
inline void Packet::set_has_doublev() {
  _oneof_case_[0] = kDoublev;
}
inline void Packet::clear_doublev() {
  if (has_doublev()) {
    delete content_.doublev_;
    clear_has_content();
  }
}
inline  const ::ignition::msgs::Double_V& Packet::doublev() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Packet.doublev)
  return has_doublev()
      ? *content_.doublev_
      : ::ignition::msgs::Double_V::default_instance();
}
inline ::ignition::msgs::Double_V* Packet::mutable_doublev() {
  if (!has_doublev()) {
    clear_content();
    set_has_doublev();
    content_.doublev_ = new ::ignition::msgs::Double_V;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Packet.doublev)
  return content_.doublev_;
}
inline ::ignition::msgs::Double_V* Packet::release_doublev() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Packet.doublev)
  if (has_doublev()) {
    clear_has_content();
    ::ignition::msgs::Double_V* temp = content_.doublev_;
    content_.doublev_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Packet::set_allocated_doublev(::ignition::msgs::Double_V* doublev) {
  clear_content();
  if (doublev) {
    set_has_doublev();
    content_.doublev_ = doublev;
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Packet.doublev)
}

inline bool Packet::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void Packet::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline Packet::ContentCase Packet::content_case() const {
  return Packet::ContentCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef std::unique_ptr<Packet> PacketUniquePtr;
typedef std::unique_ptr<const Packet> ConstPacketUniquePtr;
typedef std::shared_ptr<Packet> PacketSharedPtr;
typedef std::shared_ptr<const Packet> ConstPacketSharedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

#ifdef _MSC_VER
#pragma warning(pop)
#endif
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ignition_2fmsgs_2fpacket_2eproto__INCLUDED
