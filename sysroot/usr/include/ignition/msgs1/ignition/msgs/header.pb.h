// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ignition/msgs/header.proto

#ifndef PROTOBUF_ignition_2fmsgs_2fheader_2eproto__INCLUDED
#define PROTOBUF_ignition_2fmsgs_2fheader_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/time.pb.h"
#ifndef _MSC_VER
#pragma GCC system_header
#else
#pragma warning(push)
#pragma warning(disable: 4244 4267 4100 4244 4512 4127 4068 4275 4251)
#endif
#include <memory>
#include <ignition/msgs/Export.hh>
// @@protoc_insertion_point(includes)

namespace ignition {
namespace msgs {

// Internal implementation detail -- do not call these.
void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fheader_2eproto();
void protobuf_AssignDesc_ignition_2fmsgs_2fheader_2eproto();
void protobuf_ShutdownFile_ignition_2fmsgs_2fheader_2eproto();

class Header;
class Header_Map;

// ===================================================================

class IGNITION_MSGS_VISIBLE Header_Map : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.Header.Map) */ {
 public:
  Header_Map();
  virtual ~Header_Map();

  Header_Map(const Header_Map& from);

  inline Header_Map& operator=(const Header_Map& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header_Map& default_instance();

  void Swap(Header_Map* other);

  // implements Message ----------------------------------------------

  inline Header_Map* New() const { return New(NULL); }

  Header_Map* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header_Map& from);
  void MergeFrom(const Header_Map& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Header_Map* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // repeated string value = 2;
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value(int index) const;
  ::std::string* mutable_value(int index);
  void set_value(int index, const ::std::string& value);
  void set_value(int index, const char* value);
  void set_value(int index, const char* value, size_t size);
  ::std::string* add_value();
  void add_value(const ::std::string& value);
  void add_value(const char* value);
  void add_value(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& value() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_value();

  // @@protoc_insertion_point(class_scope:ignition.msgs.Header.Map)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::RepeatedPtrField< ::std::string> value_;
  friend void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fheader_2eproto();
  friend void protobuf_AssignDesc_ignition_2fmsgs_2fheader_2eproto();
  friend void protobuf_ShutdownFile_ignition_2fmsgs_2fheader_2eproto();

  void InitAsDefaultInstance();
  static Header_Map* default_instance_;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  void Swap(Header* other);

  // implements Message ----------------------------------------------

  inline Header* New() const { return New(NULL); }

  Header* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Header_Map Map;

  // accessors -------------------------------------------------------

  // optional .ignition.msgs.Time stamp = 1;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 1;
  const ::ignition::msgs::Time& stamp() const;
  ::ignition::msgs::Time* mutable_stamp();
  ::ignition::msgs::Time* release_stamp();
  void set_allocated_stamp(::ignition::msgs::Time* stamp);

  // repeated .ignition.msgs.Header.Map data = 2;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::ignition::msgs::Header_Map& data(int index) const;
  ::ignition::msgs::Header_Map* mutable_data(int index);
  ::ignition::msgs::Header_Map* add_data();
  ::google::protobuf::RepeatedPtrField< ::ignition::msgs::Header_Map >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::ignition::msgs::Header_Map >&
      data() const;

  // @@protoc_insertion_point(class_scope:ignition.msgs.Header)
 private:
  inline void set_has_stamp();
  inline void clear_has_stamp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ignition::msgs::Time* stamp_;
  ::google::protobuf::RepeatedPtrField< ::ignition::msgs::Header_Map > data_;
  friend void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fheader_2eproto();
  friend void protobuf_AssignDesc_ignition_2fmsgs_2fheader_2eproto();
  friend void protobuf_ShutdownFile_ignition_2fmsgs_2fheader_2eproto();

  void InitAsDefaultInstance();
  static Header* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Header_Map

// optional string key = 1;
inline bool Header_Map::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header_Map::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Header_Map::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Header_Map::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& Header_Map::key() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Header.Map.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header_Map::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.Header.Map.key)
}
inline void Header_Map::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.Header.Map.key)
}
inline void Header_Map::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.Header.Map.key)
}
inline ::std::string* Header_Map::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Header.Map.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header_Map::release_key() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Header.Map.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header_Map::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Header.Map.key)
}

// repeated string value = 2;
inline int Header_Map::value_size() const {
  return value_.size();
}
inline void Header_Map::clear_value() {
  value_.Clear();
}
inline const ::std::string& Header_Map::value(int index) const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Header.Map.value)
  return value_.Get(index);
}
inline ::std::string* Header_Map::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Header.Map.value)
  return value_.Mutable(index);
}
inline void Header_Map::set_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ignition.msgs.Header.Map.value)
  value_.Mutable(index)->assign(value);
}
inline void Header_Map::set_value(int index, const char* value) {
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ignition.msgs.Header.Map.value)
}
inline void Header_Map::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.Header.Map.value)
}
inline ::std::string* Header_Map::add_value() {
  // @@protoc_insertion_point(field_add_mutable:ignition.msgs.Header.Map.value)
  return value_.Add();
}
inline void Header_Map::add_value(const ::std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ignition.msgs.Header.Map.value)
}
inline void Header_Map::add_value(const char* value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ignition.msgs.Header.Map.value)
}
inline void Header_Map::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ignition.msgs.Header.Map.value)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Header_Map::value() const {
  // @@protoc_insertion_point(field_list:ignition.msgs.Header.Map.value)
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Header_Map::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:ignition.msgs.Header.Map.value)
  return &value_;
}

// -------------------------------------------------------------------

// Header

// optional .ignition.msgs.Time stamp = 1;
inline bool Header::has_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header::set_has_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Header::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Header::clear_stamp() {
  if (stamp_ != NULL) stamp_->::ignition::msgs::Time::Clear();
  clear_has_stamp();
}
inline const ::ignition::msgs::Time& Header::stamp() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Header.stamp)
  return stamp_ != NULL ? *stamp_ : *default_instance_->stamp_;
}
inline ::ignition::msgs::Time* Header::mutable_stamp() {
  set_has_stamp();
  if (stamp_ == NULL) {
    stamp_ = new ::ignition::msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Header.stamp)
  return stamp_;
}
inline ::ignition::msgs::Time* Header::release_stamp() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Header.stamp)
  clear_has_stamp();
  ::ignition::msgs::Time* temp = stamp_;
  stamp_ = NULL;
  return temp;
}
inline void Header::set_allocated_stamp(::ignition::msgs::Time* stamp) {
  delete stamp_;
  stamp_ = stamp;
  if (stamp) {
    set_has_stamp();
  } else {
    clear_has_stamp();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Header.stamp)
}

// repeated .ignition.msgs.Header.Map data = 2;
inline int Header::data_size() const {
  return data_.size();
}
inline void Header::clear_data() {
  data_.Clear();
}
inline const ::ignition::msgs::Header_Map& Header::data(int index) const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Header.data)
  return data_.Get(index);
}
inline ::ignition::msgs::Header_Map* Header::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Header.data)
  return data_.Mutable(index);
}
inline ::ignition::msgs::Header_Map* Header::add_data() {
  // @@protoc_insertion_point(field_add:ignition.msgs.Header.data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ignition::msgs::Header_Map >*
Header::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ignition.msgs.Header.data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ignition::msgs::Header_Map >&
Header::data() const {
  // @@protoc_insertion_point(field_list:ignition.msgs.Header.data)
  return data_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


typedef std::unique_ptr<Header> HeaderUniquePtr;
typedef std::unique_ptr<const Header> ConstHeaderUniquePtr;
typedef std::shared_ptr<Header> HeaderSharedPtr;
typedef std::shared_ptr<const Header> ConstHeaderSharedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

#ifdef _MSC_VER
#pragma warning(pop)
#endif
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ignition_2fmsgs_2fheader_2eproto__INCLUDED
