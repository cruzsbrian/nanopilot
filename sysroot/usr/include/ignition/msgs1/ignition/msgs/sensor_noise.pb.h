// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ignition/msgs/sensor_noise.proto

#ifndef PROTOBUF_ignition_2fmsgs_2fsensor_5fnoise_2eproto__INCLUDED
#define PROTOBUF_ignition_2fmsgs_2fsensor_5fnoise_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/header.pb.h"
#ifndef _MSC_VER
#pragma GCC system_header
#else
#pragma warning(push)
#pragma warning(disable: 4244 4267 4100 4244 4512 4127 4068 4275 4251)
#endif
#include <memory>
#include <ignition/msgs/Export.hh>
// @@protoc_insertion_point(includes)

namespace ignition {
namespace msgs {

// Internal implementation detail -- do not call these.
void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fsensor_5fnoise_2eproto();
void protobuf_AssignDesc_ignition_2fmsgs_2fsensor_5fnoise_2eproto();
void protobuf_ShutdownFile_ignition_2fmsgs_2fsensor_5fnoise_2eproto();

class SensorNoise;

enum SensorNoise_Type {
  SensorNoise_Type_NONE = 1,
  SensorNoise_Type_GAUSSIAN = 2,
  SensorNoise_Type_GAUSSIAN_QUANTIZED = 3
};
IGNITION_MSGS_VISIBLE bool SensorNoise_Type_IsValid(int value);
const SensorNoise_Type SensorNoise_Type_Type_MIN = SensorNoise_Type_NONE;
const SensorNoise_Type SensorNoise_Type_Type_MAX = SensorNoise_Type_GAUSSIAN_QUANTIZED;
const int SensorNoise_Type_Type_ARRAYSIZE = SensorNoise_Type_Type_MAX + 1;

IGNITION_MSGS_VISIBLE const ::google::protobuf::EnumDescriptor* SensorNoise_Type_descriptor();
inline const ::std::string& SensorNoise_Type_Name(SensorNoise_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    SensorNoise_Type_descriptor(), value);
}
inline bool SensorNoise_Type_Parse(
    const ::std::string& name, SensorNoise_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SensorNoise_Type>(
    SensorNoise_Type_descriptor(), name, value);
}
// ===================================================================

class IGNITION_MSGS_VISIBLE SensorNoise : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.SensorNoise) */ {
 public:
  SensorNoise();
  virtual ~SensorNoise();

  SensorNoise(const SensorNoise& from);

  inline SensorNoise& operator=(const SensorNoise& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorNoise& default_instance();

  void Swap(SensorNoise* other);

  // implements Message ----------------------------------------------

  inline SensorNoise* New() const { return New(NULL); }

  SensorNoise* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SensorNoise& from);
  void MergeFrom(const SensorNoise& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SensorNoise* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SensorNoise_Type Type;
  static const Type NONE =
    SensorNoise_Type_NONE;
  static const Type GAUSSIAN =
    SensorNoise_Type_GAUSSIAN;
  static const Type GAUSSIAN_QUANTIZED =
    SensorNoise_Type_GAUSSIAN_QUANTIZED;
  static inline bool Type_IsValid(int value) {
    return SensorNoise_Type_IsValid(value);
  }
  static const Type Type_MIN =
    SensorNoise_Type_Type_MIN;
  static const Type Type_MAX =
    SensorNoise_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    SensorNoise_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return SensorNoise_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return SensorNoise_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return SensorNoise_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .ignition.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::ignition::msgs::Header& header() const;
  ::ignition::msgs::Header* mutable_header();
  ::ignition::msgs::Header* release_header();
  void set_allocated_header(::ignition::msgs::Header* header);

  // optional .ignition.msgs.SensorNoise.Type type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::ignition::msgs::SensorNoise_Type type() const;
  void set_type(::ignition::msgs::SensorNoise_Type value);

  // optional double mean = 3;
  bool has_mean() const;
  void clear_mean();
  static const int kMeanFieldNumber = 3;
  double mean() const;
  void set_mean(double value);

  // optional double stddev = 4;
  bool has_stddev() const;
  void clear_stddev();
  static const int kStddevFieldNumber = 4;
  double stddev() const;
  void set_stddev(double value);

  // optional double bias_mean = 5;
  bool has_bias_mean() const;
  void clear_bias_mean();
  static const int kBiasMeanFieldNumber = 5;
  double bias_mean() const;
  void set_bias_mean(double value);

  // optional double bias_stddev = 6;
  bool has_bias_stddev() const;
  void clear_bias_stddev();
  static const int kBiasStddevFieldNumber = 6;
  double bias_stddev() const;
  void set_bias_stddev(double value);

  // optional double precision = 7;
  bool has_precision() const;
  void clear_precision();
  static const int kPrecisionFieldNumber = 7;
  double precision() const;
  void set_precision(double value);

  // @@protoc_insertion_point(class_scope:ignition.msgs.SensorNoise)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_mean();
  inline void clear_has_mean();
  inline void set_has_stddev();
  inline void clear_has_stddev();
  inline void set_has_bias_mean();
  inline void clear_has_bias_mean();
  inline void set_has_bias_stddev();
  inline void clear_has_bias_stddev();
  inline void set_has_precision();
  inline void clear_has_precision();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ignition::msgs::Header* header_;
  double mean_;
  double stddev_;
  double bias_mean_;
  double bias_stddev_;
  double precision_;
  int type_;
  friend void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fsensor_5fnoise_2eproto();
  friend void protobuf_AssignDesc_ignition_2fmsgs_2fsensor_5fnoise_2eproto();
  friend void protobuf_ShutdownFile_ignition_2fmsgs_2fsensor_5fnoise_2eproto();

  void InitAsDefaultInstance();
  static SensorNoise* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SensorNoise

// optional .ignition.msgs.Header header = 1;
inline bool SensorNoise::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SensorNoise::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SensorNoise::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SensorNoise::clear_header() {
  if (header_ != NULL) header_->::ignition::msgs::Header::Clear();
  clear_has_header();
}
inline const ::ignition::msgs::Header& SensorNoise::header() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.SensorNoise.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ignition::msgs::Header* SensorNoise::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::ignition::msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.SensorNoise.header)
  return header_;
}
inline ::ignition::msgs::Header* SensorNoise::release_header() {
  // @@protoc_insertion_point(field_release:ignition.msgs.SensorNoise.header)
  clear_has_header();
  ::ignition::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void SensorNoise::set_allocated_header(::ignition::msgs::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.SensorNoise.header)
}

// optional .ignition.msgs.SensorNoise.Type type = 2;
inline bool SensorNoise::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SensorNoise::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SensorNoise::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SensorNoise::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::ignition::msgs::SensorNoise_Type SensorNoise::type() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.SensorNoise.type)
  return static_cast< ::ignition::msgs::SensorNoise_Type >(type_);
}
inline void SensorNoise::set_type(::ignition::msgs::SensorNoise_Type value) {
  assert(::ignition::msgs::SensorNoise_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.SensorNoise.type)
}

// optional double mean = 3;
inline bool SensorNoise::has_mean() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SensorNoise::set_has_mean() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SensorNoise::clear_has_mean() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SensorNoise::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
inline double SensorNoise::mean() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.SensorNoise.mean)
  return mean_;
}
inline void SensorNoise::set_mean(double value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.SensorNoise.mean)
}

// optional double stddev = 4;
inline bool SensorNoise::has_stddev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SensorNoise::set_has_stddev() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SensorNoise::clear_has_stddev() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SensorNoise::clear_stddev() {
  stddev_ = 0;
  clear_has_stddev();
}
inline double SensorNoise::stddev() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.SensorNoise.stddev)
  return stddev_;
}
inline void SensorNoise::set_stddev(double value) {
  set_has_stddev();
  stddev_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.SensorNoise.stddev)
}

// optional double bias_mean = 5;
inline bool SensorNoise::has_bias_mean() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SensorNoise::set_has_bias_mean() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SensorNoise::clear_has_bias_mean() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SensorNoise::clear_bias_mean() {
  bias_mean_ = 0;
  clear_has_bias_mean();
}
inline double SensorNoise::bias_mean() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.SensorNoise.bias_mean)
  return bias_mean_;
}
inline void SensorNoise::set_bias_mean(double value) {
  set_has_bias_mean();
  bias_mean_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.SensorNoise.bias_mean)
}

// optional double bias_stddev = 6;
inline bool SensorNoise::has_bias_stddev() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SensorNoise::set_has_bias_stddev() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SensorNoise::clear_has_bias_stddev() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SensorNoise::clear_bias_stddev() {
  bias_stddev_ = 0;
  clear_has_bias_stddev();
}
inline double SensorNoise::bias_stddev() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.SensorNoise.bias_stddev)
  return bias_stddev_;
}
inline void SensorNoise::set_bias_stddev(double value) {
  set_has_bias_stddev();
  bias_stddev_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.SensorNoise.bias_stddev)
}

// optional double precision = 7;
inline bool SensorNoise::has_precision() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SensorNoise::set_has_precision() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SensorNoise::clear_has_precision() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SensorNoise::clear_precision() {
  precision_ = 0;
  clear_has_precision();
}
inline double SensorNoise::precision() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.SensorNoise.precision)
  return precision_;
}
inline void SensorNoise::set_precision(double value) {
  set_has_precision();
  precision_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.SensorNoise.precision)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef std::unique_ptr<SensorNoise> SensorNoiseUniquePtr;
typedef std::unique_ptr<const SensorNoise> ConstSensorNoiseUniquePtr;
typedef std::shared_ptr<SensorNoise> SensorNoiseSharedPtr;
typedef std::shared_ptr<const SensorNoise> ConstSensorNoiseSharedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ignition::msgs::SensorNoise_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ignition::msgs::SensorNoise_Type>() {
  return ::ignition::msgs::SensorNoise_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

#ifdef _MSC_VER
#pragma warning(pop)
#endif
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ignition_2fmsgs_2fsensor_5fnoise_2eproto__INCLUDED
