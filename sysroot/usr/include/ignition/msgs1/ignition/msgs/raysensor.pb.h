// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ignition/msgs/raysensor.proto

#ifndef PROTOBUF_ignition_2fmsgs_2fraysensor_2eproto__INCLUDED
#define PROTOBUF_ignition_2fmsgs_2fraysensor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/header.pb.h"
#ifndef _MSC_VER
#pragma GCC system_header
#else
#pragma warning(push)
#pragma warning(disable: 4244 4267 4100 4244 4512 4127 4068 4275 4251)
#endif
#include <memory>
#include <ignition/msgs/Export.hh>
// @@protoc_insertion_point(includes)

namespace ignition {
namespace msgs {

// Internal implementation detail -- do not call these.
void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fraysensor_2eproto();
void protobuf_AssignDesc_ignition_2fmsgs_2fraysensor_2eproto();
void protobuf_ShutdownFile_ignition_2fmsgs_2fraysensor_2eproto();

class RaySensor;

// ===================================================================

class IGNITION_MSGS_VISIBLE RaySensor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.RaySensor) */ {
 public:
  RaySensor();
  virtual ~RaySensor();

  RaySensor(const RaySensor& from);

  inline RaySensor& operator=(const RaySensor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaySensor& default_instance();

  void Swap(RaySensor* other);

  // implements Message ----------------------------------------------

  inline RaySensor* New() const { return New(NULL); }

  RaySensor* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaySensor& from);
  void MergeFrom(const RaySensor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RaySensor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ignition.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::ignition::msgs::Header& header() const;
  ::ignition::msgs::Header* mutable_header();
  ::ignition::msgs::Header* release_header();
  void set_allocated_header(::ignition::msgs::Header* header);

  // optional bool display_scan = 2;
  bool has_display_scan() const;
  void clear_display_scan();
  static const int kDisplayScanFieldNumber = 2;
  bool display_scan() const;
  void set_display_scan(bool value);

  // optional int32 horizontal_samples = 3;
  bool has_horizontal_samples() const;
  void clear_horizontal_samples();
  static const int kHorizontalSamplesFieldNumber = 3;
  ::google::protobuf::int32 horizontal_samples() const;
  void set_horizontal_samples(::google::protobuf::int32 value);

  // optional double horizontal_resolution = 4;
  bool has_horizontal_resolution() const;
  void clear_horizontal_resolution();
  static const int kHorizontalResolutionFieldNumber = 4;
  double horizontal_resolution() const;
  void set_horizontal_resolution(double value);

  // optional double horizontal_min_angle = 5;
  bool has_horizontal_min_angle() const;
  void clear_horizontal_min_angle();
  static const int kHorizontalMinAngleFieldNumber = 5;
  double horizontal_min_angle() const;
  void set_horizontal_min_angle(double value);

  // optional double horizontal_max_angle = 6;
  bool has_horizontal_max_angle() const;
  void clear_horizontal_max_angle();
  static const int kHorizontalMaxAngleFieldNumber = 6;
  double horizontal_max_angle() const;
  void set_horizontal_max_angle(double value);

  // optional int32 vertical_samples = 7;
  bool has_vertical_samples() const;
  void clear_vertical_samples();
  static const int kVerticalSamplesFieldNumber = 7;
  ::google::protobuf::int32 vertical_samples() const;
  void set_vertical_samples(::google::protobuf::int32 value);

  // optional double vertical_resolution = 8;
  bool has_vertical_resolution() const;
  void clear_vertical_resolution();
  static const int kVerticalResolutionFieldNumber = 8;
  double vertical_resolution() const;
  void set_vertical_resolution(double value);

  // optional double vertical_min_angle = 9;
  bool has_vertical_min_angle() const;
  void clear_vertical_min_angle();
  static const int kVerticalMinAngleFieldNumber = 9;
  double vertical_min_angle() const;
  void set_vertical_min_angle(double value);

  // optional double vertical_max_angle = 10;
  bool has_vertical_max_angle() const;
  void clear_vertical_max_angle();
  static const int kVerticalMaxAngleFieldNumber = 10;
  double vertical_max_angle() const;
  void set_vertical_max_angle(double value);

  // optional double range_min = 11;
  bool has_range_min() const;
  void clear_range_min();
  static const int kRangeMinFieldNumber = 11;
  double range_min() const;
  void set_range_min(double value);

  // optional double range_max = 12;
  bool has_range_max() const;
  void clear_range_max();
  static const int kRangeMaxFieldNumber = 12;
  double range_max() const;
  void set_range_max(double value);

  // optional double range_resolution = 13;
  bool has_range_resolution() const;
  void clear_range_resolution();
  static const int kRangeResolutionFieldNumber = 13;
  double range_resolution() const;
  void set_range_resolution(double value);

  // @@protoc_insertion_point(class_scope:ignition.msgs.RaySensor)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_display_scan();
  inline void clear_has_display_scan();
  inline void set_has_horizontal_samples();
  inline void clear_has_horizontal_samples();
  inline void set_has_horizontal_resolution();
  inline void clear_has_horizontal_resolution();
  inline void set_has_horizontal_min_angle();
  inline void clear_has_horizontal_min_angle();
  inline void set_has_horizontal_max_angle();
  inline void clear_has_horizontal_max_angle();
  inline void set_has_vertical_samples();
  inline void clear_has_vertical_samples();
  inline void set_has_vertical_resolution();
  inline void clear_has_vertical_resolution();
  inline void set_has_vertical_min_angle();
  inline void clear_has_vertical_min_angle();
  inline void set_has_vertical_max_angle();
  inline void clear_has_vertical_max_angle();
  inline void set_has_range_min();
  inline void clear_has_range_min();
  inline void set_has_range_max();
  inline void clear_has_range_max();
  inline void set_has_range_resolution();
  inline void clear_has_range_resolution();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ignition::msgs::Header* header_;
  bool display_scan_;
  ::google::protobuf::int32 horizontal_samples_;
  double horizontal_resolution_;
  double horizontal_min_angle_;
  double horizontal_max_angle_;
  double vertical_resolution_;
  double vertical_min_angle_;
  double vertical_max_angle_;
  double range_min_;
  double range_max_;
  double range_resolution_;
  ::google::protobuf::int32 vertical_samples_;
  friend void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fraysensor_2eproto();
  friend void protobuf_AssignDesc_ignition_2fmsgs_2fraysensor_2eproto();
  friend void protobuf_ShutdownFile_ignition_2fmsgs_2fraysensor_2eproto();

  void InitAsDefaultInstance();
  static RaySensor* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RaySensor

// optional .ignition.msgs.Header header = 1;
inline bool RaySensor::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaySensor::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaySensor::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaySensor::clear_header() {
  if (header_ != NULL) header_->::ignition::msgs::Header::Clear();
  clear_has_header();
}
inline const ::ignition::msgs::Header& RaySensor::header() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.RaySensor.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ignition::msgs::Header* RaySensor::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::ignition::msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.RaySensor.header)
  return header_;
}
inline ::ignition::msgs::Header* RaySensor::release_header() {
  // @@protoc_insertion_point(field_release:ignition.msgs.RaySensor.header)
  clear_has_header();
  ::ignition::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void RaySensor::set_allocated_header(::ignition::msgs::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.RaySensor.header)
}

// optional bool display_scan = 2;
inline bool RaySensor::has_display_scan() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaySensor::set_has_display_scan() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaySensor::clear_has_display_scan() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaySensor::clear_display_scan() {
  display_scan_ = false;
  clear_has_display_scan();
}
inline bool RaySensor::display_scan() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.RaySensor.display_scan)
  return display_scan_;
}
inline void RaySensor::set_display_scan(bool value) {
  set_has_display_scan();
  display_scan_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.RaySensor.display_scan)
}

// optional int32 horizontal_samples = 3;
inline bool RaySensor::has_horizontal_samples() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RaySensor::set_has_horizontal_samples() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RaySensor::clear_has_horizontal_samples() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RaySensor::clear_horizontal_samples() {
  horizontal_samples_ = 0;
  clear_has_horizontal_samples();
}
inline ::google::protobuf::int32 RaySensor::horizontal_samples() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.RaySensor.horizontal_samples)
  return horizontal_samples_;
}
inline void RaySensor::set_horizontal_samples(::google::protobuf::int32 value) {
  set_has_horizontal_samples();
  horizontal_samples_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.RaySensor.horizontal_samples)
}

// optional double horizontal_resolution = 4;
inline bool RaySensor::has_horizontal_resolution() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RaySensor::set_has_horizontal_resolution() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RaySensor::clear_has_horizontal_resolution() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RaySensor::clear_horizontal_resolution() {
  horizontal_resolution_ = 0;
  clear_has_horizontal_resolution();
}
inline double RaySensor::horizontal_resolution() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.RaySensor.horizontal_resolution)
  return horizontal_resolution_;
}
inline void RaySensor::set_horizontal_resolution(double value) {
  set_has_horizontal_resolution();
  horizontal_resolution_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.RaySensor.horizontal_resolution)
}

// optional double horizontal_min_angle = 5;
inline bool RaySensor::has_horizontal_min_angle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RaySensor::set_has_horizontal_min_angle() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RaySensor::clear_has_horizontal_min_angle() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RaySensor::clear_horizontal_min_angle() {
  horizontal_min_angle_ = 0;
  clear_has_horizontal_min_angle();
}
inline double RaySensor::horizontal_min_angle() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.RaySensor.horizontal_min_angle)
  return horizontal_min_angle_;
}
inline void RaySensor::set_horizontal_min_angle(double value) {
  set_has_horizontal_min_angle();
  horizontal_min_angle_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.RaySensor.horizontal_min_angle)
}

// optional double horizontal_max_angle = 6;
inline bool RaySensor::has_horizontal_max_angle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RaySensor::set_has_horizontal_max_angle() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RaySensor::clear_has_horizontal_max_angle() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RaySensor::clear_horizontal_max_angle() {
  horizontal_max_angle_ = 0;
  clear_has_horizontal_max_angle();
}
inline double RaySensor::horizontal_max_angle() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.RaySensor.horizontal_max_angle)
  return horizontal_max_angle_;
}
inline void RaySensor::set_horizontal_max_angle(double value) {
  set_has_horizontal_max_angle();
  horizontal_max_angle_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.RaySensor.horizontal_max_angle)
}

// optional int32 vertical_samples = 7;
inline bool RaySensor::has_vertical_samples() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RaySensor::set_has_vertical_samples() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RaySensor::clear_has_vertical_samples() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RaySensor::clear_vertical_samples() {
  vertical_samples_ = 0;
  clear_has_vertical_samples();
}
inline ::google::protobuf::int32 RaySensor::vertical_samples() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.RaySensor.vertical_samples)
  return vertical_samples_;
}
inline void RaySensor::set_vertical_samples(::google::protobuf::int32 value) {
  set_has_vertical_samples();
  vertical_samples_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.RaySensor.vertical_samples)
}

// optional double vertical_resolution = 8;
inline bool RaySensor::has_vertical_resolution() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RaySensor::set_has_vertical_resolution() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RaySensor::clear_has_vertical_resolution() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RaySensor::clear_vertical_resolution() {
  vertical_resolution_ = 0;
  clear_has_vertical_resolution();
}
inline double RaySensor::vertical_resolution() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.RaySensor.vertical_resolution)
  return vertical_resolution_;
}
inline void RaySensor::set_vertical_resolution(double value) {
  set_has_vertical_resolution();
  vertical_resolution_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.RaySensor.vertical_resolution)
}

// optional double vertical_min_angle = 9;
inline bool RaySensor::has_vertical_min_angle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RaySensor::set_has_vertical_min_angle() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RaySensor::clear_has_vertical_min_angle() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RaySensor::clear_vertical_min_angle() {
  vertical_min_angle_ = 0;
  clear_has_vertical_min_angle();
}
inline double RaySensor::vertical_min_angle() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.RaySensor.vertical_min_angle)
  return vertical_min_angle_;
}
inline void RaySensor::set_vertical_min_angle(double value) {
  set_has_vertical_min_angle();
  vertical_min_angle_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.RaySensor.vertical_min_angle)
}

// optional double vertical_max_angle = 10;
inline bool RaySensor::has_vertical_max_angle() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RaySensor::set_has_vertical_max_angle() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RaySensor::clear_has_vertical_max_angle() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RaySensor::clear_vertical_max_angle() {
  vertical_max_angle_ = 0;
  clear_has_vertical_max_angle();
}
inline double RaySensor::vertical_max_angle() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.RaySensor.vertical_max_angle)
  return vertical_max_angle_;
}
inline void RaySensor::set_vertical_max_angle(double value) {
  set_has_vertical_max_angle();
  vertical_max_angle_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.RaySensor.vertical_max_angle)
}

// optional double range_min = 11;
inline bool RaySensor::has_range_min() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RaySensor::set_has_range_min() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RaySensor::clear_has_range_min() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RaySensor::clear_range_min() {
  range_min_ = 0;
  clear_has_range_min();
}
inline double RaySensor::range_min() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.RaySensor.range_min)
  return range_min_;
}
inline void RaySensor::set_range_min(double value) {
  set_has_range_min();
  range_min_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.RaySensor.range_min)
}

// optional double range_max = 12;
inline bool RaySensor::has_range_max() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RaySensor::set_has_range_max() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RaySensor::clear_has_range_max() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RaySensor::clear_range_max() {
  range_max_ = 0;
  clear_has_range_max();
}
inline double RaySensor::range_max() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.RaySensor.range_max)
  return range_max_;
}
inline void RaySensor::set_range_max(double value) {
  set_has_range_max();
  range_max_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.RaySensor.range_max)
}

// optional double range_resolution = 13;
inline bool RaySensor::has_range_resolution() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RaySensor::set_has_range_resolution() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RaySensor::clear_has_range_resolution() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RaySensor::clear_range_resolution() {
  range_resolution_ = 0;
  clear_has_range_resolution();
}
inline double RaySensor::range_resolution() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.RaySensor.range_resolution)
  return range_resolution_;
}
inline void RaySensor::set_range_resolution(double value) {
  set_has_range_resolution();
  range_resolution_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.RaySensor.range_resolution)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef std::unique_ptr<RaySensor> RaySensorUniquePtr;
typedef std::unique_ptr<const RaySensor> ConstRaySensorUniquePtr;
typedef std::shared_ptr<RaySensor> RaySensorSharedPtr;
typedef std::shared_ptr<const RaySensor> ConstRaySensorSharedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

#ifdef _MSC_VER
#pragma warning(pop)
#endif
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ignition_2fmsgs_2fraysensor_2eproto__INCLUDED
