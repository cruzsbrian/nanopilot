// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ignition/msgs/sonar.proto

#ifndef PROTOBUF_ignition_2fmsgs_2fsonar_2eproto__INCLUDED
#define PROTOBUF_ignition_2fmsgs_2fsonar_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/pose.pb.h"
#include "ignition/msgs/vector3d.pb.h"
#include "ignition/msgs/header.pb.h"
#ifndef _MSC_VER
#pragma GCC system_header
#else
#pragma warning(push)
#pragma warning(disable: 4244 4267 4100 4244 4512 4127 4068 4275 4251)
#endif
#include <memory>
#include <ignition/msgs/Export.hh>
// @@protoc_insertion_point(includes)

namespace ignition {
namespace msgs {

// Internal implementation detail -- do not call these.
void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fsonar_2eproto();
void protobuf_AssignDesc_ignition_2fmsgs_2fsonar_2eproto();
void protobuf_ShutdownFile_ignition_2fmsgs_2fsonar_2eproto();

class Sonar;

// ===================================================================

class IGNITION_MSGS_VISIBLE Sonar : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.Sonar) */ {
 public:
  Sonar();
  virtual ~Sonar();

  Sonar(const Sonar& from);

  inline Sonar& operator=(const Sonar& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sonar& default_instance();

  void Swap(Sonar* other);

  // implements Message ----------------------------------------------

  inline Sonar* New() const { return New(NULL); }

  Sonar* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sonar& from);
  void MergeFrom(const Sonar& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Sonar* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ignition.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::ignition::msgs::Header& header() const;
  ::ignition::msgs::Header* mutable_header();
  ::ignition::msgs::Header* release_header();
  void set_allocated_header(::ignition::msgs::Header* header);

  // optional string frame = 2;
  bool has_frame() const;
  void clear_frame();
  static const int kFrameFieldNumber = 2;
  const ::std::string& frame() const;
  void set_frame(const ::std::string& value);
  void set_frame(const char* value);
  void set_frame(const char* value, size_t size);
  ::std::string* mutable_frame();
  ::std::string* release_frame();
  void set_allocated_frame(::std::string* frame);

  // optional .ignition.msgs.Pose world_pose = 3;
  bool has_world_pose() const;
  void clear_world_pose();
  static const int kWorldPoseFieldNumber = 3;
  const ::ignition::msgs::Pose& world_pose() const;
  ::ignition::msgs::Pose* mutable_world_pose();
  ::ignition::msgs::Pose* release_world_pose();
  void set_allocated_world_pose(::ignition::msgs::Pose* world_pose);

  // optional double range_min = 4;
  bool has_range_min() const;
  void clear_range_min();
  static const int kRangeMinFieldNumber = 4;
  double range_min() const;
  void set_range_min(double value);

  // optional double range_max = 5;
  bool has_range_max() const;
  void clear_range_max();
  static const int kRangeMaxFieldNumber = 5;
  double range_max() const;
  void set_range_max(double value);

  // optional double radius = 6;
  bool has_radius() const;
  void clear_radius();
  static const int kRadiusFieldNumber = 6;
  double radius() const;
  void set_radius(double value);

  // optional double range = 7;
  bool has_range() const;
  void clear_range();
  static const int kRangeFieldNumber = 7;
  double range() const;
  void set_range(double value);

  // optional .ignition.msgs.Vector3d contact = 8;
  bool has_contact() const;
  void clear_contact();
  static const int kContactFieldNumber = 8;
  const ::ignition::msgs::Vector3d& contact() const;
  ::ignition::msgs::Vector3d* mutable_contact();
  ::ignition::msgs::Vector3d* release_contact();
  void set_allocated_contact(::ignition::msgs::Vector3d* contact);

  // @@protoc_insertion_point(class_scope:ignition.msgs.Sonar)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_frame();
  inline void clear_has_frame();
  inline void set_has_world_pose();
  inline void clear_has_world_pose();
  inline void set_has_range_min();
  inline void clear_has_range_min();
  inline void set_has_range_max();
  inline void clear_has_range_max();
  inline void set_has_radius();
  inline void clear_has_radius();
  inline void set_has_range();
  inline void clear_has_range();
  inline void set_has_contact();
  inline void clear_has_contact();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ignition::msgs::Header* header_;
  ::google::protobuf::internal::ArenaStringPtr frame_;
  ::ignition::msgs::Pose* world_pose_;
  double range_min_;
  double range_max_;
  double radius_;
  double range_;
  ::ignition::msgs::Vector3d* contact_;
  friend void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fsonar_2eproto();
  friend void protobuf_AssignDesc_ignition_2fmsgs_2fsonar_2eproto();
  friend void protobuf_ShutdownFile_ignition_2fmsgs_2fsonar_2eproto();

  void InitAsDefaultInstance();
  static Sonar* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Sonar

// optional .ignition.msgs.Header header = 1;
inline bool Sonar::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Sonar::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Sonar::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Sonar::clear_header() {
  if (header_ != NULL) header_->::ignition::msgs::Header::Clear();
  clear_has_header();
}
inline const ::ignition::msgs::Header& Sonar::header() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Sonar.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ignition::msgs::Header* Sonar::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::ignition::msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Sonar.header)
  return header_;
}
inline ::ignition::msgs::Header* Sonar::release_header() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Sonar.header)
  clear_has_header();
  ::ignition::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Sonar::set_allocated_header(::ignition::msgs::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Sonar.header)
}

// optional string frame = 2;
inline bool Sonar::has_frame() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Sonar::set_has_frame() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Sonar::clear_has_frame() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Sonar::clear_frame() {
  frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_frame();
}
inline const ::std::string& Sonar::frame() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Sonar.frame)
  return frame_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Sonar::set_frame(const ::std::string& value) {
  set_has_frame();
  frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.Sonar.frame)
}
inline void Sonar::set_frame(const char* value) {
  set_has_frame();
  frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.Sonar.frame)
}
inline void Sonar::set_frame(const char* value, size_t size) {
  set_has_frame();
  frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.Sonar.frame)
}
inline ::std::string* Sonar::mutable_frame() {
  set_has_frame();
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Sonar.frame)
  return frame_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Sonar::release_frame() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Sonar.frame)
  clear_has_frame();
  return frame_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Sonar::set_allocated_frame(::std::string* frame) {
  if (frame != NULL) {
    set_has_frame();
  } else {
    clear_has_frame();
  }
  frame_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Sonar.frame)
}

// optional .ignition.msgs.Pose world_pose = 3;
inline bool Sonar::has_world_pose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Sonar::set_has_world_pose() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Sonar::clear_has_world_pose() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Sonar::clear_world_pose() {
  if (world_pose_ != NULL) world_pose_->::ignition::msgs::Pose::Clear();
  clear_has_world_pose();
}
inline const ::ignition::msgs::Pose& Sonar::world_pose() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Sonar.world_pose)
  return world_pose_ != NULL ? *world_pose_ : *default_instance_->world_pose_;
}
inline ::ignition::msgs::Pose* Sonar::mutable_world_pose() {
  set_has_world_pose();
  if (world_pose_ == NULL) {
    world_pose_ = new ::ignition::msgs::Pose;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Sonar.world_pose)
  return world_pose_;
}
inline ::ignition::msgs::Pose* Sonar::release_world_pose() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Sonar.world_pose)
  clear_has_world_pose();
  ::ignition::msgs::Pose* temp = world_pose_;
  world_pose_ = NULL;
  return temp;
}
inline void Sonar::set_allocated_world_pose(::ignition::msgs::Pose* world_pose) {
  delete world_pose_;
  world_pose_ = world_pose;
  if (world_pose) {
    set_has_world_pose();
  } else {
    clear_has_world_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Sonar.world_pose)
}

// optional double range_min = 4;
inline bool Sonar::has_range_min() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Sonar::set_has_range_min() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Sonar::clear_has_range_min() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Sonar::clear_range_min() {
  range_min_ = 0;
  clear_has_range_min();
}
inline double Sonar::range_min() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Sonar.range_min)
  return range_min_;
}
inline void Sonar::set_range_min(double value) {
  set_has_range_min();
  range_min_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Sonar.range_min)
}

// optional double range_max = 5;
inline bool Sonar::has_range_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Sonar::set_has_range_max() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Sonar::clear_has_range_max() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Sonar::clear_range_max() {
  range_max_ = 0;
  clear_has_range_max();
}
inline double Sonar::range_max() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Sonar.range_max)
  return range_max_;
}
inline void Sonar::set_range_max(double value) {
  set_has_range_max();
  range_max_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Sonar.range_max)
}

// optional double radius = 6;
inline bool Sonar::has_radius() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Sonar::set_has_radius() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Sonar::clear_has_radius() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Sonar::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline double Sonar::radius() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Sonar.radius)
  return radius_;
}
inline void Sonar::set_radius(double value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Sonar.radius)
}

// optional double range = 7;
inline bool Sonar::has_range() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Sonar::set_has_range() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Sonar::clear_has_range() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Sonar::clear_range() {
  range_ = 0;
  clear_has_range();
}
inline double Sonar::range() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Sonar.range)
  return range_;
}
inline void Sonar::set_range(double value) {
  set_has_range();
  range_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Sonar.range)
}

// optional .ignition.msgs.Vector3d contact = 8;
inline bool Sonar::has_contact() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Sonar::set_has_contact() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Sonar::clear_has_contact() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Sonar::clear_contact() {
  if (contact_ != NULL) contact_->::ignition::msgs::Vector3d::Clear();
  clear_has_contact();
}
inline const ::ignition::msgs::Vector3d& Sonar::contact() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Sonar.contact)
  return contact_ != NULL ? *contact_ : *default_instance_->contact_;
}
inline ::ignition::msgs::Vector3d* Sonar::mutable_contact() {
  set_has_contact();
  if (contact_ == NULL) {
    contact_ = new ::ignition::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Sonar.contact)
  return contact_;
}
inline ::ignition::msgs::Vector3d* Sonar::release_contact() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Sonar.contact)
  clear_has_contact();
  ::ignition::msgs::Vector3d* temp = contact_;
  contact_ = NULL;
  return temp;
}
inline void Sonar::set_allocated_contact(::ignition::msgs::Vector3d* contact) {
  delete contact_;
  contact_ = contact;
  if (contact) {
    set_has_contact();
  } else {
    clear_has_contact();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Sonar.contact)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef std::unique_ptr<Sonar> SonarUniquePtr;
typedef std::unique_ptr<const Sonar> ConstSonarUniquePtr;
typedef std::shared_ptr<Sonar> SonarSharedPtr;
typedef std::shared_ptr<const Sonar> ConstSonarSharedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

#ifdef _MSC_VER
#pragma warning(pop)
#endif
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ignition_2fmsgs_2fsonar_2eproto__INCLUDED
