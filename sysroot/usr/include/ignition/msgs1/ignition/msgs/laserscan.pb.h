// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ignition/msgs/laserscan.proto

#ifndef PROTOBUF_ignition_2fmsgs_2flaserscan_2eproto__INCLUDED
#define PROTOBUF_ignition_2fmsgs_2flaserscan_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/pose.pb.h"
#include "ignition/msgs/header.pb.h"
#ifndef _MSC_VER
#pragma GCC system_header
#else
#pragma warning(push)
#pragma warning(disable: 4244 4267 4100 4244 4512 4127 4068 4275 4251)
#endif
#include <memory>
#include <ignition/msgs/Export.hh>
// @@protoc_insertion_point(includes)

namespace ignition {
namespace msgs {

// Internal implementation detail -- do not call these.
void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2flaserscan_2eproto();
void protobuf_AssignDesc_ignition_2fmsgs_2flaserscan_2eproto();
void protobuf_ShutdownFile_ignition_2fmsgs_2flaserscan_2eproto();

class LaserScan;

// ===================================================================

class IGNITION_MSGS_VISIBLE LaserScan : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.LaserScan) */ {
 public:
  LaserScan();
  virtual ~LaserScan();

  LaserScan(const LaserScan& from);

  inline LaserScan& operator=(const LaserScan& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaserScan& default_instance();

  void Swap(LaserScan* other);

  // implements Message ----------------------------------------------

  inline LaserScan* New() const { return New(NULL); }

  LaserScan* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LaserScan& from);
  void MergeFrom(const LaserScan& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LaserScan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ignition.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::ignition::msgs::Header& header() const;
  ::ignition::msgs::Header* mutable_header();
  ::ignition::msgs::Header* release_header();
  void set_allocated_header(::ignition::msgs::Header* header);

  // optional string frame = 2;
  bool has_frame() const;
  void clear_frame();
  static const int kFrameFieldNumber = 2;
  const ::std::string& frame() const;
  void set_frame(const ::std::string& value);
  void set_frame(const char* value);
  void set_frame(const char* value, size_t size);
  ::std::string* mutable_frame();
  ::std::string* release_frame();
  void set_allocated_frame(::std::string* frame);

  // optional .ignition.msgs.Pose world_pose = 3;
  bool has_world_pose() const;
  void clear_world_pose();
  static const int kWorldPoseFieldNumber = 3;
  const ::ignition::msgs::Pose& world_pose() const;
  ::ignition::msgs::Pose* mutable_world_pose();
  ::ignition::msgs::Pose* release_world_pose();
  void set_allocated_world_pose(::ignition::msgs::Pose* world_pose);

  // optional double angle_min = 4;
  bool has_angle_min() const;
  void clear_angle_min();
  static const int kAngleMinFieldNumber = 4;
  double angle_min() const;
  void set_angle_min(double value);

  // optional double angle_max = 5;
  bool has_angle_max() const;
  void clear_angle_max();
  static const int kAngleMaxFieldNumber = 5;
  double angle_max() const;
  void set_angle_max(double value);

  // optional double angle_step = 6;
  bool has_angle_step() const;
  void clear_angle_step();
  static const int kAngleStepFieldNumber = 6;
  double angle_step() const;
  void set_angle_step(double value);

  // optional double range_min = 7;
  bool has_range_min() const;
  void clear_range_min();
  static const int kRangeMinFieldNumber = 7;
  double range_min() const;
  void set_range_min(double value);

  // optional double range_max = 8;
  bool has_range_max() const;
  void clear_range_max();
  static const int kRangeMaxFieldNumber = 8;
  double range_max() const;
  void set_range_max(double value);

  // optional uint32 count = 9;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 9;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // optional double vertical_angle_min = 10;
  bool has_vertical_angle_min() const;
  void clear_vertical_angle_min();
  static const int kVerticalAngleMinFieldNumber = 10;
  double vertical_angle_min() const;
  void set_vertical_angle_min(double value);

  // optional double vertical_angle_max = 11;
  bool has_vertical_angle_max() const;
  void clear_vertical_angle_max();
  static const int kVerticalAngleMaxFieldNumber = 11;
  double vertical_angle_max() const;
  void set_vertical_angle_max(double value);

  // optional double vertical_angle_step = 12;
  bool has_vertical_angle_step() const;
  void clear_vertical_angle_step();
  static const int kVerticalAngleStepFieldNumber = 12;
  double vertical_angle_step() const;
  void set_vertical_angle_step(double value);

  // optional uint32 vertical_count = 13;
  bool has_vertical_count() const;
  void clear_vertical_count();
  static const int kVerticalCountFieldNumber = 13;
  ::google::protobuf::uint32 vertical_count() const;
  void set_vertical_count(::google::protobuf::uint32 value);

  // repeated double ranges = 14;
  int ranges_size() const;
  void clear_ranges();
  static const int kRangesFieldNumber = 14;
  double ranges(int index) const;
  void set_ranges(int index, double value);
  void add_ranges(double value);
  const ::google::protobuf::RepeatedField< double >&
      ranges() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_ranges();

  // repeated double intensities = 15;
  int intensities_size() const;
  void clear_intensities();
  static const int kIntensitiesFieldNumber = 15;
  double intensities(int index) const;
  void set_intensities(int index, double value);
  void add_intensities(double value);
  const ::google::protobuf::RepeatedField< double >&
      intensities() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_intensities();

  // @@protoc_insertion_point(class_scope:ignition.msgs.LaserScan)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_frame();
  inline void clear_has_frame();
  inline void set_has_world_pose();
  inline void clear_has_world_pose();
  inline void set_has_angle_min();
  inline void clear_has_angle_min();
  inline void set_has_angle_max();
  inline void clear_has_angle_max();
  inline void set_has_angle_step();
  inline void clear_has_angle_step();
  inline void set_has_range_min();
  inline void clear_has_range_min();
  inline void set_has_range_max();
  inline void clear_has_range_max();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_vertical_angle_min();
  inline void clear_has_vertical_angle_min();
  inline void set_has_vertical_angle_max();
  inline void clear_has_vertical_angle_max();
  inline void set_has_vertical_angle_step();
  inline void clear_has_vertical_angle_step();
  inline void set_has_vertical_count();
  inline void clear_has_vertical_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ignition::msgs::Header* header_;
  ::google::protobuf::internal::ArenaStringPtr frame_;
  ::ignition::msgs::Pose* world_pose_;
  double angle_min_;
  double angle_max_;
  double angle_step_;
  double range_min_;
  double range_max_;
  double vertical_angle_min_;
  double vertical_angle_max_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 vertical_count_;
  double vertical_angle_step_;
  ::google::protobuf::RepeatedField< double > ranges_;
  ::google::protobuf::RepeatedField< double > intensities_;
  friend void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2flaserscan_2eproto();
  friend void protobuf_AssignDesc_ignition_2fmsgs_2flaserscan_2eproto();
  friend void protobuf_ShutdownFile_ignition_2fmsgs_2flaserscan_2eproto();

  void InitAsDefaultInstance();
  static LaserScan* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LaserScan

// optional .ignition.msgs.Header header = 1;
inline bool LaserScan::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaserScan::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaserScan::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaserScan::clear_header() {
  if (header_ != NULL) header_->::ignition::msgs::Header::Clear();
  clear_has_header();
}
inline const ::ignition::msgs::Header& LaserScan::header() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.LaserScan.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ignition::msgs::Header* LaserScan::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::ignition::msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.LaserScan.header)
  return header_;
}
inline ::ignition::msgs::Header* LaserScan::release_header() {
  // @@protoc_insertion_point(field_release:ignition.msgs.LaserScan.header)
  clear_has_header();
  ::ignition::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void LaserScan::set_allocated_header(::ignition::msgs::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.LaserScan.header)
}

// optional string frame = 2;
inline bool LaserScan::has_frame() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaserScan::set_has_frame() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LaserScan::clear_has_frame() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LaserScan::clear_frame() {
  frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_frame();
}
inline const ::std::string& LaserScan::frame() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.LaserScan.frame)
  return frame_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaserScan::set_frame(const ::std::string& value) {
  set_has_frame();
  frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.LaserScan.frame)
}
inline void LaserScan::set_frame(const char* value) {
  set_has_frame();
  frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.LaserScan.frame)
}
inline void LaserScan::set_frame(const char* value, size_t size) {
  set_has_frame();
  frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.LaserScan.frame)
}
inline ::std::string* LaserScan::mutable_frame() {
  set_has_frame();
  // @@protoc_insertion_point(field_mutable:ignition.msgs.LaserScan.frame)
  return frame_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LaserScan::release_frame() {
  // @@protoc_insertion_point(field_release:ignition.msgs.LaserScan.frame)
  clear_has_frame();
  return frame_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaserScan::set_allocated_frame(::std::string* frame) {
  if (frame != NULL) {
    set_has_frame();
  } else {
    clear_has_frame();
  }
  frame_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.LaserScan.frame)
}

// optional .ignition.msgs.Pose world_pose = 3;
inline bool LaserScan::has_world_pose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LaserScan::set_has_world_pose() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LaserScan::clear_has_world_pose() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LaserScan::clear_world_pose() {
  if (world_pose_ != NULL) world_pose_->::ignition::msgs::Pose::Clear();
  clear_has_world_pose();
}
inline const ::ignition::msgs::Pose& LaserScan::world_pose() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.LaserScan.world_pose)
  return world_pose_ != NULL ? *world_pose_ : *default_instance_->world_pose_;
}
inline ::ignition::msgs::Pose* LaserScan::mutable_world_pose() {
  set_has_world_pose();
  if (world_pose_ == NULL) {
    world_pose_ = new ::ignition::msgs::Pose;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.LaserScan.world_pose)
  return world_pose_;
}
inline ::ignition::msgs::Pose* LaserScan::release_world_pose() {
  // @@protoc_insertion_point(field_release:ignition.msgs.LaserScan.world_pose)
  clear_has_world_pose();
  ::ignition::msgs::Pose* temp = world_pose_;
  world_pose_ = NULL;
  return temp;
}
inline void LaserScan::set_allocated_world_pose(::ignition::msgs::Pose* world_pose) {
  delete world_pose_;
  world_pose_ = world_pose;
  if (world_pose) {
    set_has_world_pose();
  } else {
    clear_has_world_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.LaserScan.world_pose)
}

// optional double angle_min = 4;
inline bool LaserScan::has_angle_min() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LaserScan::set_has_angle_min() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LaserScan::clear_has_angle_min() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LaserScan::clear_angle_min() {
  angle_min_ = 0;
  clear_has_angle_min();
}
inline double LaserScan::angle_min() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.LaserScan.angle_min)
  return angle_min_;
}
inline void LaserScan::set_angle_min(double value) {
  set_has_angle_min();
  angle_min_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.LaserScan.angle_min)
}

// optional double angle_max = 5;
inline bool LaserScan::has_angle_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LaserScan::set_has_angle_max() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LaserScan::clear_has_angle_max() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LaserScan::clear_angle_max() {
  angle_max_ = 0;
  clear_has_angle_max();
}
inline double LaserScan::angle_max() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.LaserScan.angle_max)
  return angle_max_;
}
inline void LaserScan::set_angle_max(double value) {
  set_has_angle_max();
  angle_max_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.LaserScan.angle_max)
}

// optional double angle_step = 6;
inline bool LaserScan::has_angle_step() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LaserScan::set_has_angle_step() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LaserScan::clear_has_angle_step() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LaserScan::clear_angle_step() {
  angle_step_ = 0;
  clear_has_angle_step();
}
inline double LaserScan::angle_step() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.LaserScan.angle_step)
  return angle_step_;
}
inline void LaserScan::set_angle_step(double value) {
  set_has_angle_step();
  angle_step_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.LaserScan.angle_step)
}

// optional double range_min = 7;
inline bool LaserScan::has_range_min() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LaserScan::set_has_range_min() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LaserScan::clear_has_range_min() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LaserScan::clear_range_min() {
  range_min_ = 0;
  clear_has_range_min();
}
inline double LaserScan::range_min() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.LaserScan.range_min)
  return range_min_;
}
inline void LaserScan::set_range_min(double value) {
  set_has_range_min();
  range_min_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.LaserScan.range_min)
}

// optional double range_max = 8;
inline bool LaserScan::has_range_max() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LaserScan::set_has_range_max() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LaserScan::clear_has_range_max() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LaserScan::clear_range_max() {
  range_max_ = 0;
  clear_has_range_max();
}
inline double LaserScan::range_max() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.LaserScan.range_max)
  return range_max_;
}
inline void LaserScan::set_range_max(double value) {
  set_has_range_max();
  range_max_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.LaserScan.range_max)
}

// optional uint32 count = 9;
inline bool LaserScan::has_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LaserScan::set_has_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LaserScan::clear_has_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LaserScan::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 LaserScan::count() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.LaserScan.count)
  return count_;
}
inline void LaserScan::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.LaserScan.count)
}

// optional double vertical_angle_min = 10;
inline bool LaserScan::has_vertical_angle_min() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LaserScan::set_has_vertical_angle_min() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LaserScan::clear_has_vertical_angle_min() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LaserScan::clear_vertical_angle_min() {
  vertical_angle_min_ = 0;
  clear_has_vertical_angle_min();
}
inline double LaserScan::vertical_angle_min() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.LaserScan.vertical_angle_min)
  return vertical_angle_min_;
}
inline void LaserScan::set_vertical_angle_min(double value) {
  set_has_vertical_angle_min();
  vertical_angle_min_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.LaserScan.vertical_angle_min)
}

// optional double vertical_angle_max = 11;
inline bool LaserScan::has_vertical_angle_max() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LaserScan::set_has_vertical_angle_max() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LaserScan::clear_has_vertical_angle_max() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LaserScan::clear_vertical_angle_max() {
  vertical_angle_max_ = 0;
  clear_has_vertical_angle_max();
}
inline double LaserScan::vertical_angle_max() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.LaserScan.vertical_angle_max)
  return vertical_angle_max_;
}
inline void LaserScan::set_vertical_angle_max(double value) {
  set_has_vertical_angle_max();
  vertical_angle_max_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.LaserScan.vertical_angle_max)
}

// optional double vertical_angle_step = 12;
inline bool LaserScan::has_vertical_angle_step() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LaserScan::set_has_vertical_angle_step() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LaserScan::clear_has_vertical_angle_step() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LaserScan::clear_vertical_angle_step() {
  vertical_angle_step_ = 0;
  clear_has_vertical_angle_step();
}
inline double LaserScan::vertical_angle_step() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.LaserScan.vertical_angle_step)
  return vertical_angle_step_;
}
inline void LaserScan::set_vertical_angle_step(double value) {
  set_has_vertical_angle_step();
  vertical_angle_step_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.LaserScan.vertical_angle_step)
}

// optional uint32 vertical_count = 13;
inline bool LaserScan::has_vertical_count() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LaserScan::set_has_vertical_count() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LaserScan::clear_has_vertical_count() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LaserScan::clear_vertical_count() {
  vertical_count_ = 0u;
  clear_has_vertical_count();
}
inline ::google::protobuf::uint32 LaserScan::vertical_count() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.LaserScan.vertical_count)
  return vertical_count_;
}
inline void LaserScan::set_vertical_count(::google::protobuf::uint32 value) {
  set_has_vertical_count();
  vertical_count_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.LaserScan.vertical_count)
}

// repeated double ranges = 14;
inline int LaserScan::ranges_size() const {
  return ranges_.size();
}
inline void LaserScan::clear_ranges() {
  ranges_.Clear();
}
inline double LaserScan::ranges(int index) const {
  // @@protoc_insertion_point(field_get:ignition.msgs.LaserScan.ranges)
  return ranges_.Get(index);
}
inline void LaserScan::set_ranges(int index, double value) {
  ranges_.Set(index, value);
  // @@protoc_insertion_point(field_set:ignition.msgs.LaserScan.ranges)
}
inline void LaserScan::add_ranges(double value) {
  ranges_.Add(value);
  // @@protoc_insertion_point(field_add:ignition.msgs.LaserScan.ranges)
}
inline const ::google::protobuf::RepeatedField< double >&
LaserScan::ranges() const {
  // @@protoc_insertion_point(field_list:ignition.msgs.LaserScan.ranges)
  return ranges_;
}
inline ::google::protobuf::RepeatedField< double >*
LaserScan::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:ignition.msgs.LaserScan.ranges)
  return &ranges_;
}

// repeated double intensities = 15;
inline int LaserScan::intensities_size() const {
  return intensities_.size();
}
inline void LaserScan::clear_intensities() {
  intensities_.Clear();
}
inline double LaserScan::intensities(int index) const {
  // @@protoc_insertion_point(field_get:ignition.msgs.LaserScan.intensities)
  return intensities_.Get(index);
}
inline void LaserScan::set_intensities(int index, double value) {
  intensities_.Set(index, value);
  // @@protoc_insertion_point(field_set:ignition.msgs.LaserScan.intensities)
}
inline void LaserScan::add_intensities(double value) {
  intensities_.Add(value);
  // @@protoc_insertion_point(field_add:ignition.msgs.LaserScan.intensities)
}
inline const ::google::protobuf::RepeatedField< double >&
LaserScan::intensities() const {
  // @@protoc_insertion_point(field_list:ignition.msgs.LaserScan.intensities)
  return intensities_;
}
inline ::google::protobuf::RepeatedField< double >*
LaserScan::mutable_intensities() {
  // @@protoc_insertion_point(field_mutable_list:ignition.msgs.LaserScan.intensities)
  return &intensities_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef std::unique_ptr<LaserScan> LaserScanUniquePtr;
typedef std::unique_ptr<const LaserScan> ConstLaserScanUniquePtr;
typedef std::shared_ptr<LaserScan> LaserScanSharedPtr;
typedef std::shared_ptr<const LaserScan> ConstLaserScanSharedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

#ifdef _MSC_VER
#pragma warning(pop)
#endif
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ignition_2fmsgs_2flaserscan_2eproto__INCLUDED
