// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ignition/msgs/double.proto

#ifndef PROTOBUF_ignition_2fmsgs_2fdouble_2eproto__INCLUDED
#define PROTOBUF_ignition_2fmsgs_2fdouble_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/header.pb.h"
#ifndef _MSC_VER
#pragma GCC system_header
#else
#pragma warning(push)
#pragma warning(disable: 4244 4267 4100 4244 4512 4127 4068 4275 4251)
#endif
#include <memory>
#include <ignition/msgs/Export.hh>
// @@protoc_insertion_point(includes)

namespace ignition {
namespace msgs {

// Internal implementation detail -- do not call these.
void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fdouble_2eproto();
void protobuf_AssignDesc_ignition_2fmsgs_2fdouble_2eproto();
void protobuf_ShutdownFile_ignition_2fmsgs_2fdouble_2eproto();

class Double;

// ===================================================================

class IGNITION_MSGS_VISIBLE Double : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.Double) */ {
 public:
  Double();
  virtual ~Double();

  Double(const Double& from);

  inline Double& operator=(const Double& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Double& default_instance();

  void Swap(Double* other);

  // implements Message ----------------------------------------------

  inline Double* New() const { return New(NULL); }

  Double* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Double& from);
  void MergeFrom(const Double& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Double* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ignition.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::ignition::msgs::Header& header() const;
  ::ignition::msgs::Header* mutable_header();
  ::ignition::msgs::Header* release_header();
  void set_allocated_header(::ignition::msgs::Header* header);

  // optional double data = 2 [default = 0];
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  double data() const;
  void set_data(double value);

  // @@protoc_insertion_point(class_scope:ignition.msgs.Double)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ignition::msgs::Header* header_;
  double data_;
  friend void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fdouble_2eproto();
  friend void protobuf_AssignDesc_ignition_2fmsgs_2fdouble_2eproto();
  friend void protobuf_ShutdownFile_ignition_2fmsgs_2fdouble_2eproto();

  void InitAsDefaultInstance();
  static Double* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Double

// optional .ignition.msgs.Header header = 1;
inline bool Double::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Double::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Double::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Double::clear_header() {
  if (header_ != NULL) header_->::ignition::msgs::Header::Clear();
  clear_has_header();
}
inline const ::ignition::msgs::Header& Double::header() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Double.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ignition::msgs::Header* Double::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::ignition::msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Double.header)
  return header_;
}
inline ::ignition::msgs::Header* Double::release_header() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Double.header)
  clear_has_header();
  ::ignition::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Double::set_allocated_header(::ignition::msgs::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Double.header)
}

// optional double data = 2 [default = 0];
inline bool Double::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Double::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Double::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Double::clear_data() {
  data_ = 0;
  clear_has_data();
}
inline double Double::data() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Double.data)
  return data_;
}
inline void Double::set_data(double value) {
  set_has_data();
  data_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Double.data)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef std::unique_ptr<Double> DoubleUniquePtr;
typedef std::unique_ptr<const Double> ConstDoubleUniquePtr;
typedef std::shared_ptr<Double> DoubleSharedPtr;
typedef std::shared_ptr<const Double> ConstDoubleSharedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

#ifdef _MSC_VER
#pragma warning(pop)
#endif
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ignition_2fmsgs_2fdouble_2eproto__INCLUDED
