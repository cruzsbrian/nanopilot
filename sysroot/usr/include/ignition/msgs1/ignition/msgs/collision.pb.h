// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ignition/msgs/collision.proto

#ifndef PROTOBUF_ignition_2fmsgs_2fcollision_2eproto__INCLUDED
#define PROTOBUF_ignition_2fmsgs_2fcollision_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/pose.pb.h"
#include "ignition/msgs/geometry.pb.h"
#include "ignition/msgs/surface.pb.h"
#include "ignition/msgs/visual.pb.h"
#include "ignition/msgs/header.pb.h"
#ifndef _MSC_VER
#pragma GCC system_header
#else
#pragma warning(push)
#pragma warning(disable: 4244 4267 4100 4244 4512 4127 4068 4275 4251)
#endif
#include <memory>
#include <ignition/msgs/Export.hh>
// @@protoc_insertion_point(includes)

namespace ignition {
namespace msgs {

// Internal implementation detail -- do not call these.
void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fcollision_2eproto();
void protobuf_AssignDesc_ignition_2fmsgs_2fcollision_2eproto();
void protobuf_ShutdownFile_ignition_2fmsgs_2fcollision_2eproto();

class Collision;

// ===================================================================

class IGNITION_MSGS_VISIBLE Collision : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.Collision) */ {
 public:
  Collision();
  virtual ~Collision();

  Collision(const Collision& from);

  inline Collision& operator=(const Collision& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Collision& default_instance();

  void Swap(Collision* other);

  // implements Message ----------------------------------------------

  inline Collision* New() const { return New(NULL); }

  Collision* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Collision& from);
  void MergeFrom(const Collision& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Collision* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ignition.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::ignition::msgs::Header& header() const;
  ::ignition::msgs::Header* mutable_header();
  ::ignition::msgs::Header* release_header();
  void set_allocated_header(::ignition::msgs::Header* header);

  // optional uint32 id = 2 [default = 0];
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional string name = 3 [default = ""];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional double laser_retro = 4;
  bool has_laser_retro() const;
  void clear_laser_retro();
  static const int kLaserRetroFieldNumber = 4;
  double laser_retro() const;
  void set_laser_retro(double value);

  // optional double max_contacts = 5;
  bool has_max_contacts() const;
  void clear_max_contacts();
  static const int kMaxContactsFieldNumber = 5;
  double max_contacts() const;
  void set_max_contacts(double value);

  // optional .ignition.msgs.Pose pose = 6;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 6;
  const ::ignition::msgs::Pose& pose() const;
  ::ignition::msgs::Pose* mutable_pose();
  ::ignition::msgs::Pose* release_pose();
  void set_allocated_pose(::ignition::msgs::Pose* pose);

  // optional .ignition.msgs.Geometry geometry = 7;
  bool has_geometry() const;
  void clear_geometry();
  static const int kGeometryFieldNumber = 7;
  const ::ignition::msgs::Geometry& geometry() const;
  ::ignition::msgs::Geometry* mutable_geometry();
  ::ignition::msgs::Geometry* release_geometry();
  void set_allocated_geometry(::ignition::msgs::Geometry* geometry);

  // optional .ignition.msgs.Surface surface = 8;
  bool has_surface() const;
  void clear_surface();
  static const int kSurfaceFieldNumber = 8;
  const ::ignition::msgs::Surface& surface() const;
  ::ignition::msgs::Surface* mutable_surface();
  ::ignition::msgs::Surface* release_surface();
  void set_allocated_surface(::ignition::msgs::Surface* surface);

  // repeated .ignition.msgs.Visual visual = 9;
  int visual_size() const;
  void clear_visual();
  static const int kVisualFieldNumber = 9;
  const ::ignition::msgs::Visual& visual(int index) const;
  ::ignition::msgs::Visual* mutable_visual(int index);
  ::ignition::msgs::Visual* add_visual();
  ::google::protobuf::RepeatedPtrField< ::ignition::msgs::Visual >*
      mutable_visual();
  const ::google::protobuf::RepeatedPtrField< ::ignition::msgs::Visual >&
      visual() const;

  // @@protoc_insertion_point(class_scope:ignition.msgs.Collision)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_laser_retro();
  inline void clear_has_laser_retro();
  inline void set_has_max_contacts();
  inline void clear_has_max_contacts();
  inline void set_has_pose();
  inline void clear_has_pose();
  inline void set_has_geometry();
  inline void clear_has_geometry();
  inline void set_has_surface();
  inline void clear_has_surface();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ignition::msgs::Header* header_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  double laser_retro_;
  double max_contacts_;
  ::ignition::msgs::Pose* pose_;
  ::ignition::msgs::Geometry* geometry_;
  ::ignition::msgs::Surface* surface_;
  ::google::protobuf::RepeatedPtrField< ::ignition::msgs::Visual > visual_;
  ::google::protobuf::uint32 id_;
  friend void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fcollision_2eproto();
  friend void protobuf_AssignDesc_ignition_2fmsgs_2fcollision_2eproto();
  friend void protobuf_ShutdownFile_ignition_2fmsgs_2fcollision_2eproto();

  void InitAsDefaultInstance();
  static Collision* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Collision

// optional .ignition.msgs.Header header = 1;
inline bool Collision::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Collision::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Collision::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Collision::clear_header() {
  if (header_ != NULL) header_->::ignition::msgs::Header::Clear();
  clear_has_header();
}
inline const ::ignition::msgs::Header& Collision::header() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Collision.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ignition::msgs::Header* Collision::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::ignition::msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Collision.header)
  return header_;
}
inline ::ignition::msgs::Header* Collision::release_header() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Collision.header)
  clear_has_header();
  ::ignition::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Collision::set_allocated_header(::ignition::msgs::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Collision.header)
}

// optional uint32 id = 2 [default = 0];
inline bool Collision::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Collision::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Collision::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Collision::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Collision::id() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Collision.id)
  return id_;
}
inline void Collision::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Collision.id)
}

// optional string name = 3 [default = ""];
inline bool Collision::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Collision::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Collision::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Collision::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Collision::name() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Collision.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Collision::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.Collision.name)
}
inline void Collision::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.Collision.name)
}
inline void Collision::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.Collision.name)
}
inline ::std::string* Collision::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Collision.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Collision::release_name() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Collision.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Collision::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Collision.name)
}

// optional double laser_retro = 4;
inline bool Collision::has_laser_retro() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Collision::set_has_laser_retro() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Collision::clear_has_laser_retro() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Collision::clear_laser_retro() {
  laser_retro_ = 0;
  clear_has_laser_retro();
}
inline double Collision::laser_retro() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Collision.laser_retro)
  return laser_retro_;
}
inline void Collision::set_laser_retro(double value) {
  set_has_laser_retro();
  laser_retro_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Collision.laser_retro)
}

// optional double max_contacts = 5;
inline bool Collision::has_max_contacts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Collision::set_has_max_contacts() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Collision::clear_has_max_contacts() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Collision::clear_max_contacts() {
  max_contacts_ = 0;
  clear_has_max_contacts();
}
inline double Collision::max_contacts() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Collision.max_contacts)
  return max_contacts_;
}
inline void Collision::set_max_contacts(double value) {
  set_has_max_contacts();
  max_contacts_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Collision.max_contacts)
}

// optional .ignition.msgs.Pose pose = 6;
inline bool Collision::has_pose() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Collision::set_has_pose() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Collision::clear_has_pose() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Collision::clear_pose() {
  if (pose_ != NULL) pose_->::ignition::msgs::Pose::Clear();
  clear_has_pose();
}
inline const ::ignition::msgs::Pose& Collision::pose() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Collision.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::ignition::msgs::Pose* Collision::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::ignition::msgs::Pose;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Collision.pose)
  return pose_;
}
inline ::ignition::msgs::Pose* Collision::release_pose() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Collision.pose)
  clear_has_pose();
  ::ignition::msgs::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void Collision::set_allocated_pose(::ignition::msgs::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Collision.pose)
}

// optional .ignition.msgs.Geometry geometry = 7;
inline bool Collision::has_geometry() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Collision::set_has_geometry() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Collision::clear_has_geometry() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Collision::clear_geometry() {
  if (geometry_ != NULL) geometry_->::ignition::msgs::Geometry::Clear();
  clear_has_geometry();
}
inline const ::ignition::msgs::Geometry& Collision::geometry() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Collision.geometry)
  return geometry_ != NULL ? *geometry_ : *default_instance_->geometry_;
}
inline ::ignition::msgs::Geometry* Collision::mutable_geometry() {
  set_has_geometry();
  if (geometry_ == NULL) {
    geometry_ = new ::ignition::msgs::Geometry;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Collision.geometry)
  return geometry_;
}
inline ::ignition::msgs::Geometry* Collision::release_geometry() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Collision.geometry)
  clear_has_geometry();
  ::ignition::msgs::Geometry* temp = geometry_;
  geometry_ = NULL;
  return temp;
}
inline void Collision::set_allocated_geometry(::ignition::msgs::Geometry* geometry) {
  delete geometry_;
  geometry_ = geometry;
  if (geometry) {
    set_has_geometry();
  } else {
    clear_has_geometry();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Collision.geometry)
}

// optional .ignition.msgs.Surface surface = 8;
inline bool Collision::has_surface() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Collision::set_has_surface() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Collision::clear_has_surface() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Collision::clear_surface() {
  if (surface_ != NULL) surface_->::ignition::msgs::Surface::Clear();
  clear_has_surface();
}
inline const ::ignition::msgs::Surface& Collision::surface() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Collision.surface)
  return surface_ != NULL ? *surface_ : *default_instance_->surface_;
}
inline ::ignition::msgs::Surface* Collision::mutable_surface() {
  set_has_surface();
  if (surface_ == NULL) {
    surface_ = new ::ignition::msgs::Surface;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Collision.surface)
  return surface_;
}
inline ::ignition::msgs::Surface* Collision::release_surface() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Collision.surface)
  clear_has_surface();
  ::ignition::msgs::Surface* temp = surface_;
  surface_ = NULL;
  return temp;
}
inline void Collision::set_allocated_surface(::ignition::msgs::Surface* surface) {
  delete surface_;
  surface_ = surface;
  if (surface) {
    set_has_surface();
  } else {
    clear_has_surface();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Collision.surface)
}

// repeated .ignition.msgs.Visual visual = 9;
inline int Collision::visual_size() const {
  return visual_.size();
}
inline void Collision::clear_visual() {
  visual_.Clear();
}
inline const ::ignition::msgs::Visual& Collision::visual(int index) const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Collision.visual)
  return visual_.Get(index);
}
inline ::ignition::msgs::Visual* Collision::mutable_visual(int index) {
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Collision.visual)
  return visual_.Mutable(index);
}
inline ::ignition::msgs::Visual* Collision::add_visual() {
  // @@protoc_insertion_point(field_add:ignition.msgs.Collision.visual)
  return visual_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ignition::msgs::Visual >*
Collision::mutable_visual() {
  // @@protoc_insertion_point(field_mutable_list:ignition.msgs.Collision.visual)
  return &visual_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ignition::msgs::Visual >&
Collision::visual() const {
  // @@protoc_insertion_point(field_list:ignition.msgs.Collision.visual)
  return visual_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef std::unique_ptr<Collision> CollisionUniquePtr;
typedef std::unique_ptr<const Collision> ConstCollisionUniquePtr;
typedef std::shared_ptr<Collision> CollisionSharedPtr;
typedef std::shared_ptr<const Collision> ConstCollisionSharedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

#ifdef _MSC_VER
#pragma warning(pop)
#endif
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ignition_2fmsgs_2fcollision_2eproto__INCLUDED
