// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ignition/msgs/atmosphere.proto

#ifndef PROTOBUF_ignition_2fmsgs_2fatmosphere_2eproto__INCLUDED
#define PROTOBUF_ignition_2fmsgs_2fatmosphere_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/header.pb.h"
#ifndef _MSC_VER
#pragma GCC system_header
#else
#pragma warning(push)
#pragma warning(disable: 4244 4267 4100 4244 4512 4127 4068 4275 4251)
#endif
#include <memory>
#include <ignition/msgs/Export.hh>
// @@protoc_insertion_point(includes)

namespace ignition {
namespace msgs {

// Internal implementation detail -- do not call these.
void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fatmosphere_2eproto();
void protobuf_AssignDesc_ignition_2fmsgs_2fatmosphere_2eproto();
void protobuf_ShutdownFile_ignition_2fmsgs_2fatmosphere_2eproto();

class Atmosphere;

enum Atmosphere_Type {
  Atmosphere_Type_ADIABATIC = 1
};
IGNITION_MSGS_VISIBLE bool Atmosphere_Type_IsValid(int value);
const Atmosphere_Type Atmosphere_Type_Type_MIN = Atmosphere_Type_ADIABATIC;
const Atmosphere_Type Atmosphere_Type_Type_MAX = Atmosphere_Type_ADIABATIC;
const int Atmosphere_Type_Type_ARRAYSIZE = Atmosphere_Type_Type_MAX + 1;

IGNITION_MSGS_VISIBLE const ::google::protobuf::EnumDescriptor* Atmosphere_Type_descriptor();
inline const ::std::string& Atmosphere_Type_Name(Atmosphere_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Atmosphere_Type_descriptor(), value);
}
inline bool Atmosphere_Type_Parse(
    const ::std::string& name, Atmosphere_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Atmosphere_Type>(
    Atmosphere_Type_descriptor(), name, value);
}
// ===================================================================

class IGNITION_MSGS_VISIBLE Atmosphere : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.Atmosphere) */ {
 public:
  Atmosphere();
  virtual ~Atmosphere();

  Atmosphere(const Atmosphere& from);

  inline Atmosphere& operator=(const Atmosphere& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Atmosphere& default_instance();

  void Swap(Atmosphere* other);

  // implements Message ----------------------------------------------

  inline Atmosphere* New() const { return New(NULL); }

  Atmosphere* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Atmosphere& from);
  void MergeFrom(const Atmosphere& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Atmosphere* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Atmosphere_Type Type;
  static const Type ADIABATIC =
    Atmosphere_Type_ADIABATIC;
  static inline bool Type_IsValid(int value) {
    return Atmosphere_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Atmosphere_Type_Type_MIN;
  static const Type Type_MAX =
    Atmosphere_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Atmosphere_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Atmosphere_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Atmosphere_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Atmosphere_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .ignition.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::ignition::msgs::Header& header() const;
  ::ignition::msgs::Header* mutable_header();
  ::ignition::msgs::Header* release_header();
  void set_allocated_header(::ignition::msgs::Header* header);

  // optional .ignition.msgs.Atmosphere.Type type = 2 [default = ADIABATIC];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::ignition::msgs::Atmosphere_Type type() const;
  void set_type(::ignition::msgs::Atmosphere_Type value);

  // optional double temperature = 3;
  bool has_temperature() const;
  void clear_temperature();
  static const int kTemperatureFieldNumber = 3;
  double temperature() const;
  void set_temperature(double value);

  // optional double pressure = 4;
  bool has_pressure() const;
  void clear_pressure();
  static const int kPressureFieldNumber = 4;
  double pressure() const;
  void set_pressure(double value);

  // optional double mass_density = 5;
  bool has_mass_density() const;
  void clear_mass_density();
  static const int kMassDensityFieldNumber = 5;
  double mass_density() const;
  void set_mass_density(double value);

  // optional bool enable_atmosphere = 6;
  bool has_enable_atmosphere() const;
  void clear_enable_atmosphere();
  static const int kEnableAtmosphereFieldNumber = 6;
  bool enable_atmosphere() const;
  void set_enable_atmosphere(bool value);

  // @@protoc_insertion_point(class_scope:ignition.msgs.Atmosphere)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_temperature();
  inline void clear_has_temperature();
  inline void set_has_pressure();
  inline void clear_has_pressure();
  inline void set_has_mass_density();
  inline void clear_has_mass_density();
  inline void set_has_enable_atmosphere();
  inline void clear_has_enable_atmosphere();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ignition::msgs::Header* header_;
  double temperature_;
  double pressure_;
  int type_;
  bool enable_atmosphere_;
  double mass_density_;
  friend void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fatmosphere_2eproto();
  friend void protobuf_AssignDesc_ignition_2fmsgs_2fatmosphere_2eproto();
  friend void protobuf_ShutdownFile_ignition_2fmsgs_2fatmosphere_2eproto();

  void InitAsDefaultInstance();
  static Atmosphere* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Atmosphere

// optional .ignition.msgs.Header header = 1;
inline bool Atmosphere::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Atmosphere::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Atmosphere::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Atmosphere::clear_header() {
  if (header_ != NULL) header_->::ignition::msgs::Header::Clear();
  clear_has_header();
}
inline const ::ignition::msgs::Header& Atmosphere::header() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Atmosphere.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ignition::msgs::Header* Atmosphere::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::ignition::msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Atmosphere.header)
  return header_;
}
inline ::ignition::msgs::Header* Atmosphere::release_header() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Atmosphere.header)
  clear_has_header();
  ::ignition::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Atmosphere::set_allocated_header(::ignition::msgs::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Atmosphere.header)
}

// optional .ignition.msgs.Atmosphere.Type type = 2 [default = ADIABATIC];
inline bool Atmosphere::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Atmosphere::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Atmosphere::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Atmosphere::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::ignition::msgs::Atmosphere_Type Atmosphere::type() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Atmosphere.type)
  return static_cast< ::ignition::msgs::Atmosphere_Type >(type_);
}
inline void Atmosphere::set_type(::ignition::msgs::Atmosphere_Type value) {
  assert(::ignition::msgs::Atmosphere_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Atmosphere.type)
}

// optional double temperature = 3;
inline bool Atmosphere::has_temperature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Atmosphere::set_has_temperature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Atmosphere::clear_has_temperature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Atmosphere::clear_temperature() {
  temperature_ = 0;
  clear_has_temperature();
}
inline double Atmosphere::temperature() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Atmosphere.temperature)
  return temperature_;
}
inline void Atmosphere::set_temperature(double value) {
  set_has_temperature();
  temperature_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Atmosphere.temperature)
}

// optional double pressure = 4;
inline bool Atmosphere::has_pressure() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Atmosphere::set_has_pressure() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Atmosphere::clear_has_pressure() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Atmosphere::clear_pressure() {
  pressure_ = 0;
  clear_has_pressure();
}
inline double Atmosphere::pressure() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Atmosphere.pressure)
  return pressure_;
}
inline void Atmosphere::set_pressure(double value) {
  set_has_pressure();
  pressure_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Atmosphere.pressure)
}

// optional double mass_density = 5;
inline bool Atmosphere::has_mass_density() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Atmosphere::set_has_mass_density() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Atmosphere::clear_has_mass_density() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Atmosphere::clear_mass_density() {
  mass_density_ = 0;
  clear_has_mass_density();
}
inline double Atmosphere::mass_density() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Atmosphere.mass_density)
  return mass_density_;
}
inline void Atmosphere::set_mass_density(double value) {
  set_has_mass_density();
  mass_density_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Atmosphere.mass_density)
}

// optional bool enable_atmosphere = 6;
inline bool Atmosphere::has_enable_atmosphere() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Atmosphere::set_has_enable_atmosphere() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Atmosphere::clear_has_enable_atmosphere() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Atmosphere::clear_enable_atmosphere() {
  enable_atmosphere_ = false;
  clear_has_enable_atmosphere();
}
inline bool Atmosphere::enable_atmosphere() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Atmosphere.enable_atmosphere)
  return enable_atmosphere_;
}
inline void Atmosphere::set_enable_atmosphere(bool value) {
  set_has_enable_atmosphere();
  enable_atmosphere_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Atmosphere.enable_atmosphere)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef std::unique_ptr<Atmosphere> AtmosphereUniquePtr;
typedef std::unique_ptr<const Atmosphere> ConstAtmosphereUniquePtr;
typedef std::shared_ptr<Atmosphere> AtmosphereSharedPtr;
typedef std::shared_ptr<const Atmosphere> ConstAtmosphereSharedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ignition::msgs::Atmosphere_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ignition::msgs::Atmosphere_Type>() {
  return ::ignition::msgs::Atmosphere_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

#ifdef _MSC_VER
#pragma warning(pop)
#endif
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ignition_2fmsgs_2fatmosphere_2eproto__INCLUDED
