// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ignition/msgs/subscribe.proto

#ifndef PROTOBUF_ignition_2fmsgs_2fsubscribe_2eproto__INCLUDED
#define PROTOBUF_ignition_2fmsgs_2fsubscribe_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/header.pb.h"
#ifndef _MSC_VER
#pragma GCC system_header
#else
#pragma warning(push)
#pragma warning(disable: 4244 4267 4100 4244 4512 4127 4068 4275 4251)
#endif
#include <memory>
#include <ignition/msgs/Export.hh>
// @@protoc_insertion_point(includes)

namespace ignition {
namespace msgs {

// Internal implementation detail -- do not call these.
void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fsubscribe_2eproto();
void protobuf_AssignDesc_ignition_2fmsgs_2fsubscribe_2eproto();
void protobuf_ShutdownFile_ignition_2fmsgs_2fsubscribe_2eproto();

class Subscribe;

// ===================================================================

class IGNITION_MSGS_VISIBLE Subscribe : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.Subscribe) */ {
 public:
  Subscribe();
  virtual ~Subscribe();

  Subscribe(const Subscribe& from);

  inline Subscribe& operator=(const Subscribe& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Subscribe& default_instance();

  void Swap(Subscribe* other);

  // implements Message ----------------------------------------------

  inline Subscribe* New() const { return New(NULL); }

  Subscribe* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Subscribe& from);
  void MergeFrom(const Subscribe& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Subscribe* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ignition.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::ignition::msgs::Header& header() const;
  ::ignition::msgs::Header* mutable_header();
  ::ignition::msgs::Header* release_header();
  void set_allocated_header(::ignition::msgs::Header* header);

  // optional string topic = 2;
  bool has_topic() const;
  void clear_topic();
  static const int kTopicFieldNumber = 2;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // optional string host = 3;
  bool has_host() const;
  void clear_host();
  static const int kHostFieldNumber = 3;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // optional uint32 port = 4;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 4;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // optional string msg_type = 5;
  bool has_msg_type() const;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 5;
  const ::std::string& msg_type() const;
  void set_msg_type(const ::std::string& value);
  void set_msg_type(const char* value);
  void set_msg_type(const char* value, size_t size);
  ::std::string* mutable_msg_type();
  ::std::string* release_msg_type();
  void set_allocated_msg_type(::std::string* msg_type);

  // optional bool latching = 6 [default = false];
  bool has_latching() const;
  void clear_latching();
  static const int kLatchingFieldNumber = 6;
  bool latching() const;
  void set_latching(bool value);

  // @@protoc_insertion_point(class_scope:ignition.msgs.Subscribe)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_topic();
  inline void clear_has_topic();
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_msg_type();
  inline void clear_has_msg_type();
  inline void set_has_latching();
  inline void clear_has_latching();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ignition::msgs::Header* header_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::internal::ArenaStringPtr msg_type_;
  ::google::protobuf::uint32 port_;
  bool latching_;
  friend void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fsubscribe_2eproto();
  friend void protobuf_AssignDesc_ignition_2fmsgs_2fsubscribe_2eproto();
  friend void protobuf_ShutdownFile_ignition_2fmsgs_2fsubscribe_2eproto();

  void InitAsDefaultInstance();
  static Subscribe* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Subscribe

// optional .ignition.msgs.Header header = 1;
inline bool Subscribe::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Subscribe::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Subscribe::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Subscribe::clear_header() {
  if (header_ != NULL) header_->::ignition::msgs::Header::Clear();
  clear_has_header();
}
inline const ::ignition::msgs::Header& Subscribe::header() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Subscribe.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ignition::msgs::Header* Subscribe::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::ignition::msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Subscribe.header)
  return header_;
}
inline ::ignition::msgs::Header* Subscribe::release_header() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Subscribe.header)
  clear_has_header();
  ::ignition::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Subscribe::set_allocated_header(::ignition::msgs::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Subscribe.header)
}

// optional string topic = 2;
inline bool Subscribe::has_topic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Subscribe::set_has_topic() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Subscribe::clear_has_topic() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Subscribe::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_topic();
}
inline const ::std::string& Subscribe::topic() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Subscribe.topic)
  return topic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Subscribe::set_topic(const ::std::string& value) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.Subscribe.topic)
}
inline void Subscribe::set_topic(const char* value) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.Subscribe.topic)
}
inline void Subscribe::set_topic(const char* value, size_t size) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.Subscribe.topic)
}
inline ::std::string* Subscribe::mutable_topic() {
  set_has_topic();
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Subscribe.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Subscribe::release_topic() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Subscribe.topic)
  clear_has_topic();
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Subscribe::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    set_has_topic();
  } else {
    clear_has_topic();
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Subscribe.topic)
}

// optional string host = 3;
inline bool Subscribe::has_host() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Subscribe::set_has_host() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Subscribe::clear_has_host() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Subscribe::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host();
}
inline const ::std::string& Subscribe::host() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Subscribe.host)
  return host_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Subscribe::set_host(const ::std::string& value) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.Subscribe.host)
}
inline void Subscribe::set_host(const char* value) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.Subscribe.host)
}
inline void Subscribe::set_host(const char* value, size_t size) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.Subscribe.host)
}
inline ::std::string* Subscribe::mutable_host() {
  set_has_host();
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Subscribe.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Subscribe::release_host() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Subscribe.host)
  clear_has_host();
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Subscribe::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    set_has_host();
  } else {
    clear_has_host();
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Subscribe.host)
}

// optional uint32 port = 4;
inline bool Subscribe::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Subscribe::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Subscribe::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Subscribe::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 Subscribe::port() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Subscribe.port)
  return port_;
}
inline void Subscribe::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Subscribe.port)
}

// optional string msg_type = 5;
inline bool Subscribe::has_msg_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Subscribe::set_has_msg_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Subscribe::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Subscribe::clear_msg_type() {
  msg_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg_type();
}
inline const ::std::string& Subscribe::msg_type() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Subscribe.msg_type)
  return msg_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Subscribe::set_msg_type(const ::std::string& value) {
  set_has_msg_type();
  msg_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.Subscribe.msg_type)
}
inline void Subscribe::set_msg_type(const char* value) {
  set_has_msg_type();
  msg_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.Subscribe.msg_type)
}
inline void Subscribe::set_msg_type(const char* value, size_t size) {
  set_has_msg_type();
  msg_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.Subscribe.msg_type)
}
inline ::std::string* Subscribe::mutable_msg_type() {
  set_has_msg_type();
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Subscribe.msg_type)
  return msg_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Subscribe::release_msg_type() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Subscribe.msg_type)
  clear_has_msg_type();
  return msg_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Subscribe::set_allocated_msg_type(::std::string* msg_type) {
  if (msg_type != NULL) {
    set_has_msg_type();
  } else {
    clear_has_msg_type();
  }
  msg_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_type);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Subscribe.msg_type)
}

// optional bool latching = 6 [default = false];
inline bool Subscribe::has_latching() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Subscribe::set_has_latching() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Subscribe::clear_has_latching() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Subscribe::clear_latching() {
  latching_ = false;
  clear_has_latching();
}
inline bool Subscribe::latching() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Subscribe.latching)
  return latching_;
}
inline void Subscribe::set_latching(bool value) {
  set_has_latching();
  latching_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Subscribe.latching)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef std::unique_ptr<Subscribe> SubscribeUniquePtr;
typedef std::unique_ptr<const Subscribe> ConstSubscribeUniquePtr;
typedef std::shared_ptr<Subscribe> SubscribeSharedPtr;
typedef std::shared_ptr<const Subscribe> ConstSubscribeSharedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

#ifdef _MSC_VER
#pragma warning(pop)
#endif
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ignition_2fmsgs_2fsubscribe_2eproto__INCLUDED
