// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ignition/msgs/gps.proto

#ifndef PROTOBUF_ignition_2fmsgs_2fgps_2eproto__INCLUDED
#define PROTOBUF_ignition_2fmsgs_2fgps_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/header.pb.h"
#ifndef _MSC_VER
#pragma GCC system_header
#else
#pragma warning(push)
#pragma warning(disable: 4244 4267 4100 4244 4512 4127 4068 4275 4251)
#endif
#include <memory>
#include <ignition/msgs/Export.hh>
// @@protoc_insertion_point(includes)

namespace ignition {
namespace msgs {

// Internal implementation detail -- do not call these.
void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fgps_2eproto();
void protobuf_AssignDesc_ignition_2fmsgs_2fgps_2eproto();
void protobuf_ShutdownFile_ignition_2fmsgs_2fgps_2eproto();

class GPS;

// ===================================================================

class IGNITION_MSGS_VISIBLE GPS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.GPS) */ {
 public:
  GPS();
  virtual ~GPS();

  GPS(const GPS& from);

  inline GPS& operator=(const GPS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GPS& default_instance();

  void Swap(GPS* other);

  // implements Message ----------------------------------------------

  inline GPS* New() const { return New(NULL); }

  GPS* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GPS& from);
  void MergeFrom(const GPS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GPS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ignition.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::ignition::msgs::Header& header() const;
  ::ignition::msgs::Header* mutable_header();
  ::ignition::msgs::Header* release_header();
  void set_allocated_header(::ignition::msgs::Header* header);

  // optional string link_name = 2;
  bool has_link_name() const;
  void clear_link_name();
  static const int kLinkNameFieldNumber = 2;
  const ::std::string& link_name() const;
  void set_link_name(const ::std::string& value);
  void set_link_name(const char* value);
  void set_link_name(const char* value, size_t size);
  ::std::string* mutable_link_name();
  ::std::string* release_link_name();
  void set_allocated_link_name(::std::string* link_name);

  // optional double latitude_deg = 3;
  bool has_latitude_deg() const;
  void clear_latitude_deg();
  static const int kLatitudeDegFieldNumber = 3;
  double latitude_deg() const;
  void set_latitude_deg(double value);

  // optional double longitude_deg = 4;
  bool has_longitude_deg() const;
  void clear_longitude_deg();
  static const int kLongitudeDegFieldNumber = 4;
  double longitude_deg() const;
  void set_longitude_deg(double value);

  // optional double altitude = 5;
  bool has_altitude() const;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 5;
  double altitude() const;
  void set_altitude(double value);

  // optional double velocity_east = 6;
  bool has_velocity_east() const;
  void clear_velocity_east();
  static const int kVelocityEastFieldNumber = 6;
  double velocity_east() const;
  void set_velocity_east(double value);

  // optional double velocity_north = 7;
  bool has_velocity_north() const;
  void clear_velocity_north();
  static const int kVelocityNorthFieldNumber = 7;
  double velocity_north() const;
  void set_velocity_north(double value);

  // optional double velocity_up = 8;
  bool has_velocity_up() const;
  void clear_velocity_up();
  static const int kVelocityUpFieldNumber = 8;
  double velocity_up() const;
  void set_velocity_up(double value);

  // @@protoc_insertion_point(class_scope:ignition.msgs.GPS)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_link_name();
  inline void clear_has_link_name();
  inline void set_has_latitude_deg();
  inline void clear_has_latitude_deg();
  inline void set_has_longitude_deg();
  inline void clear_has_longitude_deg();
  inline void set_has_altitude();
  inline void clear_has_altitude();
  inline void set_has_velocity_east();
  inline void clear_has_velocity_east();
  inline void set_has_velocity_north();
  inline void clear_has_velocity_north();
  inline void set_has_velocity_up();
  inline void clear_has_velocity_up();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ignition::msgs::Header* header_;
  ::google::protobuf::internal::ArenaStringPtr link_name_;
  double latitude_deg_;
  double longitude_deg_;
  double altitude_;
  double velocity_east_;
  double velocity_north_;
  double velocity_up_;
  friend void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fgps_2eproto();
  friend void protobuf_AssignDesc_ignition_2fmsgs_2fgps_2eproto();
  friend void protobuf_ShutdownFile_ignition_2fmsgs_2fgps_2eproto();

  void InitAsDefaultInstance();
  static GPS* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GPS

// optional .ignition.msgs.Header header = 1;
inline bool GPS::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GPS::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GPS::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GPS::clear_header() {
  if (header_ != NULL) header_->::ignition::msgs::Header::Clear();
  clear_has_header();
}
inline const ::ignition::msgs::Header& GPS::header() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.GPS.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ignition::msgs::Header* GPS::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::ignition::msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.GPS.header)
  return header_;
}
inline ::ignition::msgs::Header* GPS::release_header() {
  // @@protoc_insertion_point(field_release:ignition.msgs.GPS.header)
  clear_has_header();
  ::ignition::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void GPS::set_allocated_header(::ignition::msgs::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.GPS.header)
}

// optional string link_name = 2;
inline bool GPS::has_link_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GPS::set_has_link_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GPS::clear_has_link_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GPS::clear_link_name() {
  link_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_link_name();
}
inline const ::std::string& GPS::link_name() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.GPS.link_name)
  return link_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GPS::set_link_name(const ::std::string& value) {
  set_has_link_name();
  link_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.GPS.link_name)
}
inline void GPS::set_link_name(const char* value) {
  set_has_link_name();
  link_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.GPS.link_name)
}
inline void GPS::set_link_name(const char* value, size_t size) {
  set_has_link_name();
  link_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.GPS.link_name)
}
inline ::std::string* GPS::mutable_link_name() {
  set_has_link_name();
  // @@protoc_insertion_point(field_mutable:ignition.msgs.GPS.link_name)
  return link_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GPS::release_link_name() {
  // @@protoc_insertion_point(field_release:ignition.msgs.GPS.link_name)
  clear_has_link_name();
  return link_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GPS::set_allocated_link_name(::std::string* link_name) {
  if (link_name != NULL) {
    set_has_link_name();
  } else {
    clear_has_link_name();
  }
  link_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), link_name);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.GPS.link_name)
}

// optional double latitude_deg = 3;
inline bool GPS::has_latitude_deg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GPS::set_has_latitude_deg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GPS::clear_has_latitude_deg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GPS::clear_latitude_deg() {
  latitude_deg_ = 0;
  clear_has_latitude_deg();
}
inline double GPS::latitude_deg() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.GPS.latitude_deg)
  return latitude_deg_;
}
inline void GPS::set_latitude_deg(double value) {
  set_has_latitude_deg();
  latitude_deg_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.GPS.latitude_deg)
}

// optional double longitude_deg = 4;
inline bool GPS::has_longitude_deg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GPS::set_has_longitude_deg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GPS::clear_has_longitude_deg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GPS::clear_longitude_deg() {
  longitude_deg_ = 0;
  clear_has_longitude_deg();
}
inline double GPS::longitude_deg() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.GPS.longitude_deg)
  return longitude_deg_;
}
inline void GPS::set_longitude_deg(double value) {
  set_has_longitude_deg();
  longitude_deg_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.GPS.longitude_deg)
}

// optional double altitude = 5;
inline bool GPS::has_altitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GPS::set_has_altitude() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GPS::clear_has_altitude() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GPS::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
inline double GPS::altitude() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.GPS.altitude)
  return altitude_;
}
inline void GPS::set_altitude(double value) {
  set_has_altitude();
  altitude_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.GPS.altitude)
}

// optional double velocity_east = 6;
inline bool GPS::has_velocity_east() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GPS::set_has_velocity_east() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GPS::clear_has_velocity_east() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GPS::clear_velocity_east() {
  velocity_east_ = 0;
  clear_has_velocity_east();
}
inline double GPS::velocity_east() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.GPS.velocity_east)
  return velocity_east_;
}
inline void GPS::set_velocity_east(double value) {
  set_has_velocity_east();
  velocity_east_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.GPS.velocity_east)
}

// optional double velocity_north = 7;
inline bool GPS::has_velocity_north() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GPS::set_has_velocity_north() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GPS::clear_has_velocity_north() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GPS::clear_velocity_north() {
  velocity_north_ = 0;
  clear_has_velocity_north();
}
inline double GPS::velocity_north() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.GPS.velocity_north)
  return velocity_north_;
}
inline void GPS::set_velocity_north(double value) {
  set_has_velocity_north();
  velocity_north_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.GPS.velocity_north)
}

// optional double velocity_up = 8;
inline bool GPS::has_velocity_up() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GPS::set_has_velocity_up() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GPS::clear_has_velocity_up() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GPS::clear_velocity_up() {
  velocity_up_ = 0;
  clear_has_velocity_up();
}
inline double GPS::velocity_up() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.GPS.velocity_up)
  return velocity_up_;
}
inline void GPS::set_velocity_up(double value) {
  set_has_velocity_up();
  velocity_up_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.GPS.velocity_up)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef std::unique_ptr<GPS> GPSUniquePtr;
typedef std::unique_ptr<const GPS> ConstGPSUniquePtr;
typedef std::shared_ptr<GPS> GPSSharedPtr;
typedef std::shared_ptr<const GPS> ConstGPSSharedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

#ifdef _MSC_VER
#pragma warning(pop)
#endif
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ignition_2fmsgs_2fgps_2eproto__INCLUDED
