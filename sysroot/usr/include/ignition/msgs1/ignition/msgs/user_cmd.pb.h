// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ignition/msgs/user_cmd.proto

#ifndef PROTOBUF_ignition_2fmsgs_2fuser_5fcmd_2eproto__INCLUDED
#define PROTOBUF_ignition_2fmsgs_2fuser_5fcmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/light.pb.h"
#include "ignition/msgs/model.pb.h"
#include "ignition/msgs/world_control.pb.h"
#include "ignition/msgs/wrench.pb.h"
#include "ignition/msgs/header.pb.h"
#ifndef _MSC_VER
#pragma GCC system_header
#else
#pragma warning(push)
#pragma warning(disable: 4244 4267 4100 4244 4512 4127 4068 4275 4251)
#endif
#include <memory>
#include <ignition/msgs/Export.hh>
// @@protoc_insertion_point(includes)

namespace ignition {
namespace msgs {

// Internal implementation detail -- do not call these.
void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fuser_5fcmd_2eproto();
void protobuf_AssignDesc_ignition_2fmsgs_2fuser_5fcmd_2eproto();
void protobuf_ShutdownFile_ignition_2fmsgs_2fuser_5fcmd_2eproto();

class UserCmd;

enum UserCmd_Type {
  UserCmd_Type_MOVING = 1,
  UserCmd_Type_WORLD_CONTROL = 2,
  UserCmd_Type_WRENCH = 3,
  UserCmd_Type_SCALING = 4
};
IGNITION_MSGS_VISIBLE bool UserCmd_Type_IsValid(int value);
const UserCmd_Type UserCmd_Type_Type_MIN = UserCmd_Type_MOVING;
const UserCmd_Type UserCmd_Type_Type_MAX = UserCmd_Type_SCALING;
const int UserCmd_Type_Type_ARRAYSIZE = UserCmd_Type_Type_MAX + 1;

IGNITION_MSGS_VISIBLE const ::google::protobuf::EnumDescriptor* UserCmd_Type_descriptor();
inline const ::std::string& UserCmd_Type_Name(UserCmd_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserCmd_Type_descriptor(), value);
}
inline bool UserCmd_Type_Parse(
    const ::std::string& name, UserCmd_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserCmd_Type>(
    UserCmd_Type_descriptor(), name, value);
}
// ===================================================================

class IGNITION_MSGS_VISIBLE UserCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.UserCmd) */ {
 public:
  UserCmd();
  virtual ~UserCmd();

  UserCmd(const UserCmd& from);

  inline UserCmd& operator=(const UserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserCmd& default_instance();

  void Swap(UserCmd* other);

  // implements Message ----------------------------------------------

  inline UserCmd* New() const { return New(NULL); }

  UserCmd* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserCmd& from);
  void MergeFrom(const UserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef UserCmd_Type Type;
  static const Type MOVING =
    UserCmd_Type_MOVING;
  static const Type WORLD_CONTROL =
    UserCmd_Type_WORLD_CONTROL;
  static const Type WRENCH =
    UserCmd_Type_WRENCH;
  static const Type SCALING =
    UserCmd_Type_SCALING;
  static inline bool Type_IsValid(int value) {
    return UserCmd_Type_IsValid(value);
  }
  static const Type Type_MIN =
    UserCmd_Type_Type_MIN;
  static const Type Type_MAX =
    UserCmd_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    UserCmd_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return UserCmd_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return UserCmd_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return UserCmd_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .ignition.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::ignition::msgs::Header& header() const;
  ::ignition::msgs::Header* mutable_header();
  ::ignition::msgs::Header* release_header();
  void set_allocated_header(::ignition::msgs::Header* header);

  // optional uint32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional string description = 3;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional .ignition.msgs.UserCmd.Type type = 4;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::ignition::msgs::UserCmd_Type type() const;
  void set_type(::ignition::msgs::UserCmd_Type value);

  // repeated .ignition.msgs.Model model = 5;
  int model_size() const;
  void clear_model();
  static const int kModelFieldNumber = 5;
  const ::ignition::msgs::Model& model(int index) const;
  ::ignition::msgs::Model* mutable_model(int index);
  ::ignition::msgs::Model* add_model();
  ::google::protobuf::RepeatedPtrField< ::ignition::msgs::Model >*
      mutable_model();
  const ::google::protobuf::RepeatedPtrField< ::ignition::msgs::Model >&
      model() const;

  // repeated .ignition.msgs.Light light = 6;
  int light_size() const;
  void clear_light();
  static const int kLightFieldNumber = 6;
  const ::ignition::msgs::Light& light(int index) const;
  ::ignition::msgs::Light* mutable_light(int index);
  ::ignition::msgs::Light* add_light();
  ::google::protobuf::RepeatedPtrField< ::ignition::msgs::Light >*
      mutable_light();
  const ::google::protobuf::RepeatedPtrField< ::ignition::msgs::Light >&
      light() const;

  // optional string entity_name = 7;
  bool has_entity_name() const;
  void clear_entity_name();
  static const int kEntityNameFieldNumber = 7;
  const ::std::string& entity_name() const;
  void set_entity_name(const ::std::string& value);
  void set_entity_name(const char* value);
  void set_entity_name(const char* value, size_t size);
  ::std::string* mutable_entity_name();
  ::std::string* release_entity_name();
  void set_allocated_entity_name(::std::string* entity_name);

  // optional .ignition.msgs.WorldControl world_control = 8;
  bool has_world_control() const;
  void clear_world_control();
  static const int kWorldControlFieldNumber = 8;
  const ::ignition::msgs::WorldControl& world_control() const;
  ::ignition::msgs::WorldControl* mutable_world_control();
  ::ignition::msgs::WorldControl* release_world_control();
  void set_allocated_world_control(::ignition::msgs::WorldControl* world_control);

  // optional .ignition.msgs.Wrench wrench = 9;
  bool has_wrench() const;
  void clear_wrench();
  static const int kWrenchFieldNumber = 9;
  const ::ignition::msgs::Wrench& wrench() const;
  ::ignition::msgs::Wrench* mutable_wrench();
  ::ignition::msgs::Wrench* release_wrench();
  void set_allocated_wrench(::ignition::msgs::Wrench* wrench);

  // @@protoc_insertion_point(class_scope:ignition.msgs.UserCmd)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_entity_name();
  inline void clear_has_entity_name();
  inline void set_has_world_control();
  inline void clear_has_world_control();
  inline void set_has_wrench();
  inline void clear_has_wrench();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ignition::msgs::Header* header_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::uint32 id_;
  int type_;
  ::google::protobuf::RepeatedPtrField< ::ignition::msgs::Model > model_;
  ::google::protobuf::RepeatedPtrField< ::ignition::msgs::Light > light_;
  ::google::protobuf::internal::ArenaStringPtr entity_name_;
  ::ignition::msgs::WorldControl* world_control_;
  ::ignition::msgs::Wrench* wrench_;
  friend void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fuser_5fcmd_2eproto();
  friend void protobuf_AssignDesc_ignition_2fmsgs_2fuser_5fcmd_2eproto();
  friend void protobuf_ShutdownFile_ignition_2fmsgs_2fuser_5fcmd_2eproto();

  void InitAsDefaultInstance();
  static UserCmd* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// UserCmd

// optional .ignition.msgs.Header header = 1;
inline bool UserCmd::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserCmd::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserCmd::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserCmd::clear_header() {
  if (header_ != NULL) header_->::ignition::msgs::Header::Clear();
  clear_has_header();
}
inline const ::ignition::msgs::Header& UserCmd::header() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.UserCmd.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ignition::msgs::Header* UserCmd::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::ignition::msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.UserCmd.header)
  return header_;
}
inline ::ignition::msgs::Header* UserCmd::release_header() {
  // @@protoc_insertion_point(field_release:ignition.msgs.UserCmd.header)
  clear_has_header();
  ::ignition::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void UserCmd::set_allocated_header(::ignition::msgs::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.UserCmd.header)
}

// optional uint32 id = 2;
inline bool UserCmd::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserCmd::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserCmd::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 UserCmd::id() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.UserCmd.id)
  return id_;
}
inline void UserCmd::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.UserCmd.id)
}

// optional string description = 3;
inline bool UserCmd::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserCmd::set_has_description() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserCmd::clear_has_description() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserCmd::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& UserCmd::description() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.UserCmd.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserCmd::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.UserCmd.description)
}
inline void UserCmd::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.UserCmd.description)
}
inline void UserCmd::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.UserCmd.description)
}
inline ::std::string* UserCmd::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ignition.msgs.UserCmd.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserCmd::release_description() {
  // @@protoc_insertion_point(field_release:ignition.msgs.UserCmd.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserCmd::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.UserCmd.description)
}

// optional .ignition.msgs.UserCmd.Type type = 4;
inline bool UserCmd::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserCmd::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserCmd::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::ignition::msgs::UserCmd_Type UserCmd::type() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.UserCmd.type)
  return static_cast< ::ignition::msgs::UserCmd_Type >(type_);
}
inline void UserCmd::set_type(::ignition::msgs::UserCmd_Type value) {
  assert(::ignition::msgs::UserCmd_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.UserCmd.type)
}

// repeated .ignition.msgs.Model model = 5;
inline int UserCmd::model_size() const {
  return model_.size();
}
inline void UserCmd::clear_model() {
  model_.Clear();
}
inline const ::ignition::msgs::Model& UserCmd::model(int index) const {
  // @@protoc_insertion_point(field_get:ignition.msgs.UserCmd.model)
  return model_.Get(index);
}
inline ::ignition::msgs::Model* UserCmd::mutable_model(int index) {
  // @@protoc_insertion_point(field_mutable:ignition.msgs.UserCmd.model)
  return model_.Mutable(index);
}
inline ::ignition::msgs::Model* UserCmd::add_model() {
  // @@protoc_insertion_point(field_add:ignition.msgs.UserCmd.model)
  return model_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ignition::msgs::Model >*
UserCmd::mutable_model() {
  // @@protoc_insertion_point(field_mutable_list:ignition.msgs.UserCmd.model)
  return &model_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ignition::msgs::Model >&
UserCmd::model() const {
  // @@protoc_insertion_point(field_list:ignition.msgs.UserCmd.model)
  return model_;
}

// repeated .ignition.msgs.Light light = 6;
inline int UserCmd::light_size() const {
  return light_.size();
}
inline void UserCmd::clear_light() {
  light_.Clear();
}
inline const ::ignition::msgs::Light& UserCmd::light(int index) const {
  // @@protoc_insertion_point(field_get:ignition.msgs.UserCmd.light)
  return light_.Get(index);
}
inline ::ignition::msgs::Light* UserCmd::mutable_light(int index) {
  // @@protoc_insertion_point(field_mutable:ignition.msgs.UserCmd.light)
  return light_.Mutable(index);
}
inline ::ignition::msgs::Light* UserCmd::add_light() {
  // @@protoc_insertion_point(field_add:ignition.msgs.UserCmd.light)
  return light_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ignition::msgs::Light >*
UserCmd::mutable_light() {
  // @@protoc_insertion_point(field_mutable_list:ignition.msgs.UserCmd.light)
  return &light_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ignition::msgs::Light >&
UserCmd::light() const {
  // @@protoc_insertion_point(field_list:ignition.msgs.UserCmd.light)
  return light_;
}

// optional string entity_name = 7;
inline bool UserCmd::has_entity_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserCmd::set_has_entity_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserCmd::clear_has_entity_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserCmd::clear_entity_name() {
  entity_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entity_name();
}
inline const ::std::string& UserCmd::entity_name() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.UserCmd.entity_name)
  return entity_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserCmd::set_entity_name(const ::std::string& value) {
  set_has_entity_name();
  entity_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.UserCmd.entity_name)
}
inline void UserCmd::set_entity_name(const char* value) {
  set_has_entity_name();
  entity_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.UserCmd.entity_name)
}
inline void UserCmd::set_entity_name(const char* value, size_t size) {
  set_has_entity_name();
  entity_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.UserCmd.entity_name)
}
inline ::std::string* UserCmd::mutable_entity_name() {
  set_has_entity_name();
  // @@protoc_insertion_point(field_mutable:ignition.msgs.UserCmd.entity_name)
  return entity_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserCmd::release_entity_name() {
  // @@protoc_insertion_point(field_release:ignition.msgs.UserCmd.entity_name)
  clear_has_entity_name();
  return entity_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserCmd::set_allocated_entity_name(::std::string* entity_name) {
  if (entity_name != NULL) {
    set_has_entity_name();
  } else {
    clear_has_entity_name();
  }
  entity_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entity_name);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.UserCmd.entity_name)
}

// optional .ignition.msgs.WorldControl world_control = 8;
inline bool UserCmd::has_world_control() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserCmd::set_has_world_control() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserCmd::clear_has_world_control() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserCmd::clear_world_control() {
  if (world_control_ != NULL) world_control_->::ignition::msgs::WorldControl::Clear();
  clear_has_world_control();
}
inline const ::ignition::msgs::WorldControl& UserCmd::world_control() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.UserCmd.world_control)
  return world_control_ != NULL ? *world_control_ : *default_instance_->world_control_;
}
inline ::ignition::msgs::WorldControl* UserCmd::mutable_world_control() {
  set_has_world_control();
  if (world_control_ == NULL) {
    world_control_ = new ::ignition::msgs::WorldControl;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.UserCmd.world_control)
  return world_control_;
}
inline ::ignition::msgs::WorldControl* UserCmd::release_world_control() {
  // @@protoc_insertion_point(field_release:ignition.msgs.UserCmd.world_control)
  clear_has_world_control();
  ::ignition::msgs::WorldControl* temp = world_control_;
  world_control_ = NULL;
  return temp;
}
inline void UserCmd::set_allocated_world_control(::ignition::msgs::WorldControl* world_control) {
  delete world_control_;
  world_control_ = world_control;
  if (world_control) {
    set_has_world_control();
  } else {
    clear_has_world_control();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.UserCmd.world_control)
}

// optional .ignition.msgs.Wrench wrench = 9;
inline bool UserCmd::has_wrench() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserCmd::set_has_wrench() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserCmd::clear_has_wrench() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserCmd::clear_wrench() {
  if (wrench_ != NULL) wrench_->::ignition::msgs::Wrench::Clear();
  clear_has_wrench();
}
inline const ::ignition::msgs::Wrench& UserCmd::wrench() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.UserCmd.wrench)
  return wrench_ != NULL ? *wrench_ : *default_instance_->wrench_;
}
inline ::ignition::msgs::Wrench* UserCmd::mutable_wrench() {
  set_has_wrench();
  if (wrench_ == NULL) {
    wrench_ = new ::ignition::msgs::Wrench;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.UserCmd.wrench)
  return wrench_;
}
inline ::ignition::msgs::Wrench* UserCmd::release_wrench() {
  // @@protoc_insertion_point(field_release:ignition.msgs.UserCmd.wrench)
  clear_has_wrench();
  ::ignition::msgs::Wrench* temp = wrench_;
  wrench_ = NULL;
  return temp;
}
inline void UserCmd::set_allocated_wrench(::ignition::msgs::Wrench* wrench) {
  delete wrench_;
  wrench_ = wrench;
  if (wrench) {
    set_has_wrench();
  } else {
    clear_has_wrench();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.UserCmd.wrench)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef std::unique_ptr<UserCmd> UserCmdUniquePtr;
typedef std::unique_ptr<const UserCmd> ConstUserCmdUniquePtr;
typedef std::shared_ptr<UserCmd> UserCmdSharedPtr;
typedef std::shared_ptr<const UserCmd> ConstUserCmdSharedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ignition::msgs::UserCmd_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ignition::msgs::UserCmd_Type>() {
  return ::ignition::msgs::UserCmd_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

#ifdef _MSC_VER
#pragma warning(pop)
#endif
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ignition_2fmsgs_2fuser_5fcmd_2eproto__INCLUDED
