// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ignition/msgs/tactile.proto

#ifndef PROTOBUF_ignition_2fmsgs_2ftactile_2eproto__INCLUDED
#define PROTOBUF_ignition_2fmsgs_2ftactile_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/header.pb.h"
#ifndef _MSC_VER
#pragma GCC system_header
#else
#pragma warning(push)
#pragma warning(disable: 4244 4267 4100 4244 4512 4127 4068 4275 4251)
#endif
#include <memory>
#include <ignition/msgs/Export.hh>
// @@protoc_insertion_point(includes)

namespace ignition {
namespace msgs {

// Internal implementation detail -- do not call these.
void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2ftactile_2eproto();
void protobuf_AssignDesc_ignition_2fmsgs_2ftactile_2eproto();
void protobuf_ShutdownFile_ignition_2fmsgs_2ftactile_2eproto();

class Tactile;

// ===================================================================

class IGNITION_MSGS_VISIBLE Tactile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.Tactile) */ {
 public:
  Tactile();
  virtual ~Tactile();

  Tactile(const Tactile& from);

  inline Tactile& operator=(const Tactile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tactile& default_instance();

  void Swap(Tactile* other);

  // implements Message ----------------------------------------------

  inline Tactile* New() const { return New(NULL); }

  Tactile* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Tactile& from);
  void MergeFrom(const Tactile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Tactile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ignition.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::ignition::msgs::Header& header() const;
  ::ignition::msgs::Header* mutable_header();
  ::ignition::msgs::Header* release_header();
  void set_allocated_header(::ignition::msgs::Header* header);

  // repeated string collision_name = 2;
  int collision_name_size() const;
  void clear_collision_name();
  static const int kCollisionNameFieldNumber = 2;
  const ::std::string& collision_name(int index) const;
  ::std::string* mutable_collision_name(int index);
  void set_collision_name(int index, const ::std::string& value);
  void set_collision_name(int index, const char* value);
  void set_collision_name(int index, const char* value, size_t size);
  ::std::string* add_collision_name();
  void add_collision_name(const ::std::string& value);
  void add_collision_name(const char* value);
  void add_collision_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& collision_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_collision_name();

  // repeated uint32 collision_id = 3;
  int collision_id_size() const;
  void clear_collision_id();
  static const int kCollisionIdFieldNumber = 3;
  ::google::protobuf::uint32 collision_id(int index) const;
  void set_collision_id(int index, ::google::protobuf::uint32 value);
  void add_collision_id(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      collision_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_collision_id();

  // repeated double pressure = 4;
  int pressure_size() const;
  void clear_pressure();
  static const int kPressureFieldNumber = 4;
  double pressure(int index) const;
  void set_pressure(int index, double value);
  void add_pressure(double value);
  const ::google::protobuf::RepeatedField< double >&
      pressure() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_pressure();

  // @@protoc_insertion_point(class_scope:ignition.msgs.Tactile)
 private:
  inline void set_has_header();
  inline void clear_has_header();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ignition::msgs::Header* header_;
  ::google::protobuf::RepeatedPtrField< ::std::string> collision_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > collision_id_;
  ::google::protobuf::RepeatedField< double > pressure_;
  friend void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2ftactile_2eproto();
  friend void protobuf_AssignDesc_ignition_2fmsgs_2ftactile_2eproto();
  friend void protobuf_ShutdownFile_ignition_2fmsgs_2ftactile_2eproto();

  void InitAsDefaultInstance();
  static Tactile* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Tactile

// optional .ignition.msgs.Header header = 1;
inline bool Tactile::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Tactile::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Tactile::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Tactile::clear_header() {
  if (header_ != NULL) header_->::ignition::msgs::Header::Clear();
  clear_has_header();
}
inline const ::ignition::msgs::Header& Tactile::header() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Tactile.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ignition::msgs::Header* Tactile::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::ignition::msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Tactile.header)
  return header_;
}
inline ::ignition::msgs::Header* Tactile::release_header() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Tactile.header)
  clear_has_header();
  ::ignition::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Tactile::set_allocated_header(::ignition::msgs::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Tactile.header)
}

// repeated string collision_name = 2;
inline int Tactile::collision_name_size() const {
  return collision_name_.size();
}
inline void Tactile::clear_collision_name() {
  collision_name_.Clear();
}
inline const ::std::string& Tactile::collision_name(int index) const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Tactile.collision_name)
  return collision_name_.Get(index);
}
inline ::std::string* Tactile::mutable_collision_name(int index) {
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Tactile.collision_name)
  return collision_name_.Mutable(index);
}
inline void Tactile::set_collision_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ignition.msgs.Tactile.collision_name)
  collision_name_.Mutable(index)->assign(value);
}
inline void Tactile::set_collision_name(int index, const char* value) {
  collision_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ignition.msgs.Tactile.collision_name)
}
inline void Tactile::set_collision_name(int index, const char* value, size_t size) {
  collision_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.Tactile.collision_name)
}
inline ::std::string* Tactile::add_collision_name() {
  // @@protoc_insertion_point(field_add_mutable:ignition.msgs.Tactile.collision_name)
  return collision_name_.Add();
}
inline void Tactile::add_collision_name(const ::std::string& value) {
  collision_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ignition.msgs.Tactile.collision_name)
}
inline void Tactile::add_collision_name(const char* value) {
  collision_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ignition.msgs.Tactile.collision_name)
}
inline void Tactile::add_collision_name(const char* value, size_t size) {
  collision_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ignition.msgs.Tactile.collision_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Tactile::collision_name() const {
  // @@protoc_insertion_point(field_list:ignition.msgs.Tactile.collision_name)
  return collision_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Tactile::mutable_collision_name() {
  // @@protoc_insertion_point(field_mutable_list:ignition.msgs.Tactile.collision_name)
  return &collision_name_;
}

// repeated uint32 collision_id = 3;
inline int Tactile::collision_id_size() const {
  return collision_id_.size();
}
inline void Tactile::clear_collision_id() {
  collision_id_.Clear();
}
inline ::google::protobuf::uint32 Tactile::collision_id(int index) const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Tactile.collision_id)
  return collision_id_.Get(index);
}
inline void Tactile::set_collision_id(int index, ::google::protobuf::uint32 value) {
  collision_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:ignition.msgs.Tactile.collision_id)
}
inline void Tactile::add_collision_id(::google::protobuf::uint32 value) {
  collision_id_.Add(value);
  // @@protoc_insertion_point(field_add:ignition.msgs.Tactile.collision_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Tactile::collision_id() const {
  // @@protoc_insertion_point(field_list:ignition.msgs.Tactile.collision_id)
  return collision_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Tactile::mutable_collision_id() {
  // @@protoc_insertion_point(field_mutable_list:ignition.msgs.Tactile.collision_id)
  return &collision_id_;
}

// repeated double pressure = 4;
inline int Tactile::pressure_size() const {
  return pressure_.size();
}
inline void Tactile::clear_pressure() {
  pressure_.Clear();
}
inline double Tactile::pressure(int index) const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Tactile.pressure)
  return pressure_.Get(index);
}
inline void Tactile::set_pressure(int index, double value) {
  pressure_.Set(index, value);
  // @@protoc_insertion_point(field_set:ignition.msgs.Tactile.pressure)
}
inline void Tactile::add_pressure(double value) {
  pressure_.Add(value);
  // @@protoc_insertion_point(field_add:ignition.msgs.Tactile.pressure)
}
inline const ::google::protobuf::RepeatedField< double >&
Tactile::pressure() const {
  // @@protoc_insertion_point(field_list:ignition.msgs.Tactile.pressure)
  return pressure_;
}
inline ::google::protobuf::RepeatedField< double >*
Tactile::mutable_pressure() {
  // @@protoc_insertion_point(field_mutable_list:ignition.msgs.Tactile.pressure)
  return &pressure_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef std::unique_ptr<Tactile> TactileUniquePtr;
typedef std::unique_ptr<const Tactile> ConstTactileUniquePtr;
typedef std::shared_ptr<Tactile> TactileSharedPtr;
typedef std::shared_ptr<const Tactile> ConstTactileSharedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

#ifdef _MSC_VER
#pragma warning(pop)
#endif
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ignition_2fmsgs_2ftactile_2eproto__INCLUDED
