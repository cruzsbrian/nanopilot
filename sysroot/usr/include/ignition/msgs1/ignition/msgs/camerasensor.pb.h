// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ignition/msgs/camerasensor.proto

#ifndef PROTOBUF_ignition_2fmsgs_2fcamerasensor_2eproto__INCLUDED
#define PROTOBUF_ignition_2fmsgs_2fcamerasensor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/vector2d.pb.h"
#include "ignition/msgs/distortion.pb.h"
#include "ignition/msgs/header.pb.h"
#ifndef _MSC_VER
#pragma GCC system_header
#else
#pragma warning(push)
#pragma warning(disable: 4244 4267 4100 4244 4512 4127 4068 4275 4251)
#endif
#include <memory>
#include <ignition/msgs/Export.hh>
// @@protoc_insertion_point(includes)

namespace ignition {
namespace msgs {

// Internal implementation detail -- do not call these.
void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fcamerasensor_2eproto();
void protobuf_AssignDesc_ignition_2fmsgs_2fcamerasensor_2eproto();
void protobuf_ShutdownFile_ignition_2fmsgs_2fcamerasensor_2eproto();

class CameraSensor;

// ===================================================================

class IGNITION_MSGS_VISIBLE CameraSensor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.CameraSensor) */ {
 public:
  CameraSensor();
  virtual ~CameraSensor();

  CameraSensor(const CameraSensor& from);

  inline CameraSensor& operator=(const CameraSensor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraSensor& default_instance();

  void Swap(CameraSensor* other);

  // implements Message ----------------------------------------------

  inline CameraSensor* New() const { return New(NULL); }

  CameraSensor* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CameraSensor& from);
  void MergeFrom(const CameraSensor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CameraSensor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ignition.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::ignition::msgs::Header& header() const;
  ::ignition::msgs::Header* mutable_header();
  ::ignition::msgs::Header* release_header();
  void set_allocated_header(::ignition::msgs::Header* header);

  // optional double horizontal_fov = 2;
  bool has_horizontal_fov() const;
  void clear_horizontal_fov();
  static const int kHorizontalFovFieldNumber = 2;
  double horizontal_fov() const;
  void set_horizontal_fov(double value);

  // optional .ignition.msgs.Vector2d image_size = 3;
  bool has_image_size() const;
  void clear_image_size();
  static const int kImageSizeFieldNumber = 3;
  const ::ignition::msgs::Vector2d& image_size() const;
  ::ignition::msgs::Vector2d* mutable_image_size();
  ::ignition::msgs::Vector2d* release_image_size();
  void set_allocated_image_size(::ignition::msgs::Vector2d* image_size);

  // optional string image_format = 4;
  bool has_image_format() const;
  void clear_image_format();
  static const int kImageFormatFieldNumber = 4;
  const ::std::string& image_format() const;
  void set_image_format(const ::std::string& value);
  void set_image_format(const char* value);
  void set_image_format(const char* value, size_t size);
  ::std::string* mutable_image_format();
  ::std::string* release_image_format();
  void set_allocated_image_format(::std::string* image_format);

  // optional double near_clip = 5;
  bool has_near_clip() const;
  void clear_near_clip();
  static const int kNearClipFieldNumber = 5;
  double near_clip() const;
  void set_near_clip(double value);

  // optional double far_clip = 6;
  bool has_far_clip() const;
  void clear_far_clip();
  static const int kFarClipFieldNumber = 6;
  double far_clip() const;
  void set_far_clip(double value);

  // optional bool save_enabled = 7;
  bool has_save_enabled() const;
  void clear_save_enabled();
  static const int kSaveEnabledFieldNumber = 7;
  bool save_enabled() const;
  void set_save_enabled(bool value);

  // optional string save_path = 8;
  bool has_save_path() const;
  void clear_save_path();
  static const int kSavePathFieldNumber = 8;
  const ::std::string& save_path() const;
  void set_save_path(const ::std::string& value);
  void set_save_path(const char* value);
  void set_save_path(const char* value, size_t size);
  ::std::string* mutable_save_path();
  ::std::string* release_save_path();
  void set_allocated_save_path(::std::string* save_path);

  // optional .ignition.msgs.Distortion distortion = 9;
  bool has_distortion() const;
  void clear_distortion();
  static const int kDistortionFieldNumber = 9;
  const ::ignition::msgs::Distortion& distortion() const;
  ::ignition::msgs::Distortion* mutable_distortion();
  ::ignition::msgs::Distortion* release_distortion();
  void set_allocated_distortion(::ignition::msgs::Distortion* distortion);

  // @@protoc_insertion_point(class_scope:ignition.msgs.CameraSensor)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_horizontal_fov();
  inline void clear_has_horizontal_fov();
  inline void set_has_image_size();
  inline void clear_has_image_size();
  inline void set_has_image_format();
  inline void clear_has_image_format();
  inline void set_has_near_clip();
  inline void clear_has_near_clip();
  inline void set_has_far_clip();
  inline void clear_has_far_clip();
  inline void set_has_save_enabled();
  inline void clear_has_save_enabled();
  inline void set_has_save_path();
  inline void clear_has_save_path();
  inline void set_has_distortion();
  inline void clear_has_distortion();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ignition::msgs::Header* header_;
  double horizontal_fov_;
  ::ignition::msgs::Vector2d* image_size_;
  ::google::protobuf::internal::ArenaStringPtr image_format_;
  double near_clip_;
  double far_clip_;
  ::google::protobuf::internal::ArenaStringPtr save_path_;
  ::ignition::msgs::Distortion* distortion_;
  bool save_enabled_;
  friend void IGNITION_MSGS_VISIBLE protobuf_AddDesc_ignition_2fmsgs_2fcamerasensor_2eproto();
  friend void protobuf_AssignDesc_ignition_2fmsgs_2fcamerasensor_2eproto();
  friend void protobuf_ShutdownFile_ignition_2fmsgs_2fcamerasensor_2eproto();

  void InitAsDefaultInstance();
  static CameraSensor* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CameraSensor

// optional .ignition.msgs.Header header = 1;
inline bool CameraSensor::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraSensor::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraSensor::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraSensor::clear_header() {
  if (header_ != NULL) header_->::ignition::msgs::Header::Clear();
  clear_has_header();
}
inline const ::ignition::msgs::Header& CameraSensor::header() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.CameraSensor.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ignition::msgs::Header* CameraSensor::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::ignition::msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.CameraSensor.header)
  return header_;
}
inline ::ignition::msgs::Header* CameraSensor::release_header() {
  // @@protoc_insertion_point(field_release:ignition.msgs.CameraSensor.header)
  clear_has_header();
  ::ignition::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void CameraSensor::set_allocated_header(::ignition::msgs::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.CameraSensor.header)
}

// optional double horizontal_fov = 2;
inline bool CameraSensor::has_horizontal_fov() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraSensor::set_has_horizontal_fov() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CameraSensor::clear_has_horizontal_fov() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CameraSensor::clear_horizontal_fov() {
  horizontal_fov_ = 0;
  clear_has_horizontal_fov();
}
inline double CameraSensor::horizontal_fov() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.CameraSensor.horizontal_fov)
  return horizontal_fov_;
}
inline void CameraSensor::set_horizontal_fov(double value) {
  set_has_horizontal_fov();
  horizontal_fov_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.CameraSensor.horizontal_fov)
}

// optional .ignition.msgs.Vector2d image_size = 3;
inline bool CameraSensor::has_image_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraSensor::set_has_image_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CameraSensor::clear_has_image_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CameraSensor::clear_image_size() {
  if (image_size_ != NULL) image_size_->::ignition::msgs::Vector2d::Clear();
  clear_has_image_size();
}
inline const ::ignition::msgs::Vector2d& CameraSensor::image_size() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.CameraSensor.image_size)
  return image_size_ != NULL ? *image_size_ : *default_instance_->image_size_;
}
inline ::ignition::msgs::Vector2d* CameraSensor::mutable_image_size() {
  set_has_image_size();
  if (image_size_ == NULL) {
    image_size_ = new ::ignition::msgs::Vector2d;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.CameraSensor.image_size)
  return image_size_;
}
inline ::ignition::msgs::Vector2d* CameraSensor::release_image_size() {
  // @@protoc_insertion_point(field_release:ignition.msgs.CameraSensor.image_size)
  clear_has_image_size();
  ::ignition::msgs::Vector2d* temp = image_size_;
  image_size_ = NULL;
  return temp;
}
inline void CameraSensor::set_allocated_image_size(::ignition::msgs::Vector2d* image_size) {
  delete image_size_;
  image_size_ = image_size;
  if (image_size) {
    set_has_image_size();
  } else {
    clear_has_image_size();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.CameraSensor.image_size)
}

// optional string image_format = 4;
inline bool CameraSensor::has_image_format() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CameraSensor::set_has_image_format() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CameraSensor::clear_has_image_format() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CameraSensor::clear_image_format() {
  image_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_image_format();
}
inline const ::std::string& CameraSensor::image_format() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.CameraSensor.image_format)
  return image_format_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraSensor::set_image_format(const ::std::string& value) {
  set_has_image_format();
  image_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.CameraSensor.image_format)
}
inline void CameraSensor::set_image_format(const char* value) {
  set_has_image_format();
  image_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.CameraSensor.image_format)
}
inline void CameraSensor::set_image_format(const char* value, size_t size) {
  set_has_image_format();
  image_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.CameraSensor.image_format)
}
inline ::std::string* CameraSensor::mutable_image_format() {
  set_has_image_format();
  // @@protoc_insertion_point(field_mutable:ignition.msgs.CameraSensor.image_format)
  return image_format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CameraSensor::release_image_format() {
  // @@protoc_insertion_point(field_release:ignition.msgs.CameraSensor.image_format)
  clear_has_image_format();
  return image_format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraSensor::set_allocated_image_format(::std::string* image_format) {
  if (image_format != NULL) {
    set_has_image_format();
  } else {
    clear_has_image_format();
  }
  image_format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_format);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.CameraSensor.image_format)
}

// optional double near_clip = 5;
inline bool CameraSensor::has_near_clip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CameraSensor::set_has_near_clip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CameraSensor::clear_has_near_clip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CameraSensor::clear_near_clip() {
  near_clip_ = 0;
  clear_has_near_clip();
}
inline double CameraSensor::near_clip() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.CameraSensor.near_clip)
  return near_clip_;
}
inline void CameraSensor::set_near_clip(double value) {
  set_has_near_clip();
  near_clip_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.CameraSensor.near_clip)
}

// optional double far_clip = 6;
inline bool CameraSensor::has_far_clip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CameraSensor::set_has_far_clip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CameraSensor::clear_has_far_clip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CameraSensor::clear_far_clip() {
  far_clip_ = 0;
  clear_has_far_clip();
}
inline double CameraSensor::far_clip() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.CameraSensor.far_clip)
  return far_clip_;
}
inline void CameraSensor::set_far_clip(double value) {
  set_has_far_clip();
  far_clip_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.CameraSensor.far_clip)
}

// optional bool save_enabled = 7;
inline bool CameraSensor::has_save_enabled() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CameraSensor::set_has_save_enabled() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CameraSensor::clear_has_save_enabled() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CameraSensor::clear_save_enabled() {
  save_enabled_ = false;
  clear_has_save_enabled();
}
inline bool CameraSensor::save_enabled() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.CameraSensor.save_enabled)
  return save_enabled_;
}
inline void CameraSensor::set_save_enabled(bool value) {
  set_has_save_enabled();
  save_enabled_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.CameraSensor.save_enabled)
}

// optional string save_path = 8;
inline bool CameraSensor::has_save_path() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CameraSensor::set_has_save_path() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CameraSensor::clear_has_save_path() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CameraSensor::clear_save_path() {
  save_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_save_path();
}
inline const ::std::string& CameraSensor::save_path() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.CameraSensor.save_path)
  return save_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraSensor::set_save_path(const ::std::string& value) {
  set_has_save_path();
  save_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.CameraSensor.save_path)
}
inline void CameraSensor::set_save_path(const char* value) {
  set_has_save_path();
  save_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.CameraSensor.save_path)
}
inline void CameraSensor::set_save_path(const char* value, size_t size) {
  set_has_save_path();
  save_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.CameraSensor.save_path)
}
inline ::std::string* CameraSensor::mutable_save_path() {
  set_has_save_path();
  // @@protoc_insertion_point(field_mutable:ignition.msgs.CameraSensor.save_path)
  return save_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CameraSensor::release_save_path() {
  // @@protoc_insertion_point(field_release:ignition.msgs.CameraSensor.save_path)
  clear_has_save_path();
  return save_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraSensor::set_allocated_save_path(::std::string* save_path) {
  if (save_path != NULL) {
    set_has_save_path();
  } else {
    clear_has_save_path();
  }
  save_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), save_path);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.CameraSensor.save_path)
}

// optional .ignition.msgs.Distortion distortion = 9;
inline bool CameraSensor::has_distortion() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CameraSensor::set_has_distortion() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CameraSensor::clear_has_distortion() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CameraSensor::clear_distortion() {
  if (distortion_ != NULL) distortion_->::ignition::msgs::Distortion::Clear();
  clear_has_distortion();
}
inline const ::ignition::msgs::Distortion& CameraSensor::distortion() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.CameraSensor.distortion)
  return distortion_ != NULL ? *distortion_ : *default_instance_->distortion_;
}
inline ::ignition::msgs::Distortion* CameraSensor::mutable_distortion() {
  set_has_distortion();
  if (distortion_ == NULL) {
    distortion_ = new ::ignition::msgs::Distortion;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.CameraSensor.distortion)
  return distortion_;
}
inline ::ignition::msgs::Distortion* CameraSensor::release_distortion() {
  // @@protoc_insertion_point(field_release:ignition.msgs.CameraSensor.distortion)
  clear_has_distortion();
  ::ignition::msgs::Distortion* temp = distortion_;
  distortion_ = NULL;
  return temp;
}
inline void CameraSensor::set_allocated_distortion(::ignition::msgs::Distortion* distortion) {
  delete distortion_;
  distortion_ = distortion;
  if (distortion) {
    set_has_distortion();
  } else {
    clear_has_distortion();
  }
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.CameraSensor.distortion)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef std::unique_ptr<CameraSensor> CameraSensorUniquePtr;
typedef std::unique_ptr<const CameraSensor> ConstCameraSensorUniquePtr;
typedef std::shared_ptr<CameraSensor> CameraSensorSharedPtr;
typedef std::shared_ptr<const CameraSensor> ConstCameraSensorSharedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

#ifdef _MSC_VER
#pragma warning(pop)
#endif
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ignition_2fmsgs_2fcamerasensor_2eproto__INCLUDED
