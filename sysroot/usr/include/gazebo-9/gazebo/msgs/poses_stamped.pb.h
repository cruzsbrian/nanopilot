// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: poses_stamped.proto

#ifndef PROTOBUF_poses_5fstamped_2eproto__INCLUDED
#define PROTOBUF_poses_5fstamped_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "time.pb.h"
#include "pose.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include <gazebo/util/system.hh>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

// Internal implementation detail -- do not call these.
void GZ_MSGS_VISIBLE protobuf_AddDesc_poses_5fstamped_2eproto();
void protobuf_AssignDesc_poses_5fstamped_2eproto();
void protobuf_ShutdownFile_poses_5fstamped_2eproto();

class PosesStamped;

// ===================================================================

class GZ_MSGS_VISIBLE PosesStamped : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.PosesStamped) */ {
 public:
  PosesStamped();
  virtual ~PosesStamped();

  PosesStamped(const PosesStamped& from);

  inline PosesStamped& operator=(const PosesStamped& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PosesStamped& default_instance();

  void Swap(PosesStamped* other);

  // implements Message ----------------------------------------------

  inline PosesStamped* New() const { return New(NULL); }

  PosesStamped* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PosesStamped& from);
  void MergeFrom(const PosesStamped& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PosesStamped* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gazebo.msgs.Time time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  const ::gazebo::msgs::Time& time() const;
  ::gazebo::msgs::Time* mutable_time();
  ::gazebo::msgs::Time* release_time();
  void set_allocated_time(::gazebo::msgs::Time* time);

  // repeated .gazebo.msgs.Pose pose = 2;
  int pose_size() const;
  void clear_pose();
  static const int kPoseFieldNumber = 2;
  const ::gazebo::msgs::Pose& pose(int index) const;
  ::gazebo::msgs::Pose* mutable_pose(int index);
  ::gazebo::msgs::Pose* add_pose();
  ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Pose >*
      mutable_pose();
  const ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Pose >&
      pose() const;

  // @@protoc_insertion_point(class_scope:gazebo.msgs.PosesStamped)
 private:
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gazebo::msgs::Time* time_;
  ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Pose > pose_;
  friend void GZ_MSGS_VISIBLE protobuf_AddDesc_poses_5fstamped_2eproto();
  friend void protobuf_AssignDesc_poses_5fstamped_2eproto();
  friend void protobuf_ShutdownFile_poses_5fstamped_2eproto();

  void InitAsDefaultInstance();
  static PosesStamped* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PosesStamped

// required .gazebo.msgs.Time time = 1;
inline bool PosesStamped::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PosesStamped::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PosesStamped::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PosesStamped::clear_time() {
  if (time_ != NULL) time_->::gazebo::msgs::Time::Clear();
  clear_has_time();
}
inline const ::gazebo::msgs::Time& PosesStamped::time() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.PosesStamped.time)
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
inline ::gazebo::msgs::Time* PosesStamped::mutable_time() {
  set_has_time();
  if (time_ == NULL) {
    time_ = new ::gazebo::msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.PosesStamped.time)
  return time_;
}
inline ::gazebo::msgs::Time* PosesStamped::release_time() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.PosesStamped.time)
  clear_has_time();
  ::gazebo::msgs::Time* temp = time_;
  time_ = NULL;
  return temp;
}
inline void PosesStamped::set_allocated_time(::gazebo::msgs::Time* time) {
  delete time_;
  time_ = time;
  if (time) {
    set_has_time();
  } else {
    clear_has_time();
  }
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.PosesStamped.time)
}

// repeated .gazebo.msgs.Pose pose = 2;
inline int PosesStamped::pose_size() const {
  return pose_.size();
}
inline void PosesStamped::clear_pose() {
  pose_.Clear();
}
inline const ::gazebo::msgs::Pose& PosesStamped::pose(int index) const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.PosesStamped.pose)
  return pose_.Get(index);
}
inline ::gazebo::msgs::Pose* PosesStamped::mutable_pose(int index) {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.PosesStamped.pose)
  return pose_.Mutable(index);
}
inline ::gazebo::msgs::Pose* PosesStamped::add_pose() {
  // @@protoc_insertion_point(field_add:gazebo.msgs.PosesStamped.pose)
  return pose_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Pose >*
PosesStamped::mutable_pose() {
  // @@protoc_insertion_point(field_mutable_list:gazebo.msgs.PosesStamped.pose)
  return &pose_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Pose >&
PosesStamped::pose() const {
  // @@protoc_insertion_point(field_list:gazebo.msgs.PosesStamped.pose)
  return pose_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef boost::shared_ptr<gazebo::msgs::PosesStamped> PosesStampedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

typedef const boost::shared_ptr<gazebo::msgs::PosesStamped const> ConstPosesStampedPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_poses_5fstamped_2eproto__INCLUDED
