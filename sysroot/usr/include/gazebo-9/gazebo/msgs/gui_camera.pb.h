// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gui_camera.proto

#ifndef PROTOBUF_gui_5fcamera_2eproto__INCLUDED
#define PROTOBUF_gui_5fcamera_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "pose.pb.h"
#include "track_visual.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include <gazebo/util/system.hh>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

// Internal implementation detail -- do not call these.
void GZ_MSGS_VISIBLE protobuf_AddDesc_gui_5fcamera_2eproto();
void protobuf_AssignDesc_gui_5fcamera_2eproto();
void protobuf_ShutdownFile_gui_5fcamera_2eproto();

class GUICamera;

// ===================================================================

class GZ_MSGS_VISIBLE GUICamera : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.GUICamera) */ {
 public:
  GUICamera();
  virtual ~GUICamera();

  GUICamera(const GUICamera& from);

  inline GUICamera& operator=(const GUICamera& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GUICamera& default_instance();

  void Swap(GUICamera* other);

  // implements Message ----------------------------------------------

  inline GUICamera* New() const { return New(NULL); }

  GUICamera* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GUICamera& from);
  void MergeFrom(const GUICamera& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GUICamera* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string view_controller = 2;
  bool has_view_controller() const;
  void clear_view_controller();
  static const int kViewControllerFieldNumber = 2;
  const ::std::string& view_controller() const;
  void set_view_controller(const ::std::string& value);
  void set_view_controller(const char* value);
  void set_view_controller(const char* value, size_t size);
  ::std::string* mutable_view_controller();
  ::std::string* release_view_controller();
  void set_allocated_view_controller(::std::string* view_controller);

  // optional .gazebo.msgs.Pose pose = 3;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 3;
  const ::gazebo::msgs::Pose& pose() const;
  ::gazebo::msgs::Pose* mutable_pose();
  ::gazebo::msgs::Pose* release_pose();
  void set_allocated_pose(::gazebo::msgs::Pose* pose);

  // optional .gazebo.msgs.TrackVisual track = 4;
  bool has_track() const;
  void clear_track();
  static const int kTrackFieldNumber = 4;
  const ::gazebo::msgs::TrackVisual& track() const;
  ::gazebo::msgs::TrackVisual* mutable_track();
  ::gazebo::msgs::TrackVisual* release_track();
  void set_allocated_track(::gazebo::msgs::TrackVisual* track);

  // optional string projection_type = 5;
  bool has_projection_type() const;
  void clear_projection_type();
  static const int kProjectionTypeFieldNumber = 5;
  const ::std::string& projection_type() const;
  void set_projection_type(const ::std::string& value);
  void set_projection_type(const char* value);
  void set_projection_type(const char* value, size_t size);
  ::std::string* mutable_projection_type();
  ::std::string* release_projection_type();
  void set_allocated_projection_type(::std::string* projection_type);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.GUICamera)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_view_controller();
  inline void clear_has_view_controller();
  inline void set_has_pose();
  inline void clear_has_pose();
  inline void set_has_track();
  inline void clear_has_track();
  inline void set_has_projection_type();
  inline void clear_has_projection_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr view_controller_;
  ::gazebo::msgs::Pose* pose_;
  ::gazebo::msgs::TrackVisual* track_;
  ::google::protobuf::internal::ArenaStringPtr projection_type_;
  friend void GZ_MSGS_VISIBLE protobuf_AddDesc_gui_5fcamera_2eproto();
  friend void protobuf_AssignDesc_gui_5fcamera_2eproto();
  friend void protobuf_ShutdownFile_gui_5fcamera_2eproto();

  void InitAsDefaultInstance();
  static GUICamera* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GUICamera

// required string name = 1;
inline bool GUICamera::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GUICamera::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GUICamera::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GUICamera::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& GUICamera::name() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.GUICamera.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GUICamera::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.GUICamera.name)
}
inline void GUICamera::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gazebo.msgs.GUICamera.name)
}
inline void GUICamera::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gazebo.msgs.GUICamera.name)
}
inline ::std::string* GUICamera::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.GUICamera.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GUICamera::release_name() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.GUICamera.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GUICamera::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.GUICamera.name)
}

// optional string view_controller = 2;
inline bool GUICamera::has_view_controller() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GUICamera::set_has_view_controller() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GUICamera::clear_has_view_controller() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GUICamera::clear_view_controller() {
  view_controller_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_view_controller();
}
inline const ::std::string& GUICamera::view_controller() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.GUICamera.view_controller)
  return view_controller_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GUICamera::set_view_controller(const ::std::string& value) {
  set_has_view_controller();
  view_controller_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.GUICamera.view_controller)
}
inline void GUICamera::set_view_controller(const char* value) {
  set_has_view_controller();
  view_controller_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gazebo.msgs.GUICamera.view_controller)
}
inline void GUICamera::set_view_controller(const char* value, size_t size) {
  set_has_view_controller();
  view_controller_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gazebo.msgs.GUICamera.view_controller)
}
inline ::std::string* GUICamera::mutable_view_controller() {
  set_has_view_controller();
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.GUICamera.view_controller)
  return view_controller_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GUICamera::release_view_controller() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.GUICamera.view_controller)
  clear_has_view_controller();
  return view_controller_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GUICamera::set_allocated_view_controller(::std::string* view_controller) {
  if (view_controller != NULL) {
    set_has_view_controller();
  } else {
    clear_has_view_controller();
  }
  view_controller_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), view_controller);
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.GUICamera.view_controller)
}

// optional .gazebo.msgs.Pose pose = 3;
inline bool GUICamera::has_pose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GUICamera::set_has_pose() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GUICamera::clear_has_pose() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GUICamera::clear_pose() {
  if (pose_ != NULL) pose_->::gazebo::msgs::Pose::Clear();
  clear_has_pose();
}
inline const ::gazebo::msgs::Pose& GUICamera::pose() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.GUICamera.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::gazebo::msgs::Pose* GUICamera::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::gazebo::msgs::Pose;
  }
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.GUICamera.pose)
  return pose_;
}
inline ::gazebo::msgs::Pose* GUICamera::release_pose() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.GUICamera.pose)
  clear_has_pose();
  ::gazebo::msgs::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void GUICamera::set_allocated_pose(::gazebo::msgs::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.GUICamera.pose)
}

// optional .gazebo.msgs.TrackVisual track = 4;
inline bool GUICamera::has_track() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GUICamera::set_has_track() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GUICamera::clear_has_track() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GUICamera::clear_track() {
  if (track_ != NULL) track_->::gazebo::msgs::TrackVisual::Clear();
  clear_has_track();
}
inline const ::gazebo::msgs::TrackVisual& GUICamera::track() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.GUICamera.track)
  return track_ != NULL ? *track_ : *default_instance_->track_;
}
inline ::gazebo::msgs::TrackVisual* GUICamera::mutable_track() {
  set_has_track();
  if (track_ == NULL) {
    track_ = new ::gazebo::msgs::TrackVisual;
  }
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.GUICamera.track)
  return track_;
}
inline ::gazebo::msgs::TrackVisual* GUICamera::release_track() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.GUICamera.track)
  clear_has_track();
  ::gazebo::msgs::TrackVisual* temp = track_;
  track_ = NULL;
  return temp;
}
inline void GUICamera::set_allocated_track(::gazebo::msgs::TrackVisual* track) {
  delete track_;
  track_ = track;
  if (track) {
    set_has_track();
  } else {
    clear_has_track();
  }
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.GUICamera.track)
}

// optional string projection_type = 5;
inline bool GUICamera::has_projection_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GUICamera::set_has_projection_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GUICamera::clear_has_projection_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GUICamera::clear_projection_type() {
  projection_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_projection_type();
}
inline const ::std::string& GUICamera::projection_type() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.GUICamera.projection_type)
  return projection_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GUICamera::set_projection_type(const ::std::string& value) {
  set_has_projection_type();
  projection_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.GUICamera.projection_type)
}
inline void GUICamera::set_projection_type(const char* value) {
  set_has_projection_type();
  projection_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gazebo.msgs.GUICamera.projection_type)
}
inline void GUICamera::set_projection_type(const char* value, size_t size) {
  set_has_projection_type();
  projection_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gazebo.msgs.GUICamera.projection_type)
}
inline ::std::string* GUICamera::mutable_projection_type() {
  set_has_projection_type();
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.GUICamera.projection_type)
  return projection_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GUICamera::release_projection_type() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.GUICamera.projection_type)
  clear_has_projection_type();
  return projection_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GUICamera::set_allocated_projection_type(::std::string* projection_type) {
  if (projection_type != NULL) {
    set_has_projection_type();
  } else {
    clear_has_projection_type();
  }
  projection_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), projection_type);
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.GUICamera.projection_type)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef boost::shared_ptr<gazebo::msgs::GUICamera> GUICameraPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

typedef const boost::shared_ptr<gazebo::msgs::GUICamera const> ConstGUICameraPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gui_5fcamera_2eproto__INCLUDED
