// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: track_visual.proto

#ifndef PROTOBUF_track_5fvisual_2eproto__INCLUDED
#define PROTOBUF_track_5fvisual_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "vector3d.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include <gazebo/util/system.hh>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

// Internal implementation detail -- do not call these.
void GZ_MSGS_VISIBLE protobuf_AddDesc_track_5fvisual_2eproto();
void protobuf_AssignDesc_track_5fvisual_2eproto();
void protobuf_ShutdownFile_track_5fvisual_2eproto();

class TrackVisual;

// ===================================================================

class GZ_MSGS_VISIBLE TrackVisual : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.TrackVisual) */ {
 public:
  TrackVisual();
  virtual ~TrackVisual();

  TrackVisual(const TrackVisual& from);

  inline TrackVisual& operator=(const TrackVisual& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackVisual& default_instance();

  void Swap(TrackVisual* other);

  // implements Message ----------------------------------------------

  inline TrackVisual* New() const { return New(NULL); }

  TrackVisual* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackVisual& from);
  void MergeFrom(const TrackVisual& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrackVisual* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional bool inherit_orientation = 3;
  bool has_inherit_orientation() const;
  void clear_inherit_orientation();
  static const int kInheritOrientationFieldNumber = 3;
  bool inherit_orientation() const;
  void set_inherit_orientation(bool value);

  // optional double min_dist = 4;
  bool has_min_dist() const;
  void clear_min_dist();
  static const int kMinDistFieldNumber = 4;
  double min_dist() const;
  void set_min_dist(double value);

  // optional double max_dist = 5;
  bool has_max_dist() const;
  void clear_max_dist();
  static const int kMaxDistFieldNumber = 5;
  double max_dist() const;
  void set_max_dist(double value);

  // optional bool static = 6;
  bool has_static_() const;
  void clear_static_();
  static const int kStaticFieldNumber = 6;
  bool static_() const;
  void set_static_(bool value);

  // optional bool use_model_frame = 7;
  bool has_use_model_frame() const;
  void clear_use_model_frame();
  static const int kUseModelFrameFieldNumber = 7;
  bool use_model_frame() const;
  void set_use_model_frame(bool value);

  // optional .gazebo.msgs.Vector3d xyz = 8;
  bool has_xyz() const;
  void clear_xyz();
  static const int kXyzFieldNumber = 8;
  const ::gazebo::msgs::Vector3d& xyz() const;
  ::gazebo::msgs::Vector3d* mutable_xyz();
  ::gazebo::msgs::Vector3d* release_xyz();
  void set_allocated_xyz(::gazebo::msgs::Vector3d* xyz);

  // optional bool inherit_yaw = 9;
  bool has_inherit_yaw() const;
  void clear_inherit_yaw();
  static const int kInheritYawFieldNumber = 9;
  bool inherit_yaw() const;
  void set_inherit_yaw(bool value);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.TrackVisual)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_inherit_orientation();
  inline void clear_has_inherit_orientation();
  inline void set_has_min_dist();
  inline void clear_has_min_dist();
  inline void set_has_max_dist();
  inline void clear_has_max_dist();
  inline void set_has_static_();
  inline void clear_has_static_();
  inline void set_has_use_model_frame();
  inline void clear_has_use_model_frame();
  inline void set_has_xyz();
  inline void clear_has_xyz();
  inline void set_has_inherit_yaw();
  inline void clear_has_inherit_yaw();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  double min_dist_;
  double max_dist_;
  ::google::protobuf::uint32 id_;
  bool inherit_orientation_;
  bool static__;
  bool use_model_frame_;
  bool inherit_yaw_;
  ::gazebo::msgs::Vector3d* xyz_;
  friend void GZ_MSGS_VISIBLE protobuf_AddDesc_track_5fvisual_2eproto();
  friend void protobuf_AssignDesc_track_5fvisual_2eproto();
  friend void protobuf_ShutdownFile_track_5fvisual_2eproto();

  void InitAsDefaultInstance();
  static TrackVisual* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackVisual

// required string name = 1;
inline bool TrackVisual::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrackVisual::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrackVisual::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrackVisual::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& TrackVisual::name() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.TrackVisual.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrackVisual::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.TrackVisual.name)
}
inline void TrackVisual::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gazebo.msgs.TrackVisual.name)
}
inline void TrackVisual::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gazebo.msgs.TrackVisual.name)
}
inline ::std::string* TrackVisual::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.TrackVisual.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrackVisual::release_name() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.TrackVisual.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrackVisual::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.TrackVisual.name)
}

// optional uint32 id = 2;
inline bool TrackVisual::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrackVisual::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrackVisual::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrackVisual::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TrackVisual::id() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.TrackVisual.id)
  return id_;
}
inline void TrackVisual::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.TrackVisual.id)
}

// optional bool inherit_orientation = 3;
inline bool TrackVisual::has_inherit_orientation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrackVisual::set_has_inherit_orientation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrackVisual::clear_has_inherit_orientation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrackVisual::clear_inherit_orientation() {
  inherit_orientation_ = false;
  clear_has_inherit_orientation();
}
inline bool TrackVisual::inherit_orientation() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.TrackVisual.inherit_orientation)
  return inherit_orientation_;
}
inline void TrackVisual::set_inherit_orientation(bool value) {
  set_has_inherit_orientation();
  inherit_orientation_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.TrackVisual.inherit_orientation)
}

// optional double min_dist = 4;
inline bool TrackVisual::has_min_dist() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrackVisual::set_has_min_dist() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrackVisual::clear_has_min_dist() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrackVisual::clear_min_dist() {
  min_dist_ = 0;
  clear_has_min_dist();
}
inline double TrackVisual::min_dist() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.TrackVisual.min_dist)
  return min_dist_;
}
inline void TrackVisual::set_min_dist(double value) {
  set_has_min_dist();
  min_dist_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.TrackVisual.min_dist)
}

// optional double max_dist = 5;
inline bool TrackVisual::has_max_dist() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrackVisual::set_has_max_dist() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrackVisual::clear_has_max_dist() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrackVisual::clear_max_dist() {
  max_dist_ = 0;
  clear_has_max_dist();
}
inline double TrackVisual::max_dist() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.TrackVisual.max_dist)
  return max_dist_;
}
inline void TrackVisual::set_max_dist(double value) {
  set_has_max_dist();
  max_dist_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.TrackVisual.max_dist)
}

// optional bool static = 6;
inline bool TrackVisual::has_static_() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrackVisual::set_has_static_() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrackVisual::clear_has_static_() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrackVisual::clear_static_() {
  static__ = false;
  clear_has_static_();
}
inline bool TrackVisual::static_() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.TrackVisual.static)
  return static__;
}
inline void TrackVisual::set_static_(bool value) {
  set_has_static_();
  static__ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.TrackVisual.static)
}

// optional bool use_model_frame = 7;
inline bool TrackVisual::has_use_model_frame() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TrackVisual::set_has_use_model_frame() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TrackVisual::clear_has_use_model_frame() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TrackVisual::clear_use_model_frame() {
  use_model_frame_ = false;
  clear_has_use_model_frame();
}
inline bool TrackVisual::use_model_frame() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.TrackVisual.use_model_frame)
  return use_model_frame_;
}
inline void TrackVisual::set_use_model_frame(bool value) {
  set_has_use_model_frame();
  use_model_frame_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.TrackVisual.use_model_frame)
}

// optional .gazebo.msgs.Vector3d xyz = 8;
inline bool TrackVisual::has_xyz() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TrackVisual::set_has_xyz() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TrackVisual::clear_has_xyz() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TrackVisual::clear_xyz() {
  if (xyz_ != NULL) xyz_->::gazebo::msgs::Vector3d::Clear();
  clear_has_xyz();
}
inline const ::gazebo::msgs::Vector3d& TrackVisual::xyz() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.TrackVisual.xyz)
  return xyz_ != NULL ? *xyz_ : *default_instance_->xyz_;
}
inline ::gazebo::msgs::Vector3d* TrackVisual::mutable_xyz() {
  set_has_xyz();
  if (xyz_ == NULL) {
    xyz_ = new ::gazebo::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.TrackVisual.xyz)
  return xyz_;
}
inline ::gazebo::msgs::Vector3d* TrackVisual::release_xyz() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.TrackVisual.xyz)
  clear_has_xyz();
  ::gazebo::msgs::Vector3d* temp = xyz_;
  xyz_ = NULL;
  return temp;
}
inline void TrackVisual::set_allocated_xyz(::gazebo::msgs::Vector3d* xyz) {
  delete xyz_;
  xyz_ = xyz;
  if (xyz) {
    set_has_xyz();
  } else {
    clear_has_xyz();
  }
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.TrackVisual.xyz)
}

// optional bool inherit_yaw = 9;
inline bool TrackVisual::has_inherit_yaw() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TrackVisual::set_has_inherit_yaw() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TrackVisual::clear_has_inherit_yaw() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TrackVisual::clear_inherit_yaw() {
  inherit_yaw_ = false;
  clear_has_inherit_yaw();
}
inline bool TrackVisual::inherit_yaw() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.TrackVisual.inherit_yaw)
  return inherit_yaw_;
}
inline void TrackVisual::set_inherit_yaw(bool value) {
  set_has_inherit_yaw();
  inherit_yaw_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.TrackVisual.inherit_yaw)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef boost::shared_ptr<gazebo::msgs::TrackVisual> TrackVisualPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

typedef const boost::shared_ptr<gazebo::msgs::TrackVisual const> ConstTrackVisualPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_track_5fvisual_2eproto__INCLUDED
