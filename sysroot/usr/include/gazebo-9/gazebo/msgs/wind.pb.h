// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wind.proto

#ifndef PROTOBUF_wind_2eproto__INCLUDED
#define PROTOBUF_wind_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "vector3d.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include <gazebo/util/system.hh>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

// Internal implementation detail -- do not call these.
void GZ_MSGS_VISIBLE protobuf_AddDesc_wind_2eproto();
void protobuf_AssignDesc_wind_2eproto();
void protobuf_ShutdownFile_wind_2eproto();

class Wind;

// ===================================================================

class GZ_MSGS_VISIBLE Wind : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.Wind) */ {
 public:
  Wind();
  virtual ~Wind();

  Wind(const Wind& from);

  inline Wind& operator=(const Wind& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Wind& default_instance();

  void Swap(Wind* other);

  // implements Message ----------------------------------------------

  inline Wind* New() const { return New(NULL); }

  Wind* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Wind& from);
  void MergeFrom(const Wind& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Wind* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gazebo.msgs.Vector3d linear_velocity = 1;
  bool has_linear_velocity() const;
  void clear_linear_velocity();
  static const int kLinearVelocityFieldNumber = 1;
  const ::gazebo::msgs::Vector3d& linear_velocity() const;
  ::gazebo::msgs::Vector3d* mutable_linear_velocity();
  ::gazebo::msgs::Vector3d* release_linear_velocity();
  void set_allocated_linear_velocity(::gazebo::msgs::Vector3d* linear_velocity);

  // optional bool enable_wind = 2;
  bool has_enable_wind() const;
  void clear_enable_wind();
  static const int kEnableWindFieldNumber = 2;
  bool enable_wind() const;
  void set_enable_wind(bool value);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.Wind)
 private:
  inline void set_has_linear_velocity();
  inline void clear_has_linear_velocity();
  inline void set_has_enable_wind();
  inline void clear_has_enable_wind();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gazebo::msgs::Vector3d* linear_velocity_;
  bool enable_wind_;
  friend void GZ_MSGS_VISIBLE protobuf_AddDesc_wind_2eproto();
  friend void protobuf_AssignDesc_wind_2eproto();
  friend void protobuf_ShutdownFile_wind_2eproto();

  void InitAsDefaultInstance();
  static Wind* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Wind

// optional .gazebo.msgs.Vector3d linear_velocity = 1;
inline bool Wind::has_linear_velocity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Wind::set_has_linear_velocity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Wind::clear_has_linear_velocity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Wind::clear_linear_velocity() {
  if (linear_velocity_ != NULL) linear_velocity_->::gazebo::msgs::Vector3d::Clear();
  clear_has_linear_velocity();
}
inline const ::gazebo::msgs::Vector3d& Wind::linear_velocity() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Wind.linear_velocity)
  return linear_velocity_ != NULL ? *linear_velocity_ : *default_instance_->linear_velocity_;
}
inline ::gazebo::msgs::Vector3d* Wind::mutable_linear_velocity() {
  set_has_linear_velocity();
  if (linear_velocity_ == NULL) {
    linear_velocity_ = new ::gazebo::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Wind.linear_velocity)
  return linear_velocity_;
}
inline ::gazebo::msgs::Vector3d* Wind::release_linear_velocity() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Wind.linear_velocity)
  clear_has_linear_velocity();
  ::gazebo::msgs::Vector3d* temp = linear_velocity_;
  linear_velocity_ = NULL;
  return temp;
}
inline void Wind::set_allocated_linear_velocity(::gazebo::msgs::Vector3d* linear_velocity) {
  delete linear_velocity_;
  linear_velocity_ = linear_velocity;
  if (linear_velocity) {
    set_has_linear_velocity();
  } else {
    clear_has_linear_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Wind.linear_velocity)
}

// optional bool enable_wind = 2;
inline bool Wind::has_enable_wind() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Wind::set_has_enable_wind() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Wind::clear_has_enable_wind() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Wind::clear_enable_wind() {
  enable_wind_ = false;
  clear_has_enable_wind();
}
inline bool Wind::enable_wind() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Wind.enable_wind)
  return enable_wind_;
}
inline void Wind::set_enable_wind(bool value) {
  set_has_enable_wind();
  enable_wind_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.Wind.enable_wind)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef boost::shared_ptr<gazebo::msgs::Wind> WindPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

typedef const boost::shared_ptr<gazebo::msgs::Wind const> ConstWindPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_wind_2eproto__INCLUDED
