// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logical_camera_sensor.proto

#ifndef PROTOBUF_logical_5fcamera_5fsensor_2eproto__INCLUDED
#define PROTOBUF_logical_5fcamera_5fsensor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include <gazebo/util/system.hh>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

// Internal implementation detail -- do not call these.
void GZ_MSGS_VISIBLE protobuf_AddDesc_logical_5fcamera_5fsensor_2eproto();
void protobuf_AssignDesc_logical_5fcamera_5fsensor_2eproto();
void protobuf_ShutdownFile_logical_5fcamera_5fsensor_2eproto();

class LogicalCameraSensor;

// ===================================================================

class GZ_MSGS_VISIBLE LogicalCameraSensor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.LogicalCameraSensor) */ {
 public:
  LogicalCameraSensor();
  virtual ~LogicalCameraSensor();

  LogicalCameraSensor(const LogicalCameraSensor& from);

  inline LogicalCameraSensor& operator=(const LogicalCameraSensor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogicalCameraSensor& default_instance();

  void Swap(LogicalCameraSensor* other);

  // implements Message ----------------------------------------------

  inline LogicalCameraSensor* New() const { return New(NULL); }

  LogicalCameraSensor* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogicalCameraSensor& from);
  void MergeFrom(const LogicalCameraSensor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogicalCameraSensor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double near_clip = 1;
  bool has_near_clip() const;
  void clear_near_clip();
  static const int kNearClipFieldNumber = 1;
  double near_clip() const;
  void set_near_clip(double value);

  // required double far_clip = 2;
  bool has_far_clip() const;
  void clear_far_clip();
  static const int kFarClipFieldNumber = 2;
  double far_clip() const;
  void set_far_clip(double value);

  // required double horizontal_fov = 3;
  bool has_horizontal_fov() const;
  void clear_horizontal_fov();
  static const int kHorizontalFovFieldNumber = 3;
  double horizontal_fov() const;
  void set_horizontal_fov(double value);

  // required double aspect_ratio = 4;
  bool has_aspect_ratio() const;
  void clear_aspect_ratio();
  static const int kAspectRatioFieldNumber = 4;
  double aspect_ratio() const;
  void set_aspect_ratio(double value);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.LogicalCameraSensor)
 private:
  inline void set_has_near_clip();
  inline void clear_has_near_clip();
  inline void set_has_far_clip();
  inline void clear_has_far_clip();
  inline void set_has_horizontal_fov();
  inline void clear_has_horizontal_fov();
  inline void set_has_aspect_ratio();
  inline void clear_has_aspect_ratio();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double near_clip_;
  double far_clip_;
  double horizontal_fov_;
  double aspect_ratio_;
  friend void GZ_MSGS_VISIBLE protobuf_AddDesc_logical_5fcamera_5fsensor_2eproto();
  friend void protobuf_AssignDesc_logical_5fcamera_5fsensor_2eproto();
  friend void protobuf_ShutdownFile_logical_5fcamera_5fsensor_2eproto();

  void InitAsDefaultInstance();
  static LogicalCameraSensor* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LogicalCameraSensor

// required double near_clip = 1;
inline bool LogicalCameraSensor::has_near_clip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogicalCameraSensor::set_has_near_clip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogicalCameraSensor::clear_has_near_clip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogicalCameraSensor::clear_near_clip() {
  near_clip_ = 0;
  clear_has_near_clip();
}
inline double LogicalCameraSensor::near_clip() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.LogicalCameraSensor.near_clip)
  return near_clip_;
}
inline void LogicalCameraSensor::set_near_clip(double value) {
  set_has_near_clip();
  near_clip_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.LogicalCameraSensor.near_clip)
}

// required double far_clip = 2;
inline bool LogicalCameraSensor::has_far_clip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogicalCameraSensor::set_has_far_clip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogicalCameraSensor::clear_has_far_clip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogicalCameraSensor::clear_far_clip() {
  far_clip_ = 0;
  clear_has_far_clip();
}
inline double LogicalCameraSensor::far_clip() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.LogicalCameraSensor.far_clip)
  return far_clip_;
}
inline void LogicalCameraSensor::set_far_clip(double value) {
  set_has_far_clip();
  far_clip_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.LogicalCameraSensor.far_clip)
}

// required double horizontal_fov = 3;
inline bool LogicalCameraSensor::has_horizontal_fov() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogicalCameraSensor::set_has_horizontal_fov() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogicalCameraSensor::clear_has_horizontal_fov() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogicalCameraSensor::clear_horizontal_fov() {
  horizontal_fov_ = 0;
  clear_has_horizontal_fov();
}
inline double LogicalCameraSensor::horizontal_fov() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.LogicalCameraSensor.horizontal_fov)
  return horizontal_fov_;
}
inline void LogicalCameraSensor::set_horizontal_fov(double value) {
  set_has_horizontal_fov();
  horizontal_fov_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.LogicalCameraSensor.horizontal_fov)
}

// required double aspect_ratio = 4;
inline bool LogicalCameraSensor::has_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogicalCameraSensor::set_has_aspect_ratio() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogicalCameraSensor::clear_has_aspect_ratio() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogicalCameraSensor::clear_aspect_ratio() {
  aspect_ratio_ = 0;
  clear_has_aspect_ratio();
}
inline double LogicalCameraSensor::aspect_ratio() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.LogicalCameraSensor.aspect_ratio)
  return aspect_ratio_;
}
inline void LogicalCameraSensor::set_aspect_ratio(double value) {
  set_has_aspect_ratio();
  aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.LogicalCameraSensor.aspect_ratio)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef boost::shared_ptr<gazebo::msgs::LogicalCameraSensor> LogicalCameraSensorPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

typedef const boost::shared_ptr<gazebo::msgs::LogicalCameraSensor const> ConstLogicalCameraSensorPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_logical_5fcamera_5fsensor_2eproto__INCLUDED
