// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log_playback_stats.proto

#ifndef PROTOBUF_log_5fplayback_5fstats_2eproto__INCLUDED
#define PROTOBUF_log_5fplayback_5fstats_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "time.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include <gazebo/util/system.hh>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

// Internal implementation detail -- do not call these.
void GZ_MSGS_VISIBLE protobuf_AddDesc_log_5fplayback_5fstats_2eproto();
void protobuf_AssignDesc_log_5fplayback_5fstats_2eproto();
void protobuf_ShutdownFile_log_5fplayback_5fstats_2eproto();

class LogPlaybackStatistics;

// ===================================================================

class GZ_MSGS_VISIBLE LogPlaybackStatistics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.LogPlaybackStatistics) */ {
 public:
  LogPlaybackStatistics();
  virtual ~LogPlaybackStatistics();

  LogPlaybackStatistics(const LogPlaybackStatistics& from);

  inline LogPlaybackStatistics& operator=(const LogPlaybackStatistics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogPlaybackStatistics& default_instance();

  void Swap(LogPlaybackStatistics* other);

  // implements Message ----------------------------------------------

  inline LogPlaybackStatistics* New() const { return New(NULL); }

  LogPlaybackStatistics* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogPlaybackStatistics& from);
  void MergeFrom(const LogPlaybackStatistics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogPlaybackStatistics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gazebo.msgs.Time start_time = 1;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 1;
  const ::gazebo::msgs::Time& start_time() const;
  ::gazebo::msgs::Time* mutable_start_time();
  ::gazebo::msgs::Time* release_start_time();
  void set_allocated_start_time(::gazebo::msgs::Time* start_time);

  // required .gazebo.msgs.Time end_time = 2;
  bool has_end_time() const;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 2;
  const ::gazebo::msgs::Time& end_time() const;
  ::gazebo::msgs::Time* mutable_end_time();
  ::gazebo::msgs::Time* release_end_time();
  void set_allocated_end_time(::gazebo::msgs::Time* end_time);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.LogPlaybackStatistics)
 private:
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gazebo::msgs::Time* start_time_;
  ::gazebo::msgs::Time* end_time_;
  friend void GZ_MSGS_VISIBLE protobuf_AddDesc_log_5fplayback_5fstats_2eproto();
  friend void protobuf_AssignDesc_log_5fplayback_5fstats_2eproto();
  friend void protobuf_ShutdownFile_log_5fplayback_5fstats_2eproto();

  void InitAsDefaultInstance();
  static LogPlaybackStatistics* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LogPlaybackStatistics

// required .gazebo.msgs.Time start_time = 1;
inline bool LogPlaybackStatistics::has_start_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogPlaybackStatistics::set_has_start_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogPlaybackStatistics::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogPlaybackStatistics::clear_start_time() {
  if (start_time_ != NULL) start_time_->::gazebo::msgs::Time::Clear();
  clear_has_start_time();
}
inline const ::gazebo::msgs::Time& LogPlaybackStatistics::start_time() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.LogPlaybackStatistics.start_time)
  return start_time_ != NULL ? *start_time_ : *default_instance_->start_time_;
}
inline ::gazebo::msgs::Time* LogPlaybackStatistics::mutable_start_time() {
  set_has_start_time();
  if (start_time_ == NULL) {
    start_time_ = new ::gazebo::msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.LogPlaybackStatistics.start_time)
  return start_time_;
}
inline ::gazebo::msgs::Time* LogPlaybackStatistics::release_start_time() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.LogPlaybackStatistics.start_time)
  clear_has_start_time();
  ::gazebo::msgs::Time* temp = start_time_;
  start_time_ = NULL;
  return temp;
}
inline void LogPlaybackStatistics::set_allocated_start_time(::gazebo::msgs::Time* start_time) {
  delete start_time_;
  start_time_ = start_time;
  if (start_time) {
    set_has_start_time();
  } else {
    clear_has_start_time();
  }
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.LogPlaybackStatistics.start_time)
}

// required .gazebo.msgs.Time end_time = 2;
inline bool LogPlaybackStatistics::has_end_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogPlaybackStatistics::set_has_end_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogPlaybackStatistics::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogPlaybackStatistics::clear_end_time() {
  if (end_time_ != NULL) end_time_->::gazebo::msgs::Time::Clear();
  clear_has_end_time();
}
inline const ::gazebo::msgs::Time& LogPlaybackStatistics::end_time() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.LogPlaybackStatistics.end_time)
  return end_time_ != NULL ? *end_time_ : *default_instance_->end_time_;
}
inline ::gazebo::msgs::Time* LogPlaybackStatistics::mutable_end_time() {
  set_has_end_time();
  if (end_time_ == NULL) {
    end_time_ = new ::gazebo::msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.LogPlaybackStatistics.end_time)
  return end_time_;
}
inline ::gazebo::msgs::Time* LogPlaybackStatistics::release_end_time() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.LogPlaybackStatistics.end_time)
  clear_has_end_time();
  ::gazebo::msgs::Time* temp = end_time_;
  end_time_ = NULL;
  return temp;
}
inline void LogPlaybackStatistics::set_allocated_end_time(::gazebo::msgs::Time* end_time) {
  delete end_time_;
  end_time_ = end_time;
  if (end_time) {
    set_has_end_time();
  } else {
    clear_has_end_time();
  }
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.LogPlaybackStatistics.end_time)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

typedef boost::shared_ptr<gazebo::msgs::LogPlaybackStatistics> LogPlaybackStatisticsPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

typedef const boost::shared_ptr<gazebo::msgs::LogPlaybackStatistics const> ConstLogPlaybackStatisticsPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_log_5fplayback_5fstats_2eproto__INCLUDED
